#!/usr/bin/env python3
from __future__ import print_function
import re
try:
    import subprocess32 as sp
except ImportError:
    import subprocess as sp
import argparse
from argparse import RawTextHelpFormatter
import os 
import atexit
import signal
import glob
import time
import sys
from threading  import Thread
try:
    from queue import Queue, Empty
except ImportError:
    from Queue import Queue, Empty  # python 2.x

def kill_sp(pids):
    """ensure processes killed if this script is killed"""
    for pid in pids:
        if pid is None:
            pass
        else:
            try:
                os.killpg(pid, signal.SIGTERM)
            except OSError:
                pass

class cd:
    """Context manager for changing the current working directory"""
    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)


def which(program):
    """Get exectuables which exist on path"""
    def is_exe(fpath):
        return os.path.isfile(fpath) and os.access(fpath, os.X_OK)

    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return program


def split_procs_exec_args(args, exectype):

    nprocs = args[exectype][0]
    arg = args[exectype][1].split()
    preexec = []
    if "valgrind" in arg[0]:
        preexec.append("valgrind")
        for argoffset in range(1, len(arg[1:])):
            if "-" in arg[argoffset]:
                preexec.append(arg[argoffset])
                argoffset += 1
            else:
                execname = arg[argoffset]
                break

    elif "singularity" in arg[0]:
        preexec.append("singularity")
        exec_next = False
        for argoffset in range(1, len(arg[:])):
            if exec_next:
                execname = arg[argoffset]
                break
            elif ".simg" in arg[argoffset]:
                exec_next = True
            preexec.append(arg[argoffset])

    else:
        execname = arg[0]
        argoffset = 0
        
    if len(arg[argoffset+1:]) > 1:
        args_list = arg[argoffset+1:]
    else:
        args_list = []

    return nprocs, preexec, execname, args_list


def get_subprocess_error(e):
    print("subprocess ERROR")
    import json
    error = json.loads(e[7:])
    print(error['code'], error['message'])


def runcmd(cmd):

    try:
        run = sp.Popen(cmd, stdout=sp.PIPE, stderr=None, shell=True)
    except sp.CalledProcessError as e:
        if e.output.startswith('error: {'):
            get_subprocess_error(e.output)
        raise

    return run

def execute(cmd, blocking=True):
    """
    Outputs results as they are generated, example usage:

    from __future__ import print_function

    for path in execute(["locate", "a"]):
        print(path, end="")

    """
    popen = sp.Popen(cmd, stdout=sp.PIPE, stderr=sp.STDOUT, 
                     shell=True, universal_newlines=True)
    for stdout_line in iter(popen.stdout.readline, ""):
        yield stdout_line 
    popen.stdout.close()
    if blocking:
        return_code = popen.wait()

    if return_code:
        raise sp.CalledProcessError(return_code, cmd)


def check_for_error(proc):
    """
        If an Error (e.g. NameError) is raised by a Python
        script after cpl has opened a port and merged two processes
        do not trigger the subprocess error code (as the coupled code
        in this case does not call MPI Abort due to a Python error)
        So we need to catch this manually
    """
    for line in iter(proc.stderr.readline, b''):
        try:
            if "NameError" in line:
                raise NameError(line)
                sys.exit(1)
            elif "Error" in line:
                print(line)
                sys.exit(1)
            else:
                print(line.replace("\n",""))
        except IOError:
            pass


def enqueue_output(process, queue, cmdstr, proctype):

    from termcolor import colored
    #Check for output
    out = process.stdout
    for line in iter(out.readline, b''):
        if "CFD" in proctype:
            queue.put(colored(line, "red"))
        elif "MD" in proctype:
            queue.put(colored(line, "blue"))
        else:
            queue.put(colored(line, "black"))

    out.close()

def get_libraries(filename=None):
    """
     Get List of Librairies in Dictionary
    """
    run = runcmd('ldd '+ filename)
    lddOut = run.stdout.read().decode("utf-8")
    if "not" in lddOut and "dynamic" in lddOut:
        print(filename + " is " + lddOut)
        return "N/A"
    libraries = {}
    for line in lddOut.split("\n"):
        match = re.match(r'\t(.*) => (.*) \(0x', line)
        if match:
            libraries[match.group(1)] = match.group(2)

    return libraries


#Keyword arguments
description = """

Run coupled case using MPI_port system (Must be supported by your MPI version). 
Note, only script.py needed for python (i.e. "python script.py" not needed).
All commands and arguments should be in quotes, example usage:

Run a CFD and MD code in the local file

    cplexec -c 24 "./CFD" -m 48 "./MD"

Run OpenFOAM and LAMMPS Coupled with OpenFOAM executable CPLSediFOAM on the path, 
input file in folder stored in $OPEN_FOAM_CASE environment variable and piping OpenFOAM
ouput to log.openfoam, while lammps input is in lammps/fcc.in and output on commandline

    cplexec -c 1 "CPLSediFOAM -case ${OPEN_FOAM_CASE} -parallel > log.openfoam" -m 1 "../lmp_cpl < lammps/fcc.in"
    
Run LAMMPS executable which is on the path (from source SOURCEME.sh or installing)
and using a local mock script for debugging purposes

    cplexec -c 24 "./CFD_mock_fcc.py" -m 1056 "lmp_cpl < lammps/in.in"

First argument after the number of processors is the exectuable and all other arguments are inputs, etc.
If using some form of debugger or testing (gdb, valgrind, etc) then you need to specify
as follows.

    cplexec -c 1 "./CFD_mock_fcc.py" -m 1 "valgrind lmp_cpl -in lammps/fcc.in"

It is advisable to use cplexec for coupled runs.

The purpose of cplexec is threefold: 

 1) The version of CPL library, MPI and compiler should be the same
    for both codes, this is checked before starting a run, preventing
    a host of very weird errors from the internals of MPI.
 2) The two codes can be started in MPMD mode or individually as subprocesses.
    Starting indivdually is more general (and potentially more efficient
    as it forces both codes to optimise individually and then the intra-communications 
    is establised after (3D comms in code vs coupled comms along a 2D plane.)
    The MPI instances are connected by opening a port, writing details to 
    file and reading with the other code. This script ensures the 
    port file, written at location of exec 1 is available to exec 2.
 3) The two processes are linked so an error in one is (hopefully) caught
    and the other process can be terminated. For port connected codes
    this is non-trvial, for example a Python script which parses a minor typo
    after CPL_init has been called cannot propergate the error to the coupled code.
    To handle this, cplexec polls both codes and monitors the stderror streams to look
    for evidence of problems

 In  addition, running with SimWrapLib, PBS or other service is simplified by a single cplexec.

"""

parser = argparse.ArgumentParser(description=description, formatter_class=RawTextHelpFormatter)
parser.add_argument('-M', '--MPMD', help='Use MPMD Based Coupling', required=False, action="store_true")
parser.add_argument('-v', '--verbose', help='Specify verbosity', required=False, action="store_true")
parser.add_argument('-p', '--permissive', help='Allow run with different compilers', required=False, action="store_true")
parser.add_argument('-D', '--Debug', help='Debug mode with coloured output and more printed messages', required=False, action="store_true")
parser.add_argument('-m', '--md', nargs=2,
                    help='Specify two arguments: No. of MD processors and MD executable with all space seperated arguments in quotes', 
                    required=True)

parser.add_argument('-c', '--cfd', nargs=2,
                    help='Specify two arguments: No. of CFD processors and CFD executable with all space seperated arguments in quotes',
                    required=True)

args = vars(parser.parse_args())

if args["verbose"]:
    print("\n")
    print("============")
    print("Verbose Mode")
    print("============\n")
    print("\n")


nprocs_CFD, preexec_CFD, exec_CFD, args_CFD = split_procs_exec_args(args, 'cfd')
nprocs_MD, preexec_MD, exec_MD, args_MD = split_procs_exec_args(args, 'md')

#nprocs_CFD = args['cfd'][0]
#arg = args['cfd'][1].split(" ")
#exec_CFD = arg[0]
#if len(arg) > 1:
#    args_CFD = arg[1:]
#else:
#    args_CFD = []

#nprocs_MD = args['md'][0]
#arg = args['md'][1].split()
#exec_MD = arg[0]
#if len(arg) > 1:
#    args_MD = arg[1:]
#else:
#    args_MD = []

#print(nprocs_CFD, exec_CFD, args_CFD, nprocs_MD, exec_MD, args_MD)

#Create dict for run info
CFDDict = {"exec":exec_CFD, "nproces":nprocs_CFD, "args":args_CFD}
MDDict = {"exec":exec_MD, "nproces":nprocs_MD, "args":args_MD}
Dicts = {"MD":MDDict, "CFD":CFDDict}

for k in Dicts:
    d = Dicts[k]
    e = d["exec"]

    if "singularity" in preexec_MD or "singularity" in preexec_CFD:
        #Assume executables exist in container so no need to check
        pass
    else:
        #Check executables exist
        #If just executable specified (e.g. on path) then get full path
        if e.find("/") == -1:
            e = which(e)

        if not os.path.isfile(e):
            msg = "Executable " + e + " not found. "
            raise IOError(msg)

    #Check if python script of executable
    if ".py" in e:
        d["ispython"] = True
    else:
        d["ispython"] = False

    if d["ispython"]:
        try:
            from cplpy import CPL
            d["cpl_path"] = CPL._lib_path + "/" + CPL._libname +".so"
            if args["verbose"]:
                print("CPL path ", d["cpl_path"])
        except ImportError:
            print("CPL library not importable in Python, " +
                  "have you called source SOURCEME.sh in cpl-library")
            raise

        try:
            import mpi4py
            mpibinpath = mpi4py.get_config()["mpicc"]
            mpilibpath = "/" + mpibinpath.replace("/bin/mpicc", "/lib/libmpi.so")
            #libs = mpilibpath + "libmpi.so" #glob.glob(mpilibpath + "*mpi*")
            if not os.path.isfile(mpilibpath):
                msg = "libmpi.so not found under " + mpilibpath
                output = sp.check_output(mpibinpath + " -show", shell=True).decode("utf-8") 
                mpilibpath = output[output.find("-L")+2:].split()[0]
                if (mpilibpath == ""):
                    raise IOError(msg)
                else:
                    d["libs"] = {"libmpi.so":mpilibpath}
            else:
                d["libs"] = {"libmpi.so":mpilibpath}
        except ImportError:
            print("mpi4py import error, please check this is installed correctly")
        except IOError:
            d["libs"] = {"libmpi.so":"UNKNOWN"}
            pass
            #print("mpi libraries cannot be found")


    else:
        d["libs"] = get_libraries(e)
        for lib, lpath in d["libs"].items():
            if "libcpl.so" in lib.lower():
                d["cpl_path"] = os.path.normpath(lpath)

    try:
        d["cpl_path"]
    except KeyError:
        print("CPL library path not found, have you compiled you " +
              "executable correctly to include libcpl.so?")

#Compare versions of CPL
if Dicts["MD"]["cpl_path"] != Dicts["CFD"]["cpl_path"]:
    print("Warning -- different CPL linked into executables")
    if not args["permissive"]:
        sys.exit(1)
else:
    cpllib = get_libraries(Dicts["MD"]["cpl_path"])


#Check for MPI libraries for both cpl and executables are the same
for lib, lpath in cpllib.items():
    if "mpi" in lib:
        if args["verbose"]:
            print("CPL MPI libs", lib, lpath)
        CPL_mpi = os.path.realpath(lpath)

for lib, lpath in Dicts["CFD"]["libs"].items():
    if "mpi" in lib:
        if args["verbose"]:
            print("CFD MPI libs", lib, lpath)
        #CFD_mpi = os.path.normpath(lpath)
        #Replace fort or cxx in path so library version can be compared between languages
        Dicts["CFD"]["MPI"] = os.path.realpath(lpath).replace("fort","").replace("cxx","")


for lib, lpath in Dicts["MD"]["libs"].items():
    if "mpi" in lib:
        if args["verbose"]:
            print("MD MPI libs", lib, lpath)
        #MD_mpi = os.path.normpath(lpath)
        #Replace fort or cxx in path so library version can be compared between languages
        Dicts["MD"]["MPI"] = os.path.realpath(lpath).replace("fort","").replace("cxx","")

if (Dicts["MD"]["MPI"] != Dicts["CFD"]["MPI"]) or (CPL_mpi != Dicts["CFD"]["MPI"]):
    print("Warning -- different MPI linked into executables")
    print("MD MPI = ", Dicts["MD"]["MPI"], "CFD MPI=", Dicts["CFD"]["MPI"], "CPL MPI=", CPL_mpi)
    if not args["permissive"]:
        sys.exit(1)

mpilibs = get_libraries(CPL_mpi)

# Check fortran and c++ compilers are consistent 
# for mpi, cpl and executables
libs = [cpllib, mpilibs, Dicts["MD"]["libs"], Dicts["CFD"]["libs"]]
compilers = ["gcc", "gfortran", "stdc++"]
checkDict = {}
for lib in libs:
    for mlib, mlpath in lib.items():
        for c in compilers:
            if c in mlib:
                if c in checkDict:
                    #Use normpath to remove "."s and extra "/"s
                    if (os.path.normpath(checkDict[c]) != os.path.normpath(mlpath)):
                        print("Warning -- different version of ", c,
                              " linked into executables: ", checkDict[c], 
                              " not equal to ", mlpath)
                        if not args["permissive"]:
                            sys.exit(1)
                else:
                    checkDict[c] = mlpath

if args["verbose"]:
    print("Compilers : ", checkDict)

#Python scripts
for k in Dicts:
    d = Dicts[k]
    if d["ispython"]:
        d["exec"] = "python3 " + d["exec"]


#Remove previous port file
sp.Popen("rm -f ./port", shell=True)

cmdstr_MD = ["mpiexec", "-n", str(nprocs_MD)] + preexec_MD + [MDDict["exec"]] + MDDict["args"]
cmdstr_CFD = ["mpiexec", "-n", str(nprocs_CFD)] + preexec_CFD + [CFDDict["exec"]] + CFDDict["args"]

if args["MPMD"]:
    cmd_CPL = (' '.join(cmdstr_CFD) + 
               ' '.join(cmdstr_MD).replace("mpiexec", " : "))

    if args["verbose"]:
        print("CPL Commands to run ", cmd_CPL)

    p_CPL = sp.Popen(cmd_CPL, stderr=sp.PIPE, 
                     shell=True, bufsize=1)

    if p_CPL.poll():
        raise sp.CalledProcessError(p_CPL.poll(), ' '.join(cmd))
        sys.exit(1)
    else:
        if not args["permissive"]:
            check_for_error(p_CPL)

else:

    if args["verbose"]:
        print("MD Commands to run ", cmdstr_MD)
        print("CFD Commands to run ", cmdstr_CFD)

    # Create a processor group using preexec_fn=os.setsid
    # so they can be killed as one.
    p_CFD = sp.Popen(' '.join(cmdstr_CFD), stderr=sp.PIPE, 
                     shell=True, preexec_fn=os.setsid, bufsize=1)
    p_MD = sp.Popen(' '.join(cmdstr_MD), stderr=sp.PIPE, 
                    shell=True, preexec_fn=os.setsid, bufsize=1)

    #Register killer of subprocesses if python script killed 
    atexit.register(kill_sp, [os.getpgid(p_MD.pid), os.getpgid(p_CFD.pid)])

    #Endless loop polling to see if codes have failed and checking
    #output error streams for any hint of error
    while True:
        time.sleep(2.0)
        if args["verbose"]:
            print("POLL CFD = ", p_CFD.poll())
            print("POLL MD = ", p_MD.poll())

        if p_CFD.poll():
            c = p_CFD.communicate()
            print("Error code = ", p_CFD.poll(), c[0])
            for l in c[1].decode("utf-8").split("\n"):
                print(l)
            raise sp.CalledProcessError(p_CFD.poll(), ' '.join(cmdstr_CFD))
            sys.exit(1)
        else:
            if not args["permissive"]:
                check_for_error(p_CFD)

        if p_MD.poll():
            c = p_MD.communicate()
            print("Error code = ", p_MD.poll(), c[0])
            for l in c[1].decode("utf-8").split("\n"):
                print(l)
            raise sp.CalledProcessError(p_MD.poll(), ' '.join(cmdstr_MD))
            sys.exit(1)
        else:
            if not args["permissive"]:
                check_for_error(p_MD)


        if p_MD.poll() == 0 and p_CFD.poll() == 0:
            if args["verbose"]:
                print("cplexec Finished successfully")
            break


#Return successful exit code
sys.exit(0)

