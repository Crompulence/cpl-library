#! /bin/bash

# --------------------------------------------------------------------------
# Set the default values of all variables.
#
# Directory locations: Fixed for any cpl implementation.
# during make install?? 

if [ -z "$CPL_PATH" ] 
then
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    CPL_PATH=${DIR}/..
fi

prefix=${CPL_PATH}
CPL_VERSION=1.0

exec_prefix=${prefix}/bin
sysconfdir=${prefix}/etc
includedir=${prefix}/include/cpl
libdir=${prefix}/lib
modincdir=${prefix}/include/cpl

# Default settings for compiler, flags, and libraries
CXX="mpic++"


CCINC="-I"

enable_wrapper_rpath="yes"

# How to pass a linker flag through the compiler.
wl="-Wl,"

# Format of library name prefix.
libname_spec="lib\$name"

# Library names that the linker finds when passed -lNAME.
library_names_spec="\$libname\$shrext"

# Flag to hardcode $libdir into a binary during linking.
# This must work even if $libdir does not exist.
hardcode_libdir_flag_spec="\${wl}-rpath \${wl}\$libdir"

# Internal variables
# Show is set to echo to cause the compilation command to be echoed instead 
# of executed.
Show=

#
# End of initialization of variables

# Allow a profiling option to be selected through an environment variable
if [ -n "$CPLCXX_PROFILE" ] ; then
    profConf=$CPLCXX_PROFILE
fi
#
# ------------------------------------------------------------------------
# Argument processing.
# This is somewhat awkward because of the handling of arguments within
# the shell.  We want to handle arguments that include spaces without 
# loosing the spacing (an alternative would be to use a more powerful
# scripting language that would allow us to retain the array of values, 
# which the basic (rather than enhanced) Bourne shell does not.  
#
# Look through the arguments for arguments that indicate compile only.
# If these are *not* found, add the library options

linking=yes
allargs=("$@")
argno=0
interlib_deps=yes
for arg in "$@" ; do
    # Set addarg to no if this arg should be ignored by the C compiler
    addarg=yes
    case "$arg" in 
 	# ----------------------------------------------------------------
	# Compiler options that affect whether we are linking or no
    -c|-S|-E|-M|-MM)
    # The compiler links by default
    linking=no
    ;;
	# ----------------------------------------------------------------
	# Options that control how we use mpicxx (e.g., -show, 
	# -cxx=* -config=*
    -static)
    interlib_deps=no
    ;;
    -echo)
    addarg=no
    set -x
    ;;
    -cxx=*)
    CXX=`echo A$arg | sed -e 's/A-cxx=//g'`
    addarg=no
    ;;
    # Backwards compatibility for MPICH1 - scripts
    -CC=*)
    CXX=`echo A$arg | sed -e 's/A-CC=//g'`
    addarg=no
    ;;
    -show)
    addarg=no
    Show=echo
    ;;
    -config=*)
    addarg=no
    CXXname=`echo A$arg | sed -e 's/A-config=//g'`
    if [ -s "$sysconfdir/mpicxx-$CXXname.conf" ] ; then
        . "$sysconfdir/mpicxx-$CXXname.conf"
    else
	echo "Configuration file mpicxx-$CXXname.conf not found"
    fi
    ;;
    -compile-info|-compile_info)
    # -compile_info included for backward compatibility
    Show=echo
    addarg=no
    ;;
    -link-info|-link_info)
    # -link_info included for backward compatibility
    Show=echo
    addarg=no
    ;;
    -v)
    # Pass this argument to the compiler as well.
    echo "cplc++ for cpl-library version $CPL_VERSION"
    # if there is only 1 argument, it must be -v.
    if [ "$#" -eq "1" ] ; then
        linking=no
    fi
    ;;
    -profile=*)
    # Pass the name of a profiling configuration.  As
    # a special case, lib<name>.so or lib<name>.la may be used
    # if the library is in $libdir
    profConf=`echo A$arg | sed -e 's/A-profile=//g'`
    addarg=no
    # Loading the profConf file is handled below
    ;;
    -nativelinking)
    # Internal option to use native compiler for linking without MPI libraries
    nativelinking=yes
    addarg=no
    ;;
    -help)
    NC=`echo "$CXX" | sed 's%\/% %g' | awk '{print $NF}' -`
    if [ -f "$sysconfdir/mpixxx_opts.conf" ] ; then
        . $sysconfdir/mpixxx_opts.conf
        echo "    -cxx=xxx      - Reset the native compiler to xxx."
    else
        if [ -f "./mpixxx_opts.conf" ] ; then
            . ./mpixxx_opts.conf
            echo "    -cxx=xxx      - Reset the native compiler to xxx."
        fi
    fi
    exit 0
    ;;
    *)
    ;;

    esac
    if [ $addarg = no ] ; then
	unset allargs[$argno]
    fi
    # Some versions of bash do not accept ((argno++))
    argno=`expr $argno + 1`
done

if [ $# -eq 0 ] ; then
    echo "Error: Command line argument is needed!"
    "$0" -help
    exit 1
fi

# Construct the line to add the include directory (not all compilers 
# use -I, unfortunately)
if [ -z "${CCINC}" ] ; then
    # If there is no path, add a link to the cpl.h file.
    # There *must* be a way to provide the path the any modules (there
    # may be too many to link)
    if [ ! -r cpl.h ] ; then
        #echo "Adding a symbolic link for cpl.h"
	trap "$Show rm -f cpl.h" 0
	# This should really be the (related) f77includedir (see cpl77).
	$Show ln -s ${includedir}/mpif.h mpif.h
	# Remember to remove this file
	rmfiles="$rmfiles cpl.h"
    fi
    CCINCDIRS=
else
    # Normally, FCINC is just -I, but some compilers have used different
    # command line arguments
    CCINCDIRS=${CCINC}${includedir}
fi


# -----------------------------------------------------------------------
# Derived variables.  These are assembled from variables set from the
# default, environment, configuration file (if any) and command-line
# options (if any)
cxxlibs=
if [ "mpicxx" != "mpi" ] ; then
    cxxlibs="-lmpicxx"
fi

PROFILE_FOO=
# Handle the case of a profile switch
if [ -n "$profConf" ] ; then
    profConffile=
    if [ -s "$libdir/lib$profConf.a" -o -s "$libdir/lib$profConf.so" ] ; then
	PROFILE_FOO="-l$profConf"
    elif [ -s "$sysconfdir/$profConf.conf" ] ; then
	profConffile="$sysconfdir/$profConf.conf"
    elif [ -s "$profConf.conf" ] ; then
        profConffile="$profConf.conf"
    else
        echo "Profiling configuration file $profConf.conf not found in $sysconfdir"
    fi
    if [ -n "$profConffile" -a -s "$profConffile" ] ; then
	. $profConffile
    fi
fi

final_cxxflags=" "
final_cppflags=" "
final_ldflags=" "
final_libs=""
if test "yes" = "no" -o "${interlib_deps}" = "no" ; then
    final_ldflags="${final_ldflags} "
    final_libs="${final_libs} -lpthread   -lrt -lpthread "
fi

# A temporary statement to invoke the compiler
# Place the -L before any args incase there are any cpl libraries in there.
# Eventually, we'll want to move this after any non-MPI implementation 
# libraries
if [ "$linking" = yes ] ; then
    # Attempt to encode rpath info into the executable if the user has not
    # disabled rpath usage and some flavor of rpath makes sense on this
    # platform.
    # TODO configure and config.rpath are computing more sophisticated rpath
    # schemes than this simple one.  Consider updating this logic accordingly.
    if test "X$enable_wrapper_rpath" = "Xyes" ; then
        # prepend the path for the shared libraries to the library list
        eval rpath_flags=\"${hardcode_libdir_flag_spec}\"
    else
	rpath_flags=""
    fi

    if [ "$nativelinking" = yes ] ; then
        $Show $CXX ${final_cppflags} $PROFILE_INCPATHS ${final_cxxflags} ${final_ldflags} "${allargs[@]}" -I$includedir 
        rc=$?
    else
        $Show $CXX ${final_cppflags} $PROFILE_INCPATHS ${final_cxxflags} ${final_ldflags} $FCINCDIRS "${allargs[@]}" -I$includedir -L$libdir $cxxlibs $PROFILE_PRELIB $PROFILE_FOO -lmpi  $PROFILE_POSTLIB ${final_libs} $rpath_flags -lcpl
        rc=$?
    fi
else
    $Show $CXX ${final_cppflags} $PROFILE_INCPATHS ${final_cxxflags} "${allargs[@]}" $FCINCDIRS -I$includedir
    rc=$?
fi

exit $rc

