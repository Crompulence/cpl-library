
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Python Bindings &#8212; cpl-library 2.0 documentation</title><link rel="stylesheet" href="/styles.css"><link rel="shortcut icon" href="/cpl_logo.ico"> 
    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="_static/alabaster.css" />
    <link rel="stylesheet" href="_static/css/functions.css" type="text/css" />
    <script data-url_root="./" id="documentation_options" src="_static/documentation_options.js"></script>
    <script src="_static/jquery.js"></script>
    <script src="_static/underscore.js"></script>
    <script src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.shtml" />
    <link rel="search" title="Search" href="search.shtml" />
    <link rel="prev" title="Fortran Bindings" href="fortran_api.shtml" />
   
  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body><!--#include virtual="/nav.html"--><div class="center">
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <section id="python-bindings">
<h1>Python Bindings<a class="headerlink" href="#python-bindings" title="Permalink to this headline">¶</a></h1>
<dl class="py class">
<dt class="sig sig-object py" id="cplpy.CPL">
<em class="property"><span class="pre">class</span><span class="w"> </span></em><span class="sig-prename descclassname"><span class="pre">cplpy.</span></span><span class="sig-name descname"><span class="pre">CPL</span></span><a class="reference internal" href="_modules/cplpy.shtml#CPL"><span class="viewcode-link"><span class="pre">[source]</span></span></a><a class="headerlink" href="#cplpy.CPL" title="Permalink to this definition">¶</a></dt>
<dd><dl class="py method">
<dt class="sig sig-object py" id="cplpy.CPL.init">
<span class="sig-name descname"><span class="pre">init</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">calling_realm</span></span></em><span class="sig-paren">)</span><a class="reference internal" href="_modules/cplpy.shtml#CPL.init"><span class="viewcode-link"><span class="pre">[source]</span></span></a><a class="headerlink" href="#cplpy.CPL.init" title="Permalink to this definition">¶</a></dt>
<dd><p>(cfd+md) Splits MPI_COMM_WORLD in both the CFD and MD code respectively 
and create intercommunicator between CFD and MD</p>
<p><strong>Remarks</strong></p>
<p>Assumes MPI has been initialised <cite>MPI_init</cite> and communicator MPI_COMM_WORLD exists
and contains all processors in both CFD and MD regions</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">CPL</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="n">callingrealm</span><span class="p">)</span>    
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p><em>callingrealm</em></p>
<ul>
<li><p>Should identify calling processor as either CFD_REALM (integer with value 1) or MD_REALM (integer with value 2).</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Outputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>RETURNED_REALM_COMM</p>
<ul>
<li><p>Communicator based on callingrealm value local to CFD or MD processor and resulting from the split of MPI_COMM_WORLD</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Example</strong></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">mpi4py</span> <span class="k">import</span> <span class="n">MPI</span>
<span class="kn">from</span> <span class="nn">cplpy</span> <span class="k">import</span> <span class="n">CPL</span>

<span class="n">comm</span> <span class="o">=</span> <span class="n">MPI</span><span class="o">.</span><span class="n">COMM_WORLD</span>
<span class="n">CPL</span> <span class="o">=</span> <span class="n">CPL</span><span class="p">()</span>
<span class="n">MD_COMM</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="n">CPL</span><span class="o">.</span><span class="n">MD_REALM</span><span class="p">)</span>

<span class="n">nprocs</span> <span class="o">=</span> <span class="n">MD_COMM</span><span class="o">.</span><span class="n">Get_size</span><span class="p">()</span>
<span class="n">rank</span> <span class="o">=</span> <span class="n">MD_COMM</span><span class="o">.</span><span class="n">Get_rank</span><span class="p">()</span>

<span class="nb">print</span><span class="p">((</span><span class="s2">&quot;MD code processor &quot;</span><span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">rank</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; of &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">nprocs</span><span class="p">)))</span>

<span class="n">CPL</span><span class="o">.</span><span class="n">finalize</span><span class="p">()</span>
<span class="n">MPI</span><span class="o">.</span><span class="n">Finalize</span><span class="p">()</span>
</pre></div>
</div>
<p><strong>Errors</strong></p>
<blockquote>
<div><p>COUPLER_ERROR_REALM  = 1                    wrong realm value
COUPLER_ERROR_ONE_REALM = 2                 one realm missing
COUPLER_ERROR_INIT = 3         ! initialisation error</p>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cplpy.CPL.setup_cfd">
<span class="sig-name descname"><span class="pre">setup_cfd</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">icomm_grid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">xyzL</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">xyz_orig</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">ncxyz</span></span></em><span class="sig-paren">)</span><a class="reference internal" href="_modules/cplpy.shtml#CPL.setup_cfd"><span class="viewcode-link"><span class="pre">[source]</span></span></a><a class="headerlink" href="#cplpy.CPL.setup_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>Initialisation routine for coupler module - Every variable is sent and stored
to ensure both md and cfd region have an identical list of parameters</p>
<p><strong>Remarks</strong></p>
<p>Assumes CPL has been initialised <cite>CPL.init</cite> and communicator MD_REALM exists</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">CPL</span><span class="o">.</span><span class="n">setup_cfd</span><span class="p">(</span><span class="n">icomm_grid</span><span class="p">,</span> <span class="n">xyzL</span><span class="p">,</span> <span class="n">xyz_orig</span><span class="p">,</span> <span class="n">ncxyz</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p><em>icomm_grid</em></p>
<ul>
<li><p>Communicator based on CFD processor topology returned from a call to MPI_CART_CREATE.</p></li>
</ul>
</li>
<li><p><em>xyzL</em></p>
<ul>
<li><p>CFD domain size.</p></li>
</ul>
</li>
<li><p><em>xyz_orig</em></p>
<ul>
<li><p>CFD origin.</p></li>
</ul>
</li>
<li><p><em>ncxyz</em></p>
<ul>
<li><p>Number of CFD cells in global domain.</p></li>
</ul>
</li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cplpy.CPL.setup_md">
<span class="sig-name descname"><span class="pre">setup_md</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">icomm_grid</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">xyzL</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">xyz_orig</span></span></em><span class="sig-paren">)</span><a class="reference internal" href="_modules/cplpy.shtml#CPL.setup_md"><span class="viewcode-link"><span class="pre">[source]</span></span></a><a class="headerlink" href="#cplpy.CPL.setup_md" title="Permalink to this definition">¶</a></dt>
<dd><p>Initialisation routine for coupler module - Every variable is sent and stored
to ensure both md and cfd region have an identical list of parameters</p>
<p><strong>Remarks</strong></p>
<p>Assumes CPL has been initialised <cite>CPL.init</cite> and communicator MD_REALM exists</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">CPL</span><span class="o">.</span><span class="n">md_init</span><span class="p">(</span><span class="n">icomm_grid</span><span class="p">,</span> <span class="n">xyzL</span><span class="p">,</span> <span class="n">xyz_orig</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p><em>icomm_grid</em></p>
<ul>
<li><p>Communicator based on MD processor topology returned from a call to MPI_CART_CREATE.</p></li>
</ul>
</li>
<li><p><em>xyzL</em></p>
<ul>
<li><p>MD domain size.</p></li>
</ul>
</li>
<li><p><em>xyz_orig</em></p>
<ul>
<li><p>MD origin.</p></li>
</ul>
</li>
</ul>
</div></blockquote>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cplpy.CPL.proc_portion">
<span class="sig-name descname"><span class="pre">proc_portion</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">coord</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">realm</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limits</span></span></em><span class="sig-paren">)</span><a class="reference internal" href="_modules/cplpy.shtml#CPL.proc_portion"><span class="viewcode-link"><span class="pre">[source]</span></span></a><a class="headerlink" href="#cplpy.CPL.proc_portion" title="Permalink to this definition">¶</a></dt>
<dd><p>Get maximum and minimum cell indices, i.e. the ‘portion’, of the
input cell extents ‘limits’ that is contributed by the processor
specified by processor coord.</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#cplpy.CPL.init">CPL.init</a> and 
topological mapping has been setup using either <a class="reference external" href="#cplpy.CPL.setup_md">CPL.setup_md</a> 
or <a class="reference external" href="#cplpy.CPL.setup_cfd">CPL.setup_cfd</a> as appropriate.
- Note: limits(6) and portion(6) are of the form: (xmin,xmax,ymin,ymax,zmin,zmax)</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">cpl</span><span class="o">.</span><span class="n">proc_portion</span><span class="p">(</span><span class="n">coord</span><span class="p">,</span> <span class="n">realm</span><span class="p">,</span> <span class="n">limits</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<ul>
<li><p>coord</p>
<blockquote>
<div><ul class="simple">
<li><p>processor cartesian coordinate, list or numpy array of 3 integers</p></li>
</ul>
</div></blockquote>
</li>
<li><p>realm</p>
<blockquote>
<div><ul class="simple">
<li><p>cfd_realm (1) or md_realm (2) (integer)</p></li>
</ul>
</div></blockquote>
</li>
<li><p>limits</p>
<blockquote>
<div><ul class="simple">
<li><p>Array of cell extents that specify the input region, list or numpy array of 6 integers</p></li>
</ul>
</div></blockquote>
</li>
</ul>
<p><strong>Outputs</strong></p>
<ul class="simple">
<li><dl class="simple">
<dt>portion</dt><dd><ul>
<li><p>Array of cell extents that define the local processor’s
contribution to the input region ‘limits’, numpy array of 6 integers</p></li>
</ul>
</dd>
</dl>
</li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cplpy.CPL.my_proc_portion">
<span class="sig-name descname"><span class="pre">my_proc_portion</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">limits</span></span></em><span class="sig-paren">)</span><a class="reference internal" href="_modules/cplpy.shtml#CPL.my_proc_portion"><span class="viewcode-link"><span class="pre">[source]</span></span></a><a class="headerlink" href="#cplpy.CPL.my_proc_portion" title="Permalink to this definition">¶</a></dt>
<dd><p>Get maximum and minimum cell indices, i.e. the ‘portion’ on calling process.</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#cplpy.CPL.init">CPL.init</a> and 
topological mapping has been setup using either <a class="reference external" href="#cplpy.CPL.setup_md">CPL.setup_md</a> 
or <a class="reference external" href="#cplpy.CPL.setup_cfd">CPL.setup_cfd</a> as appropriate.
- Note: limits(6) and portion(6) are of the form: (xmin,xmax,ymin,ymax,zmin,zmax)</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">CPL</span><span class="o">.</span><span class="n">my_proc_portion</span><span class="p">(</span><span class="n">limits</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<ul>
<li><p>limits</p>
<blockquote>
<div><ul class="simple">
<li><p>Array of cell extents that specify the input region, list or numpy array of 6 integers</p></li>
</ul>
</div></blockquote>
</li>
</ul>
<p><strong>Outputs</strong></p>
<ul class="simple">
<li><dl class="simple">
<dt>portion</dt><dd><ul>
<li><p>Array of cell extents that define the local processor’s
contribution to the input region ‘limits’, numpy array of 6 integers</p></li>
</ul>
</dd>
</dl>
</li>
</ul>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cplpy.CPL.send">
<span class="sig-name descname"><span class="pre">send</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">asend</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limits</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span><a class="reference internal" href="_modules/cplpy.shtml#CPL.send"><span class="viewcode-link"><span class="pre">[source]</span></span></a><a class="headerlink" href="#cplpy.CPL.send" title="Permalink to this definition">¶</a></dt>
<dd><p>Send four dimensional array <em>asend</em> of data from all processors in the 
current realm with data between global cell array <em>limits</em> to the 
corresponding processors from the other realm.</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#cplpy.CPL.init">CPL.init</a> and 
topological mapping has been setup using either <a class="reference external" href="#cplpy.CPL.setup_md">CPL.setup_md</a> 
or <a class="reference external" href="#cplpy.CPL.setup_cfd">CPL.setup_cfd</a> as appropriate.</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">CPL</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">asend</span><span class="p">,</span> <span class="n">limits</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>    
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul>
<li><p>asend</p>
<ul class="simple">
<li><p>Array of data to send. Should be a four dimensional Numpy array allocated using the number of cells on the current processor between the limits. For example, if overlap limits are 8 cells, between cells 0 and 7 split over 2 procesors, the first processor will have from 0 to 3 and the second from 4 to 7. This should be be obtained from <a class="reference external" href="#cplpy.CPL.my_proc_portion">CPL.my_proc_portion(limits, portion)</a> to allocate a Numpy array, or allocated using the helper function <a class="reference external" href="#cplpy.CPL.get_arrays">CPL.get_arrays</a> with appropriate sizes.</p></li>
</ul>
<blockquote>
<div><p>.</p>
</div></blockquote>
</li>
<li><p>limits [Optional]</p>
<ul class="simple">
<li><p>Optional arguments limits specify if global limits of overlap region not used. These are in the global cell coordinates, and must match the corresponding recieve.</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Outputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>send_flag</p>
<ul>
<li><p>Returned flag which indicates success or failure of send process</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Example</strong></p>
<p>This example links with the <a class="reference external" href="#cplpy.CPL.recv">CPL.recv</a> examples</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">mpi4py</span> <span class="k">import</span> <span class="n">MPI</span>
<span class="kn">from</span> <span class="nn">cplpy</span> <span class="k">import</span> <span class="n">CPL</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>

<span class="n">comm</span> <span class="o">=</span> <span class="n">MPI</span><span class="o">.</span><span class="n">COMM_WORLD</span>
<span class="n">CPL</span> <span class="o">=</span> <span class="n">CPL</span><span class="p">()</span>
<span class="n">nsteps</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">dt</span> <span class="o">=</span> <span class="mf">0.2</span>
<span class="n">density</span> <span class="o">=</span> <span class="mf">0.8</span>

<span class="c1"># Parameters of the cpu topology (cartesian grid)</span>
<span class="n">NPx</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">NPy</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">NPz</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">NProcs</span> <span class="o">=</span> <span class="n">NPx</span><span class="o">*</span><span class="n">NPy</span><span class="o">*</span><span class="n">NPz</span>

<span class="c1"># Parameters of the mesh topology (cartesian grid)</span>
<span class="n">ncxyz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">64</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">64</span><span class="p">],</span> <span class="n">order</span><span class="o">=</span><span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">int32</span><span class="p">)</span>
<span class="n">xyzL</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">10.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">],</span> <span class="n">order</span><span class="o">=</span><span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float64</span><span class="p">)</span>
<span class="n">xyz_orig</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span> <span class="n">order</span><span class="o">=</span><span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float64</span><span class="p">)</span>

<span class="c1"># Create communicators and check that number of processors is consistent</span>
<span class="n">CFD_COMM</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="n">CPL</span><span class="o">.</span><span class="n">CFD_REALM</span><span class="p">)</span>
<span class="n">nprocs_realm</span> <span class="o">=</span> <span class="n">CFD_COMM</span><span class="o">.</span><span class="n">Get_size</span><span class="p">()</span>

<span class="k">if</span> <span class="p">(</span><span class="n">nprocs_realm</span> <span class="o">!=</span> <span class="n">NProcs</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;ERROR: Non-coherent number of processors.&quot;</span><span class="p">)</span>
    <span class="n">comm</span><span class="o">.</span><span class="n">Abort</span><span class="p">(</span><span class="n">errorcode</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">cart_comm</span> <span class="o">=</span> <span class="n">CFD_COMM</span><span class="o">.</span><span class="n">Create_cart</span><span class="p">([</span><span class="n">NPx</span><span class="p">,</span> <span class="n">NPy</span><span class="p">,</span> <span class="n">NPz</span><span class="p">])</span>
<span class="n">CPL</span><span class="o">.</span><span class="n">setup_cfd</span><span class="p">(</span><span class="n">cart_comm</span><span class="p">,</span> <span class="n">xyzL</span><span class="p">,</span> <span class="n">xyz_orig</span><span class="p">,</span> <span class="n">ncxyz</span><span class="p">)</span>

<span class="n">cart_rank</span> <span class="o">=</span> <span class="n">cart_comm</span><span class="o">.</span><span class="n">Get_rank</span><span class="p">()</span>
<span class="n">olap_limits</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">get_olap_limits</span><span class="p">()</span>
<span class="n">portion</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">my_proc_portion</span><span class="p">(</span><span class="n">olap_limits</span><span class="p">)</span>
<span class="p">[</span><span class="n">ncxl</span><span class="p">,</span> <span class="n">ncyl</span><span class="p">,</span> <span class="n">nczl</span><span class="p">]</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">get_no_cells</span><span class="p">(</span><span class="n">portion</span><span class="p">)</span>
<span class="n">send_array</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="n">ncxl</span><span class="p">,</span> <span class="n">ncyl</span><span class="p">,</span> <span class="n">nczl</span><span class="p">),</span> <span class="n">order</span><span class="o">=</span><span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float64</span><span class="p">)</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ncxl</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ncyl</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">nczl</span><span class="p">):</span>
            <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">portion</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">jj</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">portion</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
            <span class="n">kk</span> <span class="o">=</span> <span class="n">k</span> <span class="o">+</span> <span class="n">portion</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>

            <span class="n">send_array</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">ii</span>
            <span class="n">send_array</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">jj</span>
            <span class="n">send_array</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">kk</span>

<span class="n">ierr</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">send_array</span><span class="p">,</span> <span class="n">olap_limits</span><span class="p">)</span>

<span class="n">MPI</span><span class="o">.</span><span class="n">COMM_WORLD</span><span class="o">.</span><span class="n">Barrier</span><span class="p">()</span>

<span class="n">CFD_COMM</span><span class="o">.</span><span class="n">Free</span><span class="p">()</span>
<span class="n">cart_comm</span><span class="o">.</span><span class="n">Free</span><span class="p">()</span>

<span class="n">CPL</span><span class="o">.</span><span class="n">finalize</span><span class="p">()</span>
<span class="n">MPI</span><span class="o">.</span><span class="n">Finalize</span><span class="p">()</span>
</pre></div>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cplpy.CPL.recv">
<span class="sig-name descname"><span class="pre">recv</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">arecv</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">limits</span></span><span class="o"><span class="pre">=</span></span><span class="default_value"><span class="pre">None</span></span></em><span class="sig-paren">)</span><a class="reference internal" href="_modules/cplpy.shtml#CPL.recv"><span class="viewcode-link"><span class="pre">[source]</span></span></a><a class="headerlink" href="#cplpy.CPL.recv" title="Permalink to this definition">¶</a></dt>
<dd><p>Receive data from to local grid from the associated ranks from the other realm</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#cplpy.CPL.init">CPL.init</a> and 
topological mapping has been setup using either <a class="reference external" href="#cplpy.CPL.setup_md">CPL.setup_md</a> 
or <a class="reference external" href="#cplpy.CPL.setup_cfd">CPL.setup_cfd</a> as appropriate.</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-python notranslate"><div class="highlight"><pre><span></span><span class="n">CPL</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">arecv</span><span class="p">,</span> <span class="n">limits</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>    
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>arecv</p>
<ul>
<li><p>Array of data to recv. Should be a four dimensional Numpy array allocated using the number of cells on the current processor between the limits. For example, if overlap limits are 8 cells, between cells 0 and 7 split over 2 procesors, the first processor will have from 0 to 3 and the second from 4 to 7. This should be be obtained from <a class="reference external" href="#cplpy.CPL.my_proc_portion">CPL.my_proc_portion(limits, portion)</a> to allocate a Numpy array, or allocated using the helper function <a class="reference external" href="#cplpy.CPL.get_arrays">CPL.get_arrays</a> with appropriate sizes.</p></li>
</ul>
</li>
<li><p>limits [Optional]</p>
<ul>
<li><p>Limits in global cell coordinates, must be the same as corresponding send command.</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Outputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>recv_flag</p>
<ul>
<li><p>Returned flag which indicates success or failure of recv process</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Example</strong></p>
<p>This example links with the <a class="reference external" href="#cplpy.CPL.send">CPL.send</a> examples</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>
<span class="kn">from</span> <span class="nn">mpi4py</span> <span class="k">import</span> <span class="n">MPI</span>
<span class="kn">from</span> <span class="nn">cplpy</span> <span class="k">import</span> <span class="n">CPL</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="nn">np</span>


<span class="k">def</span> <span class="nf">read_input</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>

    <span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">content</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">i</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;!&quot;</span><span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;!&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;!&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
            <span class="n">dic</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
    <span class="k">return</span> <span class="n">dic</span>

<span class="n">comm</span> <span class="o">=</span> <span class="n">MPI</span><span class="o">.</span><span class="n">COMM_WORLD</span>
<span class="c1">#comm.Barrier()</span>
<span class="n">CPL</span> <span class="o">=</span> <span class="n">CPL</span><span class="p">()</span>

<span class="c1"># Parameters of the cpu topology (cartesian grid)</span>
<span class="n">dt</span> <span class="o">=</span> <span class="mf">0.1</span>
<span class="n">NPx</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">NPy</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">NPz</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">NProcs</span> <span class="o">=</span> <span class="n">NPx</span><span class="o">*</span><span class="n">NPy</span><span class="o">*</span><span class="n">NPz</span>
<span class="n">npxyz</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="n">NPx</span><span class="p">,</span> <span class="n">NPy</span><span class="p">,</span> <span class="n">NPz</span><span class="p">],</span> <span class="n">order</span><span class="o">=</span><span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">int32</span><span class="p">)</span>

<span class="c1"># Domain topology</span>
<span class="n">xyzL</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">10.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">],</span> <span class="n">order</span><span class="o">=</span><span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float64</span><span class="p">)</span>
<span class="n">xyz_orig</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span> <span class="n">order</span><span class="o">=</span><span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float64</span><span class="p">)</span>

<span class="c1"># Create communicators and check that number of processors is consistent</span>
<span class="n">MD_COMM</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="n">CPL</span><span class="o">.</span><span class="n">MD_REALM</span><span class="p">)</span>
<span class="n">nprocs_realm</span> <span class="o">=</span> <span class="n">MD_COMM</span><span class="o">.</span><span class="n">Get_size</span><span class="p">()</span>

<span class="k">if</span> <span class="p">(</span><span class="n">nprocs_realm</span> <span class="o">!=</span> <span class="n">NProcs</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;Non-coherent number of processes&quot;</span><span class="p">)</span>
    <span class="n">comm</span><span class="o">.</span><span class="n">Abort</span><span class="p">(</span><span class="n">errorcode</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">cart_comm</span> <span class="o">=</span> <span class="n">MD_COMM</span><span class="o">.</span><span class="n">Create_cart</span><span class="p">([</span><span class="n">NPx</span><span class="p">,</span> <span class="n">NPy</span><span class="p">,</span> <span class="n">NPz</span><span class="p">])</span>

<span class="n">CPL</span><span class="o">.</span><span class="n">setup_md</span><span class="p">(</span><span class="n">cart_comm</span><span class="p">,</span> <span class="n">xyzL</span><span class="p">,</span> <span class="n">xyz_orig</span><span class="p">)</span>

<span class="c1"># recv test</span>
<span class="n">olap_limits</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">get_olap_limits</span><span class="p">()</span>
<span class="n">portion</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">my_proc_portion</span><span class="p">(</span><span class="n">olap_limits</span><span class="p">)</span>
<span class="p">[</span><span class="n">ncxl</span><span class="p">,</span> <span class="n">ncyl</span><span class="p">,</span> <span class="n">nczl</span><span class="p">]</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">get_no_cells</span><span class="p">(</span><span class="n">portion</span><span class="p">)</span>

<span class="n">recv_array</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="n">ncxl</span><span class="p">,</span> <span class="n">ncyl</span><span class="p">,</span> <span class="n">nczl</span><span class="p">),</span> <span class="n">order</span><span class="o">=</span><span class="s1">&#39;F&#39;</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="o">.</span><span class="n">float64</span><span class="p">)</span>
<span class="n">recv_array</span><span class="p">,</span> <span class="n">ierr</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">recv_array</span><span class="p">,</span> <span class="n">olap_limits</span><span class="p">)</span>

<span class="n">no_error</span> <span class="o">=</span> <span class="kc">True</span>
<span class="k">if</span> <span class="n">CPL</span><span class="o">.</span><span class="n">overlap</span><span class="p">():</span>
    <span class="n">rank</span> <span class="o">=</span> <span class="n">MD_COMM</span><span class="o">.</span><span class="n">Get_rank</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ncxl</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ncyl</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">nczl</span><span class="p">):</span>
                <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">portion</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
                <span class="n">jj</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">portion</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
                <span class="n">kk</span> <span class="o">=</span> <span class="n">k</span> <span class="o">+</span> <span class="n">portion</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
                <span class="k">if</span> <span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">ii</span><span class="p">)</span> <span class="o">-</span> <span class="n">recv_array</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mf">1e-8</span><span class="p">:</span>
                    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;ERROR -- portion in x: </span><span class="si">%d</span><span class="s2"> </span><span class="si">%d</span><span class="s2"> &quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">portion</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                          <span class="n">portion</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="s2">&quot; MD rank: </span><span class="si">%d</span><span class="s2"> &quot;</span> <span class="o">%</span> <span class="n">rank</span> <span class="o">+</span>
                          <span class="s2">&quot; cell id: </span><span class="si">%d</span><span class="s2"> &quot;</span> <span class="o">%</span> <span class="n">ii</span> <span class="o">+</span> <span class="s2">&quot; recv_array: </span><span class="si">%f</span><span class="s2">&quot;</span> <span class="o">%</span>
                          <span class="n">recv_array</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">])</span>
                    <span class="n">no_error</span> <span class="o">=</span> <span class="kc">False</span>

                <span class="k">if</span> <span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">jj</span><span class="p">)</span> <span class="o">-</span> <span class="n">recv_array</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mf">1e-8</span><span class="p">:</span>
                    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;ERROR -- portion in y: </span><span class="si">%d</span><span class="s2"> </span><span class="si">%d</span><span class="s2"> &quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">portion</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
                          <span class="n">portion</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">+</span> <span class="s2">&quot; MD rank: </span><span class="si">%d</span><span class="s2"> &quot;</span> <span class="o">%</span> <span class="n">rank</span> <span class="o">+</span>
                          <span class="s2">&quot; cell id: </span><span class="si">%d</span><span class="s2"> &quot;</span> <span class="o">%</span> <span class="n">jj</span> <span class="o">+</span> <span class="s2">&quot; recv_array: </span><span class="si">%f</span><span class="s2">&quot;</span> <span class="o">%</span>
                          <span class="n">recv_array</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">])</span>
                    <span class="n">no_error</span> <span class="o">=</span> <span class="kc">False</span>

                <span class="k">if</span> <span class="p">(</span><span class="nb">float</span><span class="p">(</span><span class="n">kk</span><span class="p">)</span> <span class="o">-</span> <span class="n">recv_array</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mf">1e-8</span><span class="p">:</span>
                    <span class="nb">print</span><span class="p">(</span><span class="s2">&quot;ERROR -- portion in z: </span><span class="si">%d</span><span class="s2"> </span><span class="si">%d</span><span class="s2"> &quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">portion</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span>
                          <span class="n">portion</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span> <span class="o">+</span> <span class="s2">&quot; MD rank: </span><span class="si">%d</span><span class="s2"> &quot;</span> <span class="o">%</span> <span class="n">rank</span> <span class="o">+</span>
                          <span class="s2">&quot; cell id: </span><span class="si">%d</span><span class="s2"> &quot;</span> <span class="o">%</span> <span class="n">kk</span> <span class="o">+</span> <span class="s2">&quot; recv_array: </span><span class="si">%f</span><span class="s2">&quot;</span> <span class="o">%</span>
                          <span class="n">recv_array</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">])</span>
                    <span class="n">no_error</span> <span class="o">=</span> <span class="kc">False</span>


<span class="n">MD_COMM</span><span class="o">.</span><span class="n">Barrier</span><span class="p">()</span>
<span class="k">if</span> <span class="n">CPL</span><span class="o">.</span><span class="n">overlap</span><span class="p">()</span> <span class="ow">and</span> <span class="n">no_error</span><span class="p">:</span>
    <span class="nb">print</span> <span class="p">(</span><span class="s2">&quot;MD -- &quot;</span> <span class="o">+</span> <span class="s2">&quot;(rank=</span><span class="si">{:2d}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">rank</span><span class="p">)</span> <span class="o">+</span>
           <span class="s2">&quot;) CELLS HAVE BEEN RECEIVED CORRECTLY.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="n">MPI</span><span class="o">.</span><span class="n">COMM_WORLD</span><span class="o">.</span><span class="n">Barrier</span><span class="p">()</span>

<span class="c1">#Free comms and finalise</span>
<span class="n">MD_COMM</span><span class="o">.</span><span class="n">Free</span><span class="p">()</span>
<span class="n">cart_comm</span><span class="o">.</span><span class="n">Free</span><span class="p">()</span>

<span class="n">CPL</span><span class="o">.</span><span class="n">finalize</span><span class="p">()</span>
<span class="n">MPI</span><span class="o">.</span><span class="n">Finalize</span><span class="p">()</span>
</pre></div>
</div>
</dd></dl>

<dl class="py method">
<dt class="sig sig-object py" id="cplpy.CPL.get_arrays">
<span class="sig-name descname"><span class="pre">get_arrays</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="n"><span class="pre">recv_size</span></span></em>, <em class="sig-param"><span class="n"><span class="pre">send_size</span></span></em><span class="sig-paren">)</span><a class="reference internal" href="_modules/cplpy.shtml#CPL.get_arrays"><span class="viewcode-link"><span class="pre">[source]</span></span></a><a class="headerlink" href="#cplpy.CPL.get_arrays" title="Permalink to this definition">¶</a></dt>
<dd><p>Return recv array and send array based
on constraint/boundary sizes</p>
<p><strong>Example</strong></p>
<blockquote>
<div><p>A minimal example is possible using CPL.get_arrays, which shows paired sending and recv commands</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="ch">#!/usr/bin/env python</span>
<span class="kn">from</span> <span class="nn">mpi4py</span> <span class="k">import</span> <span class="n">MPI</span>
<span class="kn">from</span> <span class="nn">cplpy</span> <span class="k">import</span> <span class="n">CPL</span>

<span class="n">comm</span> <span class="o">=</span> <span class="n">MPI</span><span class="o">.</span><span class="n">COMM_WORLD</span>
<span class="n">CPL</span> <span class="o">=</span> <span class="n">CPL</span><span class="p">()</span>

<span class="n">MD_COMM</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="n">CPL</span><span class="o">.</span><span class="n">MD_REALM</span><span class="p">)</span>

<span class="n">CPL</span><span class="o">.</span><span class="n">setup_md</span><span class="p">(</span><span class="n">MD_COMM</span><span class="o">.</span><span class="n">Create_cart</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span> <span class="n">xyzL</span><span class="o">=</span><span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span> 
             <span class="n">xyz_orig</span><span class="o">=</span><span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">])</span>

<span class="n">recv_array</span><span class="p">,</span> <span class="n">send_array</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">get_arrays</span><span class="p">(</span><span class="n">recv_size</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">send_size</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
<span class="k">for</span> <span class="n">time</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>

    <span class="n">send_array</span><span class="p">[</span><span class="mi">0</span><span class="p">,:,:,:]</span> <span class="o">=</span> <span class="mf">5.</span><span class="o">*</span><span class="n">time</span>
    <span class="n">CPL</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">send_array</span><span class="p">)</span>
    <span class="n">recv_array</span><span class="p">,</span> <span class="n">ierr</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">recv_array</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">((</span><span class="s2">&quot;MD&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">recv_array</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]))</span>

<span class="n">CPL</span><span class="o">.</span><span class="n">finalize</span><span class="p">()</span>
<span class="n">MPI</span><span class="o">.</span><span class="n">Finalize</span><span class="p">()</span>


</pre></div>
</div>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="ch">#!/usr/bin/env python</span>
<span class="kn">from</span> <span class="nn">mpi4py</span> <span class="k">import</span> <span class="n">MPI</span>
<span class="kn">from</span> <span class="nn">cplpy</span> <span class="k">import</span> <span class="n">CPL</span>

<span class="n">comm</span> <span class="o">=</span> <span class="n">MPI</span><span class="o">.</span><span class="n">COMM_WORLD</span>
<span class="n">CPL</span> <span class="o">=</span> <span class="n">CPL</span><span class="p">()</span>
<span class="n">CFD_COMM</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">init</span><span class="p">(</span><span class="n">CPL</span><span class="o">.</span><span class="n">CFD_REALM</span><span class="p">)</span>
<span class="n">CPL</span><span class="o">.</span><span class="n">setup_cfd</span><span class="p">(</span><span class="n">CFD_COMM</span><span class="o">.</span><span class="n">Create_cart</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]),</span> <span class="n">xyzL</span><span class="o">=</span><span class="p">[</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span> 
              <span class="n">xyz_orig</span><span class="o">=</span><span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">],</span> <span class="n">ncxyz</span><span class="o">=</span><span class="p">[</span><span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">])</span>
<span class="n">recv_array</span><span class="p">,</span> <span class="n">send_array</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">get_arrays</span><span class="p">(</span><span class="n">recv_size</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">send_size</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="k">for</span> <span class="n">time</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>

    <span class="n">recv_array</span><span class="p">,</span> <span class="n">ierr</span> <span class="o">=</span> <span class="n">CPL</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">recv_array</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">((</span><span class="s2">&quot;CFD&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">recv_array</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]))</span>
    <span class="n">send_array</span><span class="p">[</span><span class="mi">0</span><span class="p">,:,:,:]</span> <span class="o">=</span> <span class="mf">2.</span><span class="o">*</span><span class="n">time</span>
    <span class="n">CPL</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">send_array</span><span class="p">)</span>


<span class="n">CPL</span><span class="o">.</span><span class="n">finalize</span><span class="p">()</span>
<span class="n">MPI</span><span class="o">.</span><span class="n">Finalize</span><span class="p">()</span>
</pre></div>
</div>
</div></blockquote>
</dd></dl>

</dd></dl>

</section>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h1 class="logo"><a href="index.shtml">cpl-library</a></h1>








<h3>Navigation</h3>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="cpp_api.shtml">C++ Bindings</a></li>
<li class="toctree-l1"><a class="reference internal" href="fortran_api.shtml">Fortran Bindings</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Python Bindings</a></li>
</ul>

<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="index.shtml">Documentation overview</a><ul>
      <li>Previous: <a href="fortran_api.shtml" title="previous chapter">Fortran Bindings</a></li>
  </ul></li>
</ul>
</div>
<div id="searchbox" style="display: none" role="search">
  <h3 id="searchlabel">Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="search.shtml" method="get">
      <input type="text" name="q" aria-labelledby="searchlabel" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"/>
      <input type="submit" value="Go" />
    </form>
    </div>
</div>
<script>$('#searchbox').show(0);</script>








        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2022, Ed Smith.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 4.5.0</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="_sources/python_api.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </div></body>
</html>