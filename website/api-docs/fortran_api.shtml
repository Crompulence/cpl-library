
<!DOCTYPE html>

<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />

    <title>Fortran Bindings &#8212; cpl-library 2.0 documentation</title><link rel="stylesheet" href="/styles.css"><link rel="shortcut icon" href="/cpl_logo.ico"> 
    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="_static/alabaster.css" />
    <link rel="stylesheet" href="_static/css/functions.css" type="text/css" />
    <script data-url_root="./" id="documentation_options" src="_static/documentation_options.js"></script>
    <script src="_static/jquery.js"></script>
    <script src="_static/underscore.js"></script>
    <script src="_static/doctools.js"></script>
    <link rel="index" title="Index" href="genindex.shtml" />
    <link rel="search" title="Search" href="search.shtml" />
    <link rel="next" title="Python Bindings" href="python_api.shtml" />
    <link rel="prev" title="C++ Bindings" href="cpp_api.shtml" />
   
  <link rel="stylesheet" href="_static/custom.css" type="text/css" />
  
  
  <meta name="viewport" content="width=device-width, initial-scale=0.9, maximum-scale=0.9" />

  </head><body><div class="center"><!--#include virtual="/nav.html"-->
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <section id="fortran-bindings">
<h1>Fortran Bindings<a class="headerlink" href="#fortran-bindings" title="Permalink to this headline">¶</a></h1>
<section id="main-functions">
<h2>Main Functions<a class="headerlink" href="#main-functions" title="Permalink to this headline">¶</a></h2>
<p>In general usage, the aim of CPL library is to provide a minimal set of functions
to facilitate coupling. These include an initialisation, setup used on both CFD
and MD side then a send and recieve command.
There is also a helper function to provide</p>
<section id="cpl-init">
<h3>CPL init<a class="headerlink" href="#cpl-init" title="Permalink to this headline">¶</a></h3>
<dl>
<dt class="sig sig-object f" id="f/_/cpl_init">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-name descname"><span class="pre">cpl_init</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">callingrealm</span></em>, <em class="sig-param"><span class="pre">returned_realm_comm</span></em>, <em class="sig-param"><span class="pre">ierror</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/_/cpl_init" title="Permalink to this definition">¶</a></dt>
<dd><p>(cfd+md) Splits MPI_COMM_WORLD in both the CFD and MD code respectively
and create intercommunicator between CFD and MD</p>
<p><strong>Remarks</strong></p>
<p>Assumes MPI has been initialised <cite>MPI_init</cite> and communicator MPI_COMM_WORLD exists
and contains all processors in both CFD and MD regions</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_init</span><span class="p">(</span><span class="n">callingrealm</span><span class="p">,</span> <span class="n">RETURNED_REALM_COMM</span><span class="p">,</span> <span class="n">ierror</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<ul class="simple">
<li><p>callingrealm</p>
<ul>
<li><p>Should identify calling processor as either CFD_REALM (integer with value 1) or MD_REALM (integer with value 2).</p></li>
</ul>
</li>
</ul>
<p><strong>Outputs</strong></p>
<ul class="simple">
<li><p>RETURNED_REALM_COMM</p>
<ul>
<li><p>Communicator based on callingrealm value local to CFD or MD processor and resulting from the split of MPI_COMM_WORLD</p></li>
</ul>
</li>
<li><p>ierror</p>
<ul>
<li><p>Error flag</p></li>
</ul>
</li>
</ul>
<p><strong>Example</strong></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>program main_CFD
   use cpl, only : CPL_init, CPL_finalize
   use mpi
   implicit none

   integer :: rank, nprocs, ierr
   integer :: CFD_COMM
   integer, parameter :: CFD_realm=1

   !Initialise MPI
   call MPI_Init(ierr)

   !Create MD Comm by spliting world
   call CPL_init(CFD_realm, CFD_COMM, ierr)

   !get local processor rank and print
   call MPI_comm_size(CFD_COMM, nprocs, ierr)
   call MPI_comm_rank(CFD_COMM, rank, ierr)

   print*, &quot;CFD code processor &quot;, rank+1, &quot; of &quot;, nprocs

   !No need for seperate CPL finalise as MPI finalise takes care of this
   call CPL_finalize(ierr)
   call MPI_comm_free(CFD_COMM,ierr)
   call MPI_finalize(ierr)

end program main_CFD
</pre></div>
</div>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>program main_MD
   use cpl, only : CPL_init, CPL_finalize
   use mpi
   implicit none

   integer :: rank, nprocs, ierr
   integer :: MD_COMM
   integer, parameter :: MD_realm=2

   !Initialise MPI
   call MPI_Init(ierr)

   !Create MD Comm by spliting world
   call CPL_init(MD_realm, MD_COMM, ierr)

   call MPI_comm_size(MD_COMM, nprocs, ierr)
   call MPI_comm_rank(MD_COMM, rank, ierr)

   print*, &quot;MD code processor &quot;, rank+1, &quot; of &quot;, nprocs

   !No need for seperate CPL finalise as MPI finalise takes care of this
   call CPL_finalize(ierr)
   call MPI_comm_free(MD_COMM,ierr)
   call MPI_finalize(ierr)

end program main_MD


</pre></div>
</div>
<p><strong>Errors</strong></p>
<blockquote>
<div><p>COUPLER_ERROR_REALM  = 1       ! wrong realm value
COUPLER_ERROR_ONE_REALM = 2    ! one realm missing
COUPLER_ERROR_INIT = 3         ! initialisation error</p>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>callingrealm</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: CFD_REALM=1 or MD_REALM=2</p></li>
<li><p><strong>returned_realm_comm</strong><em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
<li><p><strong>ierror</strong><em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
</dl>
</dd></dl>

</section>
<section id="cpl-setup-md">
<h3>CPL Setup MD<a class="headerlink" href="#cpl-setup-md" title="Permalink to this headline">¶</a></h3>
<dl>
<dt class="sig sig-object f" id="f/_/cpl_setup_md">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-name descname"><span class="pre">cpl_setup_md</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">icomm_grid</span></em>, <em class="sig-param"><span class="pre">xyzl</span></em>, <em class="sig-param"><span class="pre">xyz_orig</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/_/cpl_setup_md" title="Permalink to this definition">¶</a></dt>
<dd><p>Initialisation routine for coupler module - Every variable is sent and stored
to ensure both md and cfd region have an identical list of parameters</p>
<p><strong>Remarks</strong></p>
<p>Assumes CPL has been initialised <cite>CPL_init</cite> and communicator MD_REALM exists</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">cpl_setup_md</span><span class="p">(</span><span class="n">icomm_grid</span><span class="p">,</span> <span class="n">xyzL</span><span class="p">,</span> <span class="n">xyz_orig</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>icomm_grid</p>
<ul>
<li><p>Communicator based on MD processor topology returned from a call to MPI_CART_CREATE.</p></li>
</ul>
</li>
<li><p>xyzL</p>
<ul>
<li><p>MD domain size.</p></li>
</ul>
</li>
<li><p>xyz_orig</p>
<ul>
<li><p>MD origin.</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>icomm_grid</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xyzl</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xyz_orig</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module/coupler_md_init" title="f/coupler_module/coupler_md_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_md_init()</span></code></a></p>
</dd>
</dl>
</dd></dl>

</section>
<section id="cpl-setup-cfd">
<h3>CPL Setup CFD<a class="headerlink" href="#cpl-setup-cfd" title="Permalink to this headline">¶</a></h3>
<dl>
<dt class="sig sig-object f" id="f/_/cpl_setup_cfd">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-name descname"><span class="pre">cpl_setup_cfd</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">icomm_grid</span></em>, <em class="sig-param"><span class="pre">xyzl</span></em>, <em class="sig-param"><span class="pre">xyz_orig</span></em>, <em class="sig-param"><span class="pre">ncxyz</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/_/cpl_setup_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>Initialisation routine for coupler module - Every variable is sent and stored
to ensure both md and cfd region have an identical list of parameters</p>
<p><strong>Remarks</strong></p>
<p>Assumes CPL has been initialised <cite>CPL_init</cite> and communicator MD_REALM exists
<strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_setup_cfd</span><span class="p">(</span><span class="n">icomm_grid</span><span class="p">,</span> <span class="n">xyzL</span><span class="p">,</span> <span class="n">xyz_orig</span><span class="p">,</span> <span class="n">ncxyz</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<ul class="simple">
<li><p>icomm_grid</p>
<ul>
<li><p>Communicator based on CFD processor topology returned from a call to MPI_CART_CREATE.</p></li>
</ul>
</li>
<li><p>xyzL</p>
<ul>
<li><p>CFD domain size.</p></li>
</ul>
</li>
<li><p>xyz_orig</p>
<ul>
<li><p>CFD origin.</p></li>
</ul>
</li>
<li><p>ncxyz</p>
<ul>
<li><p>Number of CFD cells in global domain.</p></li>
</ul>
</li>
</ul>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>icomm_grid</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xyzl</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xyz_orig</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>ncxyz</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module/coupler_cfd_init" title="f/coupler_module/coupler_cfd_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_cfd_init()</span></code></a></p>
</dd>
</dl>
</dd></dl>

</section>
<section id="cpl-recv">
<h3>CPL Recv<a class="headerlink" href="#cpl-recv" title="Permalink to this headline">¶</a></h3>
<p>Note two interfaces exist, CPL_recv_full and CPL_recv_min</p>
<dl>
<dt class="sig sig-object f" id="f/_/cpl_recv_full">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-name descname"><span class="pre">cpl_recv_full</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">arecv</span></em>, <em class="sig-param"><span class="pre">limits</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">recv_flag</span></em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#f/_/cpl_recv_full" title="Permalink to this definition">¶</a></dt>
<dd><p>Receive data from to local grid from the associated ranks from the other
realm</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_recv</span><span class="p">(</span><span class="n">arecv</span><span class="p">,</span> <span class="n">limits</span><span class="p">,</span> <span class="n">recv_flag</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<ul class="simple">
<li><p>arecv</p>
<ul>
<li><p>Array of data to recv. Should be a four dimensional array allocated using the number of cells on the current processor between the limits. Size should be be obtained from <a class="reference external" href="#f/coupler/cpl_my_proc_portion">CPL_my_proc_portion(limits, portion)</a>.</p></li>
</ul>
</li>
<li><p>limits</p>
<ul>
<li><p>Limits in global cell coordinates, must be the same as corresponding send</p></li>
</ul>
</li>
</ul>
<p><strong>Outputs</strong></p>
<ul class="simple">
<li><p>recv_flag</p>
<ul>
<li><p>Returned flag which indicates success or failure of recv process</p></li>
</ul>
</li>
</ul>
<p><strong>Example</strong></p>
<div class="highlight-guess notranslate"><div class="highlight"><pre><span></span>call CPL_get_olap_limits(limits)
call CPL_my_proc_portion(limits, portion)
call CPL_get_no_cells(portion, Ncells)

!Coupled Recieve
allocate(A(3, Ncells(1), Ncells(2), Ncells(3)))
call CPL_recv(A, limits, recv_flag)
</pre></div>
</div>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>arecv</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>inout</em><em>]</em> :: Pre allocated array that recieves data</p></li>
<li><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: Global cell indices with minimum and maximum values to recv</p></li>
<li><p><strong>recv_flag</strong><em> [</em><em>logical</em><em>,</em><em>out,</em><em>]</em> :: Flag set if processor has received data</p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code>, <a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_graph" title="f/coupler_module/rank_graph"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_graph()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>, <a class="reference internal" href="#f/coupler_module/cpl_graph_comm" title="f/coupler_module/cpl_graph_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_graph_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/myid_graph" title="f/coupler_module/myid_graph"><code class="xref f f-func docutils literal notranslate"><span class="pre">myid_graph()</span></code></a>, <a class="reference internal" href="#f/coupler_module/olap_mask" title="f/coupler_module/olap_mask"><code class="xref f f-func docutils literal notranslate"><span class="pre">olap_mask()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world" title="f/coupler_module/rank_world"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_world()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm" title="f/coupler_module/realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm_name" title="f/coupler_module/realm_name"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm_name()</span></code></a>, <a class="reference internal" href="#f/coupler_module/iblock_realm" title="f/coupler_module/iblock_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">iblock_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jblock_realm" title="f/coupler_module/jblock_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">jblock_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kblock_realm" title="f/coupler_module/kblock_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">kblock_realm()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">void()</span></code>, <a class="reference internal" href="#f/coupler_module/ierr" title="f/coupler_module/ierr"><code class="xref f f-func docutils literal notranslate"><span class="pre">ierr()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_intersect" title="f/coupler_module/rank_intersect"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_intersect()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_realm_intersection_comm" title="f/coupler_module/cpl_realm_intersection_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_realm_intersection_comm()</span></code></a>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_recv_min" title="f/coupler/cpl_recv_min"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_recv_min()</span></code></a></p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_cart_coords" title="f/coupler/cpl_cart_coords"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cart_coords()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_proc_portion" title="f/coupler/cpl_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_proc_portion()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_my_proc_portion" title="f/coupler/cpl_my_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_my_proc_portion()</span></code></a></p>
</dd>
</dl>
</dd></dl>

</section>
<section id="cpl-send">
<h3>CPL Send<a class="headerlink" href="#cpl-send" title="Permalink to this headline">¶</a></h3>
<p>Note two interfaces exist, CPL_send_full and CPL_send_min</p>
<dl>
<dt class="sig sig-object f" id="f/_/cpl_send_full">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-name descname"><span class="pre">cpl_send_full</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">asend</span></em>, <em class="sig-param"><span class="pre">limits</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">send_flag</span></em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#f/_/cpl_send_full" title="Permalink to this definition">¶</a></dt>
<dd><p>Send four dimensional array <em>asend</em> of data from all processors in the
current realm with data between global cell array <em>limits</em> to the
corresponding processors from the other realm.</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_send</span><span class="p">(</span><span class="n">asend</span><span class="p">,</span> <span class="n">limits</span><span class="p">,</span> <span class="n">send_flag</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>asend</p>
<ul>
<li><p>Array of data to send. Should be a four dimensional array allocated using the number of cells on the current processor between the limits. Size should be be obtained from <a class="reference external" href="#f/coupler/cpl_my_proc_portion">CPL_my_proc_portion(limits, portion)</a>.</p></li>
</ul>
</li>
<li><p>limits</p>
<ul>
<li><p>Limits in global cell coordinates, must be the same as corresponding recieve</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Outputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>send_flag</p>
<ul>
<li><p>Returned flag which indicates success or failure of send process</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Example</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span> <span class="k">call </span><span class="n">CPL_get_olap_limits</span><span class="p">(</span><span class="n">limits</span><span class="p">)</span>
 <span class="k">call </span><span class="n">CPL_my_proc_portion</span><span class="p">(</span><span class="n">limits</span><span class="p">,</span> <span class="n">portion</span><span class="p">)</span>
 <span class="k">call </span><span class="n">CPL_get_no_cells</span><span class="p">(</span><span class="n">portion</span><span class="p">,</span> <span class="n">Ncells</span><span class="p">)</span>

 <span class="c">!Coupled Send array</span>
 <span class="k">allocate</span><span class="p">(</span><span class="n">A</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">Ncells</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">Ncells</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">Ncells</span><span class="p">(</span><span class="mi">3</span><span class="p">)))</span>

 <span class="k">do </span><span class="n">i</span> <span class="o">=</span><span class="n">portion</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="n">portion</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
 <span class="k">do </span><span class="n">j</span> <span class="o">=</span><span class="n">portion</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span><span class="n">portion</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
 <span class="k">do </span><span class="n">k</span> <span class="o">=</span><span class="n">portion</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span><span class="n">portion</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
    <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="n">portion</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">jj</span> <span class="o">=</span> <span class="n">j</span><span class="o">-</span><span class="n">portion</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">kk</span> <span class="o">=</span> <span class="n">k</span><span class="o">-</span><span class="n">portion</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
    <span class="n">A</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">ii</span><span class="p">,</span><span class="n">jj</span><span class="p">,</span><span class="n">kk</span><span class="p">)</span> <span class="o">=</span> <span class="nb">dble</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">A</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">ii</span><span class="p">,</span><span class="n">jj</span><span class="p">,</span><span class="n">kk</span><span class="p">)</span> <span class="o">=</span> <span class="nb">dble</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
    <span class="n">A</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="n">ii</span><span class="p">,</span><span class="n">jj</span><span class="p">,</span><span class="n">kk</span><span class="p">)</span> <span class="o">=</span> <span class="nb">dble</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
 <span class="n">enddo</span>
 <span class="n">enddo</span>
 <span class="n">enddo</span>
 <span class="k">call </span><span class="n">CPL_send</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">limits</span><span class="p">,</span> <span class="n">send_flag</span><span class="p">)</span>

<span class="p">..</span> <span class="n">sectionauthor</span><span class="kd">::</span><span class="n">Edward</span> <span class="n">Smith</span>
<span class="o">----------------------------------------------------------------------------</span>
</pre></div>
</div>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>asend</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em> :: Array containing data to send</p></li>
<li><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: Global cell indices with minimum and maximum values to send</p></li>
<li><p><strong>send_flag</strong><em> [</em><em>logical</em><em>,</em><em>out,</em><em>]</em> :: Flag set if processor has passed data</p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code>, <a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>, <a class="reference internal" href="#f/coupler_module/cpl_graph_comm" title="f/coupler_module/cpl_graph_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_graph_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/myid_graph" title="f/coupler_module/myid_graph"><code class="xref f f-func docutils literal notranslate"><span class="pre">myid_graph()</span></code></a>, <a class="reference internal" href="#f/coupler_module/olap_mask" title="f/coupler_module/olap_mask"><code class="xref f f-func docutils literal notranslate"><span class="pre">olap_mask()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world" title="f/coupler_module/rank_world"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_world()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm" title="f/coupler_module/realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/ierr" title="f/coupler_module/ierr"><code class="xref f f-func docutils literal notranslate"><span class="pre">ierr()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">void()</span></code>, <a class="reference internal" href="#f/coupler_module/cpl_setup_complete" title="f/coupler_module/cpl_setup_complete"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_setup_complete()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm_name" title="f/coupler_module/realm_name"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm_name()</span></code></a>, <a class="reference internal" href="#f/coupler_module/myid_realm" title="f/coupler_module/myid_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">myid_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rootid_realm" title="f/coupler_module/rootid_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">rootid_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_intersect" title="f/coupler_module/rank_intersect"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_intersect()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_realm_intersection_comm" title="f/coupler_module/cpl_realm_intersection_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_realm_intersection_comm()</span></code></a>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_send_min" title="f/coupler/cpl_send_min"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_send_min()</span></code></a></p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_my_proc_portion" title="f/coupler/cpl_my_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_my_proc_portion()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_cart_coords" title="f/coupler/cpl_cart_coords"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cart_coords()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_proc_portion" title="f/coupler/cpl_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_proc_portion()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_no_cells" title="f/coupler/cpl_get_no_cells"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_no_cells()</span></code></a></p>
</dd>
</dl>
</dd></dl>

</section>
<section id="cpl-get-arrays">
<h3>CPL Get Arrays<a class="headerlink" href="#cpl-get-arrays" title="Permalink to this headline">¶</a></h3>
<dl>
<dt class="sig sig-object f" id="f/_/cpl_get_arrays">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-name descname"><span class="pre">cpl_get_arrays</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">recv_array</span></em>, <em class="sig-param"><span class="pre">recv_size</span></em>, <em class="sig-param"><span class="pre">send_array</span></em>, <em class="sig-param"><span class="pre">send_size</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/_/cpl_get_arrays" title="Permalink to this definition">¶</a></dt>
<dd><p>A helper function to get arrays of the required size for cells local to
the current processor</p>
<p><strong>Example</strong></p>
<p>The first example shows the CFD side of the exchange, with send/recv arrays
obtained from CPL_get_arrays</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>
<span class="n">program</span> <span class="n">main_CFD</span>
    <span class="n">use</span> <span class="n">cpl</span><span class="p">,</span> <span class="n">only</span> <span class="p">:</span> <span class="n">CPL_Init</span><span class="p">,</span> <span class="n">CPL_setup_cfd</span><span class="p">,</span> <span class="n">CPL_send</span><span class="p">,</span> <span class="o">&amp;</span>
                    <span class="n">CPL_recv</span><span class="p">,</span> <span class="n">CPL_get_arrays</span><span class="p">,</span> <span class="n">CPL_finalize</span>
    <span class="n">use</span> <span class="n">mpi</span>
    <span class="n">implicit</span> <span class="n">none</span>

    <span class="n">integer</span> <span class="p">::</span> <span class="n">time</span><span class="p">,</span> <span class="n">CFD_COMM</span><span class="p">,</span> <span class="n">CART_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">,</span> <span class="n">CFD_realm</span><span class="o">=</span><span class="mi">1</span>
    <span class="n">double</span> <span class="n">precision</span><span class="p">,</span> <span class="n">dimension</span><span class="p">(:,:,:,:),</span> <span class="o">&amp;</span> 
         <span class="n">allocatable</span>  <span class="p">::</span> <span class="n">send_array</span><span class="p">,</span> <span class="n">recv_array</span>

    <span class="n">call</span> <span class="n">MPI_Init</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">CPL_init</span><span class="p">(</span><span class="n">CFD_realm</span><span class="p">,</span> <span class="n">CFD_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">MPI_Cart_create</span><span class="p">(</span><span class="n">CFD_COMM</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="p">),</span> <span class="o">&amp;</span> 
                        <span class="p">(</span><span class="o">/.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span><span class="o">.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span><span class="o">.</span><span class="n">true</span><span class="o">./</span><span class="p">),</span> <span class="o">&amp;</span> 
                         <span class="o">.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span> <span class="n">CART_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">CPL_setup_cfd</span><span class="p">(</span><span class="n">CART_COMM</span><span class="p">,</span> <span class="p">(</span><span class="o">/</span><span class="mf">1.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">1.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">1.</span><span class="n">d0</span><span class="o">/</span><span class="p">),</span> <span class="o">&amp;</span>
                       <span class="p">(</span><span class="o">/</span><span class="mf">0.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">0.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">0.</span><span class="n">d0</span><span class="o">/</span><span class="p">),</span> <span class="o">&amp;</span>
                       <span class="p">(</span><span class="o">/</span><span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="o">/</span><span class="p">))</span>

    <span class="n">call</span> <span class="n">CPL_get_arrays</span><span class="p">(</span><span class="n">recv_array</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">send_array</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

    <span class="n">do</span> <span class="n">time</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span>
        <span class="n">call</span> <span class="n">CPL_recv</span><span class="p">(</span><span class="n">recv_array</span><span class="p">)</span>
        <span class="nb">print</span><span class="o">*</span><span class="p">,</span> <span class="s2">&quot;CFD&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">recv_array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">send_array</span><span class="p">(</span><span class="mi">1</span><span class="p">,:,:,:)</span> <span class="o">=</span> <span class="mf">2.</span><span class="o">*</span><span class="n">time</span>
        <span class="n">call</span> <span class="n">CPL_send</span><span class="p">(</span><span class="n">send_array</span><span class="p">)</span>
    <span class="n">enddo</span>

   <span class="n">call</span> <span class="n">CPL_finalize</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>
   <span class="n">call</span> <span class="n">MPI_comm_free</span><span class="p">(</span><span class="n">CFD_COMM</span><span class="p">,</span><span class="n">ierr</span><span class="p">)</span>
   <span class="n">call</span> <span class="n">MPI_finalize</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>

<span class="n">end</span> <span class="n">program</span> <span class="n">main_CFD</span>
</pre></div>
</div>
<p>The corresponding MD code which matches this, note CPL_get_arrays send and recv
arrays are swapped over (as send from CFD in recv on MD and vice versa)</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>
<span class="n">program</span> <span class="n">main_MD</span>
    <span class="n">use</span> <span class="n">cpl</span><span class="p">,</span> <span class="n">only</span> <span class="p">:</span> <span class="n">CPL_Init</span><span class="p">,</span> <span class="n">CPL_setup_md</span><span class="p">,</span> <span class="n">CPL_send</span><span class="p">,</span> <span class="o">&amp;</span>
                    <span class="n">CPL_recv</span><span class="p">,</span> <span class="n">CPL_get_arrays</span><span class="p">,</span> <span class="n">CPL_finalize</span>
    <span class="n">use</span> <span class="n">mpi</span>
    <span class="n">implicit</span> <span class="n">none</span>

    <span class="n">integer</span> <span class="p">::</span> <span class="n">time</span><span class="p">,</span> <span class="n">MD_COMM</span><span class="p">,</span> <span class="n">CART_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">,</span> <span class="n">MD_realm</span><span class="o">=</span><span class="mi">2</span>
    <span class="n">double</span> <span class="n">precision</span><span class="p">,</span> <span class="n">dimension</span><span class="p">(:,:,:,:),</span> <span class="o">&amp;</span> 
         <span class="n">allocatable</span>  <span class="p">::</span> <span class="n">send_array</span><span class="p">,</span> <span class="n">recv_array</span>

    <span class="n">call</span> <span class="n">MPI_Init</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">CPL_init</span><span class="p">(</span><span class="n">MD_realm</span><span class="p">,</span> <span class="n">MD_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">MPI_Cart_create</span><span class="p">(</span><span class="n">MD_COMM</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="p">),</span> <span class="o">&amp;</span> 
                        <span class="p">(</span><span class="o">/.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span><span class="o">.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span><span class="o">.</span><span class="n">true</span><span class="o">./</span><span class="p">),</span> <span class="o">&amp;</span> 
                         <span class="o">.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span> <span class="n">CART_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">CPL_setup_md</span><span class="p">(</span><span class="n">CART_COMM</span><span class="p">,</span> <span class="p">(</span><span class="o">/</span><span class="mf">1.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">1.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">1.</span><span class="n">d0</span><span class="o">/</span><span class="p">),</span> <span class="o">&amp;</span>
                       <span class="p">(</span><span class="o">/</span><span class="mf">0.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">0.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">0.</span><span class="n">d0</span><span class="o">/</span><span class="p">))</span>

    <span class="n">call</span> <span class="n">CPL_get_arrays</span><span class="p">(</span><span class="n">recv_array</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">send_array</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>

    <span class="n">do</span> <span class="n">time</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span>
        <span class="n">send_array</span><span class="p">(</span><span class="mi">1</span><span class="p">,:,:,:)</span> <span class="o">=</span> <span class="mf">5.</span><span class="o">*</span><span class="n">time</span>
        <span class="n">call</span> <span class="n">CPL_send</span><span class="p">(</span><span class="n">send_array</span><span class="p">)</span>
        <span class="n">call</span> <span class="n">CPL_recv</span><span class="p">(</span><span class="n">recv_array</span><span class="p">)</span>
        <span class="nb">print</span><span class="o">*</span><span class="p">,</span> <span class="s2">&quot;MD&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">recv_array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">enddo</span>

   <span class="n">call</span> <span class="n">CPL_finalize</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>
   <span class="n">call</span> <span class="n">MPI_comm_free</span><span class="p">(</span><span class="n">MD_COMM</span><span class="p">,</span><span class="n">ierr</span><span class="p">)</span>
   <span class="n">call</span> <span class="n">MPI_finalize</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>

<span class="n">end</span> <span class="n">program</span> <span class="n">main_MD</span>
</pre></div>
</div>
<p>These are then both run together, either MPMD or port connect modes</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>precision</strong><em> [</em><em>double</em><em>]</em></p></li>
<li><p><strong>recv_size</strong><em> [</em><em>integer</em><em>]</em></p></li>
<li><p><strong>precision</strong></p></li>
<li><p><strong>send_size</strong><em> [</em><em>integer</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_get_olap_limits" title="f/coupler/cpl_get_olap_limits"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_olap_limits()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_my_proc_portion" title="f/coupler/cpl_my_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_my_proc_portion()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_no_cells" title="f/coupler/cpl_get_no_cells"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_no_cells()</span></code></a></p>
</dd>
</dl>
</dd></dl>

</section>
</section>
<section id="full-listing">
<h2>Full Listing<a class="headerlink" href="#full-listing" title="Permalink to this headline">¶</a></h2>
<p>The complete list of module functions is included here.</p>
<section id="coupler-module">
<h3>Coupler Module<a class="headerlink" href="#coupler-module" title="Permalink to this headline">¶</a></h3>
<p>Contains all the setup subroutines and variables
for a coupled run</p>
<span class="target" id="f/coupler_module"></span><p class="rubric">Description</p>
<p>The <strong>COUPLER MODULE</strong>
A single coupler module for both codes - this contains the same information
on both md and cfd side and all variables. A fundamental design philosophy
of CPL library is to ensure both codes have access to all topology and
processor information (without needed to call costly global routines).
This module contains all the variables, which define the mappings between
processors, a hierachy of MPI communicators and all the subroutines to
set them up. These variables include:</p>
<blockquote>
<div><blockquote>
<div><ul class="simple">
<li><p>MPI communicators</p></li>
<li><p>Simulation realms</p></li>
<li><p>MPI processor IDs</p></li>
<li><p>Processor topologies</p></li>
<li><p>Processor cartesian coords</p></li>
<li><p>Global cell grid parameters</p></li>
<li><p>Processor cell ranges</p></li>
<li><p>Domain and cell dimensions</p></li>
<li><p>Positions of CFD grid lines</p></li>
<li><p>CFD to MD processor mapping</p></li>
<li><p>Simulation parameters</p></li>
<li><p>Error handling</p></li>
</ul>
</div></blockquote>
<p>The data in this module is protected so only setup routines in this module can change it</p>
</div></blockquote>
<div class="highlight-guess notranslate"><div class="highlight"><pre><span></span>________/\\\\\\\\\__/\\\\\\\\\\\\\____/\\\_____________
 _____/\\\////////__\/\\\/////////\\\_\/\\\_____________
  ___/\\\/___________\/\\\_______\/\\\_\/\\\_____________
   __/\\\_____________\/\\\\\\\\\\\\\/__\/\\\_____________
    _\/\\\_____________\/\\\/////////____\/\\\_____________
     _\//\\\____________\/\\\_____________\/\\\_____________
      __\///\\\__________\/\\\_____________\/\\\_____________
       ____\////\\\\\\\\\_\/\\\_____________\/\\\\\\\\\\\\\\\_
        _______\/////////__\///______________\///////////////__


                     C P L  -  L I B R A R Y

       Copyright (C) 2012-2022 Edward Smith
</pre></div>
</div>
<p><strong>Author(s)</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>Edward Smith Novemeber 2011 to present</p></li>
<li><p>Eduardo Ramos Fernandez 2015 to 2018</p></li>
<li><p>David Trevelyan September 2012 to December 2015</p></li>
<li><p>Lucian Anton, November 2011</p></li>
</ul>
<blockquote>
<div></div></blockquote>
</div></blockquote>
<p>Setup routines which have access to coupler parameters</p>
<blockquote>
<div><ul class="simple">
<li><dl class="simple">
<dt>CPL_create_comm          (cfd+md)   splits MPI_COMM_WORLD, create inter -</dt><dd><p>communicator between CFD and MD</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>CPL_create_map           (cfd+md)   creates correspondence maps between</dt><dd><p>the CFD grid and MD domains</p>
</dd>
</dl>
</li>
<li><dl class="simple">
<dt>CPL_cfd_adjust_domain     (cfd)     adjust CFD tomain to an integer number</dt><dd><p>FCC or similar MD initial layout</p>
</dd>
</dl>
</li>
</ul>
</div></blockquote>
<p>Also see <a class="reference external" href="fortran_api.shtml#coupler-methods-module">coupler</a> which contains all
routines to exchange information</p>
<p><strong>License</strong></p>
<blockquote>
<div><blockquote>
<div><p>This file is part of CPL-Library.</p>
<p>CPL-Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>CPL-Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with CPL-Library.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;.</p>
</div></blockquote>
</div></blockquote>
<hr class="docutils" />
<p class="rubric">Quick access</p>
<dl class="field-list simple">
<dt class="field-odd">Variables</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module/average_period" title="f/coupler_module/average_period"><code class="xref f f-var docutils literal notranslate"><span class="pre">average_period</span></code></a>, <a class="reference internal" href="#f/coupler_module/boundary_algo" title="f/coupler_module/boundary_algo"><code class="xref f f-var docutils literal notranslate"><span class="pre">boundary_algo</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_icoord2olap_md_icoords" title="f/coupler_module/cfd_icoord2olap_md_icoords"><code class="xref f f-var docutils literal notranslate"><span class="pre">cfd_icoord2olap_md_icoords</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_jcoord2olap_md_jcoords" title="f/coupler_module/cfd_jcoord2olap_md_jcoords"><code class="xref f f-var docutils literal notranslate"><span class="pre">cfd_jcoord2olap_md_jcoords</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_kcoord2olap_md_kcoords" title="f/coupler_module/cfd_kcoord2olap_md_kcoords"><code class="xref f f-var docutils literal notranslate"><span class="pre">cfd_kcoord2olap_md_kcoords</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">cfd_realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfdid_olap" title="f/coupler_module/cfdid_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">cfdid_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/comm_style" title="f/coupler_module/comm_style"><code class="xref f f-var docutils literal notranslate"><span class="pre">comm_style</span></code></a>, <a class="reference internal" href="#f/coupler_module/comm_style_gath_scat" title="f/coupler_module/comm_style_gath_scat"><code class="xref f f-var docutils literal notranslate"><span class="pre">comm_style_gath_scat</span></code></a>, <a class="reference internal" href="#f/coupler_module/comm_style_send_recv" title="f/coupler_module/comm_style_send_recv"><code class="xref f f-var docutils literal notranslate"><span class="pre">comm_style_send_recv</span></code></a>, <a class="reference internal" href="#f/coupler_module/constraint_algo" title="f/coupler_module/constraint_algo"><code class="xref f f-var docutils literal notranslate"><span class="pre">constraint_algo</span></code></a>, <a class="reference internal" href="#f/coupler_module/constraint_cv" title="f/coupler_module/constraint_cv"><code class="xref f f-var docutils literal notranslate"><span class="pre">constraint_cv</span></code></a>, <a class="reference internal" href="#f/coupler_module/constraint_cvflag" title="f/coupler_module/constraint_cvflag"><code class="xref f f-var docutils literal notranslate"><span class="pre">constraint_cvflag</span></code></a>, <a class="reference internal" href="#f/coupler_module/constraint_flekkoy" title="f/coupler_module/constraint_flekkoy"><code class="xref f f-var docutils literal notranslate"><span class="pre">constraint_flekkoy</span></code></a>, <a class="reference internal" href="#f/coupler_module/constraint_ncer" title="f/coupler_module/constraint_ncer"><code class="xref f f-var docutils literal notranslate"><span class="pre">constraint_ncer</span></code></a>, <a class="reference internal" href="#f/coupler_module/constraint_off" title="f/coupler_module/constraint_off"><code class="xref f f-var docutils literal notranslate"><span class="pre">constraint_off</span></code></a>, <a class="reference internal" href="#f/coupler_module/constraint_ot" title="f/coupler_module/constraint_ot"><code class="xref f f-var docutils literal notranslate"><span class="pre">constraint_ot</span></code></a>, <a class="reference internal" href="#f/coupler_module/coord2rank_cfd" title="f/coupler_module/coord2rank_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">coord2rank_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/coord2rank_md" title="f/coupler_module/coord2rank_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">coord2rank_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_abort_on_request" title="f/coupler_module/coupler_abort_on_request"><code class="xref f f-var docutils literal notranslate"><span class="pre">coupler_abort_on_request</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_abort_send_cfd" title="f/coupler_module/coupler_abort_send_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">coupler_abort_send_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_error_cart_comm" title="f/coupler_module/coupler_error_cart_comm"><code class="xref f f-var docutils literal notranslate"><span class="pre">coupler_error_cart_comm</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_error_continuum_force" title="f/coupler_module/coupler_error_continuum_force"><code class="xref f f-var docutils literal notranslate"><span class="pre">coupler_error_continuum_force</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_error_init" title="f/coupler_module/coupler_error_init"><code class="xref f f-var docutils literal notranslate"><span class="pre">coupler_error_init</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_error_input_file" title="f/coupler_module/coupler_error_input_file"><code class="xref f f-var docutils literal notranslate"><span class="pre">coupler_error_input_file</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_error_one_realm" title="f/coupler_module/coupler_error_one_realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">coupler_error_one_realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_error_read_input" title="f/coupler_module/coupler_error_read_input"><code class="xref f f-var docutils literal notranslate"><span class="pre">coupler_error_read_input</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_error_realm" title="f/coupler_module/coupler_error_realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">coupler_error_realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_error_setup_incomplete" title="f/coupler_module/coupler_error_setup_incomplete"><code class="xref f f-var docutils literal notranslate"><span class="pre">coupler_error_setup_incomplete</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_cart_comm" title="f/coupler_module/cpl_cart_comm"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_cart_comm</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_cfd_bc_slice" title="f/coupler_module/cpl_cfd_bc_slice"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_cfd_bc_slice</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_cfd_bc_x" title="f/coupler_module/cpl_cfd_bc_x"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_cfd_bc_x</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_cfd_bc_y" title="f/coupler_module/cpl_cfd_bc_y"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_cfd_bc_y</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_cfd_bc_z" title="f/coupler_module/cpl_cfd_bc_z"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_cfd_bc_z</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_full_overlap" title="f/coupler_module/cpl_full_overlap"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_full_overlap</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_graph_comm" title="f/coupler_module/cpl_graph_comm"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_graph_comm</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_initialised" title="f/coupler_module/cpl_initialised"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_initialised</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_inter_comm" title="f/coupler_module/cpl_inter_comm"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_inter_comm</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_md_bc_slice" title="f/coupler_module/cpl_md_bc_slice"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_md_bc_slice</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_olap_comm" title="f/coupler_module/cpl_olap_comm"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_olap_comm</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_realm_comm" title="f/coupler_module/cpl_realm_comm"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_realm_comm</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_realm_intersection_comm" title="f/coupler_module/cpl_realm_intersection_comm"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_realm_intersection_comm</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_realm_olap_comm" title="f/coupler_module/cpl_realm_olap_comm"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_realm_olap_comm</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_setup_complete" title="f/coupler_module/cpl_setup_complete"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_setup_complete</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_world_comm" title="f/coupler_module/cpl_world_comm"><code class="xref f f-var docutils literal notranslate"><span class="pre">cpl_world_comm</span></code></a>, <a class="reference internal" href="#f/coupler_module/density_cfd" title="f/coupler_module/density_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">density_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/density_md" title="f/coupler_module/density_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">density_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/dt_cfd" title="f/coupler_module/dt_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">dt_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/dt_md" title="f/coupler_module/dt_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">dt_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/dx" title="f/coupler_module/dx"><code class="xref f f-var docutils literal notranslate"><span class="pre">dx</span></code></a>, <a class="reference internal" href="#f/coupler_module/dy" title="f/coupler_module/dy"><code class="xref f f-var docutils literal notranslate"><span class="pre">dy</span></code></a>, <a class="reference internal" href="#f/coupler_module/dymax" title="f/coupler_module/dymax"><code class="xref f f-var docutils literal notranslate"><span class="pre">dymax</span></code></a>, <a class="reference internal" href="#f/coupler_module/dymin" title="f/coupler_module/dymin"><code class="xref f f-var docutils literal notranslate"><span class="pre">dymin</span></code></a>, <a class="reference internal" href="#f/coupler_module/dz" title="f/coupler_module/dz"><code class="xref f f-var docutils literal notranslate"><span class="pre">dz</span></code></a>, <a class="reference internal" href="#f/coupler_module/iblock_realm" title="f/coupler_module/iblock_realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">iblock_realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmax" title="f/coupler_module/icmax"><code class="xref f f-var docutils literal notranslate"><span class="pre">icmax</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmax_bnry" title="f/coupler_module/icmax_bnry"><code class="xref f f-var docutils literal notranslate"><span class="pre">icmax_bnry</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmax_cnst" title="f/coupler_module/icmax_cnst"><code class="xref f f-var docutils literal notranslate"><span class="pre">icmax_cnst</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmax_olap" title="f/coupler_module/icmax_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">icmax_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmin" title="f/coupler_module/icmin"><code class="xref f f-var docutils literal notranslate"><span class="pre">icmin</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmin_bnry" title="f/coupler_module/icmin_bnry"><code class="xref f f-var docutils literal notranslate"><span class="pre">icmin_bnry</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmin_cnst" title="f/coupler_module/icmin_cnst"><code class="xref f f-var docutils literal notranslate"><span class="pre">icmin_cnst</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmin_olap" title="f/coupler_module/icmin_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">icmin_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmax_cfd" title="f/coupler_module/icpmax_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">icpmax_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmax_md" title="f/coupler_module/icpmax_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">icpmax_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmin_cfd" title="f/coupler_module/icpmin_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">icpmin_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmin_md" title="f/coupler_module/icpmin_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">icpmin_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/jblock_realm" title="f/coupler_module/jblock_realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">jblock_realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmax" title="f/coupler_module/jcmax"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcmax</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmax_bnry" title="f/coupler_module/jcmax_bnry"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcmax_bnry</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmax_cnst" title="f/coupler_module/jcmax_cnst"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcmax_cnst</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmax_olap" title="f/coupler_module/jcmax_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcmax_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmin" title="f/coupler_module/jcmin"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcmin</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmin_bnry" title="f/coupler_module/jcmin_bnry"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcmin_bnry</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmin_cnst" title="f/coupler_module/jcmin_cnst"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcmin_cnst</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmin_olap" title="f/coupler_module/jcmin_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcmin_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmax_cfd" title="f/coupler_module/jcpmax_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcpmax_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmax_md" title="f/coupler_module/jcpmax_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcpmax_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmin_cfd" title="f/coupler_module/jcpmin_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcpmin_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmin_md" title="f/coupler_module/jcpmin_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">jcpmin_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/kblock_realm" title="f/coupler_module/kblock_realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">kblock_realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmax" title="f/coupler_module/kcmax"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcmax</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmax_bnry" title="f/coupler_module/kcmax_bnry"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcmax_bnry</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmax_cnst" title="f/coupler_module/kcmax_cnst"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcmax_cnst</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmax_olap" title="f/coupler_module/kcmax_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcmax_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmin" title="f/coupler_module/kcmin"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcmin</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmin_bnry" title="f/coupler_module/kcmin_bnry"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcmin_bnry</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmin_cnst" title="f/coupler_module/kcmin_cnst"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcmin_cnst</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmin_olap" title="f/coupler_module/kcmin_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcmin_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmax_cfd" title="f/coupler_module/kcpmax_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcpmax_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmax_md" title="f/coupler_module/kcpmax_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcpmax_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmin_cfd" title="f/coupler_module/kcpmin_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcpmin_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmin_md" title="f/coupler_module/kcpmin_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">kcpmin_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/maxgridsize" title="f/coupler_module/maxgridsize"><code class="xref f f-var docutils literal notranslate"><span class="pre">maxgridsize</span></code></a>, <a class="reference internal" href="#f/coupler_module/md_cfd_match_cellsize" title="f/coupler_module/md_cfd_match_cellsize"><code class="xref f f-var docutils literal notranslate"><span class="pre">md_cfd_match_cellsize</span></code></a>, <a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">md_realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/myid_cart" title="f/coupler_module/myid_cart"><code class="xref f f-var docutils literal notranslate"><span class="pre">myid_cart</span></code></a>, <a class="reference internal" href="#f/coupler_module/myid_graph" title="f/coupler_module/myid_graph"><code class="xref f f-var docutils literal notranslate"><span class="pre">myid_graph</span></code></a>, <a class="reference internal" href="#f/coupler_module/myid_olap" title="f/coupler_module/myid_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">myid_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/myid_realm" title="f/coupler_module/myid_realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">myid_realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/myid_world" title="f/coupler_module/myid_world"><code class="xref f f-var docutils literal notranslate"><span class="pre">myid_world</span></code></a>, <a class="reference internal" href="#f/coupler_module/ncx" title="f/coupler_module/ncx"><code class="xref f f-var docutils literal notranslate"><span class="pre">ncx</span></code></a>, <a class="reference internal" href="#f/coupler_module/ncx_olap" title="f/coupler_module/ncx_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">ncx_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/ncy" title="f/coupler_module/ncy"><code class="xref f f-var docutils literal notranslate"><span class="pre">ncy</span></code></a>, <a class="reference internal" href="#f/coupler_module/ncy_olap" title="f/coupler_module/ncy_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">ncy_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/ncz" title="f/coupler_module/ncz"><code class="xref f f-var docutils literal notranslate"><span class="pre">ncz</span></code></a>, <a class="reference internal" href="#f/coupler_module/ncz_olap" title="f/coupler_module/ncz_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">ncz_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/normal" title="f/coupler_module/normal"><code class="xref f f-var docutils literal notranslate"><span class="pre">normal</span></code></a>, <a class="reference internal" href="#f/coupler_module/nproc_cfd" title="f/coupler_module/nproc_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">nproc_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/nproc_md" title="f/coupler_module/nproc_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">nproc_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/nproc_olap" title="f/coupler_module/nproc_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">nproc_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/nproc_world" title="f/coupler_module/nproc_world"><code class="xref f f-var docutils literal notranslate"><span class="pre">nproc_world</span></code></a>, <a class="reference internal" href="#f/coupler_module/npx_cfd" title="f/coupler_module/npx_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">npx_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/npx_md" title="f/coupler_module/npx_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">npx_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/npy_cfd" title="f/coupler_module/npy_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">npy_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/npy_md" title="f/coupler_module/npy_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">npy_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/npz_cfd" title="f/coupler_module/npz_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">npz_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/npz_md" title="f/coupler_module/npz_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">npz_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/nsteps_cfd" title="f/coupler_module/nsteps_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">nsteps_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/nsteps_coupled" title="f/coupler_module/nsteps_coupled"><code class="xref f f-var docutils literal notranslate"><span class="pre">nsteps_coupled</span></code></a>, <a class="reference internal" href="#f/coupler_module/nsteps_md" title="f/coupler_module/nsteps_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">nsteps_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/olap_mask" title="f/coupler_module/olap_mask"><code class="xref f f-var docutils literal notranslate"><span class="pre">olap_mask</span></code></a>, <a class="reference internal" href="#f/coupler_module/output_mode" title="f/coupler_module/output_mode"><code class="xref f f-var docutils literal notranslate"><span class="pre">output_mode</span></code></a>, <a class="reference internal" href="#f/coupler_module/quiet" title="f/coupler_module/quiet"><code class="xref f f-var docutils literal notranslate"><span class="pre">quiet</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank2coord_cfd" title="f/coupler_module/rank2coord_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank2coord_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank2coord_md" title="f/coupler_module/rank2coord_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank2coord_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_cart" title="f/coupler_module/rank_cart"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_cart</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_cfdcart2rank_world" title="f/coupler_module/rank_cfdcart2rank_world"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_cfdcart2rank_world</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_cfdrealm2rank_world" title="f/coupler_module/rank_cfdrealm2rank_world"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_cfdrealm2rank_world</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_graph" title="f/coupler_module/rank_graph"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_graph</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_graph2rank_world" title="f/coupler_module/rank_graph2rank_world"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_graph2rank_world</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_inter2rank_world" title="f/coupler_module/rank_inter2rank_world"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_inter2rank_world</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_intersect" title="f/coupler_module/rank_intersect"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_intersect</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_mdcart2rank_world" title="f/coupler_module/rank_mdcart2rank_world"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_mdcart2rank_world</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_mdrealm2rank_world" title="f/coupler_module/rank_mdrealm2rank_world"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_mdrealm2rank_world</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_olap" title="f/coupler_module/rank_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_olap2rank_realm" title="f/coupler_module/rank_olap2rank_realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_olap2rank_realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_olap2rank_world" title="f/coupler_module/rank_olap2rank_world"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_olap2rank_world</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_realm" title="f/coupler_module/rank_realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world" title="f/coupler_module/rank_world"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_world</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world2rank_cfdcart" title="f/coupler_module/rank_world2rank_cfdcart"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_world2rank_cfdcart</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world2rank_cfdrealm" title="f/coupler_module/rank_world2rank_cfdrealm"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_world2rank_cfdrealm</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world2rank_graph" title="f/coupler_module/rank_world2rank_graph"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_world2rank_graph</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world2rank_inter" title="f/coupler_module/rank_world2rank_inter"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_world2rank_inter</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world2rank_mdcart" title="f/coupler_module/rank_world2rank_mdcart"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_world2rank_mdcart</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world2rank_mdrealm" title="f/coupler_module/rank_world2rank_mdrealm"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_world2rank_mdrealm</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world2rank_olap" title="f/coupler_module/rank_world2rank_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">rank_world2rank_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm" title="f/coupler_module/realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm_name" title="f/coupler_module/realm_name"><code class="xref f f-var docutils literal notranslate"><span class="pre">realm_name</span></code></a>, <a class="reference internal" href="#f/coupler_module/rootid_cart" title="f/coupler_module/rootid_cart"><code class="xref f f-var docutils literal notranslate"><span class="pre">rootid_cart</span></code></a>, <a class="reference internal" href="#f/coupler_module/rootid_realm" title="f/coupler_module/rootid_realm"><code class="xref f f-var docutils literal notranslate"><span class="pre">rootid_realm</span></code></a>, <a class="reference internal" href="#f/coupler_module/rootid_world" title="f/coupler_module/rootid_world"><code class="xref f f-var docutils literal notranslate"><span class="pre">rootid_world</span></code></a>, <a class="reference internal" href="#f/coupler_module/save_period" title="f/coupler_module/save_period"><code class="xref f f-var docutils literal notranslate"><span class="pre">save_period</span></code></a>, <a class="reference internal" href="#f/coupler_module/sendtype_cfd_to_md" title="f/coupler_module/sendtype_cfd_to_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">sendtype_cfd_to_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/sendtype_md_to_cfd" title="f/coupler_module/sendtype_md_to_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">sendtype_md_to_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/staggered_averages" title="f/coupler_module/staggered_averages"><code class="xref f f-var docutils literal notranslate"><span class="pre">staggered_averages</span></code></a>, <a class="reference internal" href="#f/coupler_module/testval" title="f/coupler_module/testval"><code class="xref f f-var docutils literal notranslate"><span class="pre">testval</span></code></a>, <a class="reference internal" href="#f/coupler_module/timestep_ratio" title="f/coupler_module/timestep_ratio"><code class="xref f f-var docutils literal notranslate"><span class="pre">timestep_ratio</span></code></a>, <a class="reference internal" href="#f/coupler_module/void_bn" title="f/coupler_module/void_bn"><code class="xref f f-var docutils literal notranslate"><span class="pre">void_bn</span></code></a>, <a class="reference internal" href="#f/coupler_module/x_orig_cfd" title="f/coupler_module/x_orig_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">x_orig_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/x_orig_md" title="f/coupler_module/x_orig_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">x_orig_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/xg" title="f/coupler_module/xg"><code class="xref f f-var docutils literal notranslate"><span class="pre">xg</span></code></a>, <a class="reference internal" href="#f/coupler_module/xl_cfd" title="f/coupler_module/xl_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">xl_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/xl_md" title="f/coupler_module/xl_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">xl_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/xl_olap" title="f/coupler_module/xl_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">xl_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/xll" title="f/coupler_module/xll"><code class="xref f f-var docutils literal notranslate"><span class="pre">xll</span></code></a>, <a class="reference internal" href="#f/coupler_module/y_orig_cfd" title="f/coupler_module/y_orig_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">y_orig_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/y_orig_md" title="f/coupler_module/y_orig_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">y_orig_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/yg" title="f/coupler_module/yg"><code class="xref f f-var docutils literal notranslate"><span class="pre">yg</span></code></a>, <a class="reference internal" href="#f/coupler_module/yl_cfd" title="f/coupler_module/yl_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">yl_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/yl_md" title="f/coupler_module/yl_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">yl_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/yl_olap" title="f/coupler_module/yl_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">yl_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/yll" title="f/coupler_module/yll"><code class="xref f f-var docutils literal notranslate"><span class="pre">yll</span></code></a>, <a class="reference internal" href="#f/coupler_module/z_orig_cfd" title="f/coupler_module/z_orig_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">z_orig_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/z_orig_md" title="f/coupler_module/z_orig_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">z_orig_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/zg" title="f/coupler_module/zg"><code class="xref f f-var docutils literal notranslate"><span class="pre">zg</span></code></a>, <a class="reference internal" href="#f/coupler_module/zl_cfd" title="f/coupler_module/zl_cfd"><code class="xref f f-var docutils literal notranslate"><span class="pre">zl_cfd</span></code></a>, <a class="reference internal" href="#f/coupler_module/zl_md" title="f/coupler_module/zl_md"><code class="xref f f-var docutils literal notranslate"><span class="pre">zl_md</span></code></a>, <a class="reference internal" href="#f/coupler_module/zl_olap" title="f/coupler_module/zl_olap"><code class="xref f f-var docutils literal notranslate"><span class="pre">zl_olap</span></code></a>, <a class="reference internal" href="#f/coupler_module/zll" title="f/coupler_module/zll"><code class="xref f f-var docutils literal notranslate"><span class="pre">zll</span></code></a></p>
</dd>
<dt class="field-even">Routines</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module/coupler_cfd_init" title="f/coupler_module/coupler_cfd_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_cfd_init()</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_md_init" title="f/coupler_module/coupler_md_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_md_init()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_create_map" title="f/coupler_module/cpl_create_map"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_create_map()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_finalize" title="f/coupler_module/cpl_finalize"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_finalize()</span></code></a>, <a class="reference internal" href="#f/_/cpl_init" title="f/_/cpl_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_init()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_new_fileunit" title="f/coupler_module/cpl_new_fileunit"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_new_fileunit()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_rank_map" title="f/coupler_module/cpl_rank_map"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_rank_map()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_set_timing" title="f/coupler_module/cpl_set_timing"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_set_timing()</span></code></a>, <a class="reference internal" href="#f/_/cpl_setup_cfd" title="f/_/cpl_setup_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_setup_cfd()</span></code></a>, <a class="reference internal" href="#f/_/cpl_setup_md" title="f/_/cpl_setup_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_setup_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_write_header" title="f/coupler_module/cpl_write_header"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_write_header()</span></code></a>, <a class="reference internal" href="#f/coupler_module/error_abort_s" title="f/coupler_module/error_abort_s"><code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort_s()</span></code></a>, <a class="reference internal" href="#f/coupler_module/error_abort_si" title="f/coupler_module/error_abort_si"><code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort_si()</span></code></a>, <a class="reference internal" href="#f/coupler_module/get_new_fileunit" title="f/coupler_module/get_new_fileunit"><code class="xref f f-func docutils literal notranslate"><span class="pre">get_new_fileunit()</span></code></a>, <a class="reference internal" href="#f/coupler_module/locate" title="f/coupler_module/locate"><code class="xref f f-func docutils literal notranslate"><span class="pre">locate()</span></code></a>, <a class="reference internal" href="#f/coupler_module/messenger_lasterrorcheck" title="f/coupler_module/messenger_lasterrorcheck"><code class="xref f f-func docutils literal notranslate"><span class="pre">messenger_lasterrorcheck()</span></code></a>, <a class="reference internal" href="#f/coupler_module/printf" title="f/coupler_module/printf"><code class="xref f f-func docutils literal notranslate"><span class="pre">printf()</span></code></a>, <a class="reference internal" href="#f/coupler_module/read_coupler_input" title="f/coupler_module/read_coupler_input"><code class="xref f f-func docutils literal notranslate"><span class="pre">read_coupler_input()</span></code></a>, <a class="reference internal" href="#f/coupler_module/set_output_mode" title="f/coupler_module/set_output_mode"><code class="xref f f-func docutils literal notranslate"><span class="pre">set_output_mode()</span></code></a>, <a class="reference internal" href="#f/coupler_module/write_matrix" title="f/coupler_module/write_matrix"><code class="xref f f-func docutils literal notranslate"><span class="pre">write_matrix()</span></code></a>, <a class="reference internal" href="#f/coupler_module/write_matrix_int" title="f/coupler_module/write_matrix_int"><code class="xref f f-func docutils literal notranslate"><span class="pre">write_matrix_int()</span></code></a></p>
</dd>
</dl>
<p class="rubric">Variables</p>
<ul>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/average_period">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">average_period</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected/optional/default=1</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/average_period" title="Permalink to this definition">¶</a></dt>
<dd><p>average period for averages ( it must come from CFD !!!)</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/boundary_algo">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">boundary_algo</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/boundary_algo" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cfd_icoord2olap_md_icoords">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cfd_icoord2olap_md_icoords</span></span> <span class="pre">(</span><span class="pre">*,*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cfd_icoord2olap_md_icoords" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cfd_jcoord2olap_md_jcoords">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cfd_jcoord2olap_md_jcoords</span></span> <span class="pre">(</span><span class="pre">*,*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cfd_jcoord2olap_md_jcoords" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cfd_kcoord2olap_md_kcoords">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cfd_kcoord2olap_md_kcoords</span></span> <span class="pre">(</span><span class="pre">*,*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cfd_kcoord2olap_md_kcoords" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cfd_realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cfd_realm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">1</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cfd_realm" title="Permalink to this definition">¶</a></dt>
<dd><p>CFD realm identifier</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cfdid_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cfdid_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cfdid_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Connected to CFD processor</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/comm_style">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">comm_style</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/comm_style" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/comm_style_gath_scat">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">comm_style_gath_scat</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">1</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/comm_style_gath_scat" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/comm_style_send_recv">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">comm_style_send_recv</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">0</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/comm_style_send_recv" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/constraint_algo">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">constraint_algo</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/constraint_algo" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/constraint_cv">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">constraint_cv</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">4</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/constraint_cv" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/constraint_cvflag">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">constraint_cvflag</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/constraint_cvflag" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/constraint_flekkoy">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">constraint_flekkoy</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">3</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/constraint_flekkoy" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/constraint_ncer">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">constraint_ncer</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">2</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/constraint_ncer" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/constraint_off">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">constraint_off</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">0</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/constraint_off" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/constraint_ot">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">constraint_ot</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">1</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/constraint_ot" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coord2rank_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coord2rank_cfd</span></span> <span class="pre">(</span><span class="pre">*,*,*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coord2rank_cfd" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coord2rank_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coord2rank_md</span></span> <span class="pre">(</span><span class="pre">*,*,*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coord2rank_md" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coupler_abort_on_request">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_abort_on_request</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">7</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coupler_abort_on_request" title="Permalink to this definition">¶</a></dt>
<dd><p>used in request_abort</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coupler_abort_send_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_abort_send_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">8</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coupler_abort_send_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>error in coupler_cfd_send</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coupler_error_cart_comm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_error_cart_comm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">9</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coupler_error_cart_comm" title="Permalink to this definition">¶</a></dt>
<dd><p>Wrong comm value in CPL_Cart_coords</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coupler_error_continuum_force">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_error_continuum_force</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">6</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coupler_error_continuum_force" title="Permalink to this definition">¶</a></dt>
<dd><p>the region in which the continuum constrain force is apply spans over two MD domains</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coupler_error_init">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_error_init</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">3</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coupler_error_init" title="Permalink to this definition">¶</a></dt>
<dd><p>initialisation error</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coupler_error_input_file">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_error_input_file</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">4</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coupler_error_input_file" title="Permalink to this definition">¶</a></dt>
<dd><p>wrong value in input file</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coupler_error_one_realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_error_one_realm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">2</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coupler_error_one_realm" title="Permalink to this definition">¶</a></dt>
<dd><p>one realm missing</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coupler_error_read_input">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_error_read_input</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">5</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coupler_error_read_input" title="Permalink to this definition">¶</a></dt>
<dd><p>error in processing input file or data transfers</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coupler_error_realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_error_realm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">1</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coupler_error_realm" title="Permalink to this definition">¶</a></dt>
<dd><p>wrong realm value</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/coupler_error_setup_incomplete">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_error_setup_incomplete</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">10</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/coupler_error_setup_incomplete" title="Permalink to this definition">¶</a></dt>
<dd><p>CPL_setup_md or CPL_setup_cfd</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_cart_comm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_cart_comm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_cart_comm" title="Permalink to this definition">¶</a></dt>
<dd><p>Comm w/cartesian topology for each realm;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_cfd_bc_slice">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_cfd_bc_slice</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_cfd_bc_slice" title="Permalink to this definition">¶</a></dt>
<dd><p>(average MD values, not CFD)</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_cfd_bc_x">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_cfd_bc_x</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_cfd_bc_x" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_cfd_bc_y">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_cfd_bc_y</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_cfd_bc_y" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_cfd_bc_z">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_cfd_bc_z</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_cfd_bc_z" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_full_overlap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_full_overlap</span></span><em> <span class="pre">[</span></em><em><span class="pre">logical</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_full_overlap" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_graph_comm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_graph_comm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_graph_comm" title="Permalink to this definition">¶</a></dt>
<dd><p>Comm w/ graph topolgy between locally olapg procs;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_initialised">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_initialised</span></span><em> <span class="pre">[</span></em><em><span class="pre">logical</span></em><em><span class="pre">,</span></em><em><span class="pre">optional/default=.false.</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_initialised" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_inter_comm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_inter_comm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_inter_comm" title="Permalink to this definition">¶</a></dt>
<dd><p>CFD/MD INTER communicator between realm comms;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_md_bc_slice">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_md_bc_slice</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_md_bc_slice" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_olap_comm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_olap_comm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_olap_comm" title="Permalink to this definition">¶</a></dt>
<dd><p>Local comm between only overlapping MD/CFD procs;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_realm_comm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_realm_comm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_realm_comm" title="Permalink to this definition">¶</a></dt>
<dd><p>INTRA communicators within MD/CFD realms;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_realm_intersection_comm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_realm_intersection_comm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_realm_intersection_comm" title="Permalink to this definition">¶</a></dt>
<dd><p>Intersecting MD/CFD procs in world;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_realm_olap_comm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_realm_olap_comm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_realm_olap_comm" title="Permalink to this definition">¶</a></dt>
<dd><p>Local CFD/MD in overlapping region;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_setup_complete">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_setup_complete</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">optional/default=0</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_setup_complete" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/cpl_world_comm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_world_comm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/cpl_world_comm" title="Permalink to this definition">¶</a></dt>
<dd><p>Both CFD and MD realms;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/density_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">density_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/density_cfd" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/density_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">density_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/density_md" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/dt_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">dt_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/dt_cfd" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/dt_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">dt_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/dt_md" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/dx">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">dx</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/dx" title="Permalink to this definition">¶</a></dt>
<dd><p>Cell size in x</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/dy">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">dy</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/dy" title="Permalink to this definition">¶</a></dt>
<dd><p>Cell size in y</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/dymax">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">dymax</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/dymax" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/dymin">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">dymin</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/dymin" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/dz">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">dz</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/dz" title="Permalink to this definition">¶</a></dt>
<dd><p>Cell size in z</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/iblock_realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">iblock_realm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/iblock_realm" title="Permalink to this definition">¶</a></dt>
<dd><p>x Processor ID in Cartesian Coordinates</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icmax">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icmax</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icmax" title="Permalink to this definition">¶</a></dt>
<dd><p>Whole simulation upper cell extents in x</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icmax_bnry">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icmax_bnry</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icmax_bnry" title="Permalink to this definition">¶</a></dt>
<dd><p>Region used to get boundary condition upper cell extents in x</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icmax_cnst">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icmax_cnst</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icmax_cnst" title="Permalink to this definition">¶</a></dt>
<dd><p>Constrained dynamics region upper cell extents in x</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icmax_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icmax_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icmax_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Overlap region upper cell extents in x</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icmin">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icmin</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icmin" title="Permalink to this definition">¶</a></dt>
<dd><p>Whole simulation lower cell extents in x</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icmin_bnry">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icmin_bnry</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icmin_bnry" title="Permalink to this definition">¶</a></dt>
<dd><p>Region used to get boundary condition lower cell extents in x</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icmin_cnst">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icmin_cnst</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icmin_cnst" title="Permalink to this definition">¶</a></dt>
<dd><p>Constrained dynamics region lower cell extents in x</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icmin_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icmin_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icmin_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Overlap region lower cell extents in x</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icpmax_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icpmax_cfd</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icpmax_cfd" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icpmax_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icpmax_md</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icpmax_md" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icpmin_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icpmin_cfd</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icpmin_cfd" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/icpmin_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">icpmin_md</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/icpmin_md" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/ierr">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">ierr</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/ierr" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jblock_realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jblock_realm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jblock_realm" title="Permalink to this definition">¶</a></dt>
<dd><p>y Processor ID in Cartesian Coordinates</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcmax">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcmax</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcmax" title="Permalink to this definition">¶</a></dt>
<dd><p>Whole simulation upper cell extents in y</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcmax_bnry">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcmax_bnry</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcmax_bnry" title="Permalink to this definition">¶</a></dt>
<dd><p>Region used to get boundary condition upper cell extents in y</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcmax_cnst">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcmax_cnst</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcmax_cnst" title="Permalink to this definition">¶</a></dt>
<dd><p>Constrained dynamics region upper cell extents in y</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcmax_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcmax_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcmax_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Overlap region upper cell extents in y</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcmin">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcmin</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcmin" title="Permalink to this definition">¶</a></dt>
<dd><p>Whole simulation lower cell extents in y</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcmin_bnry">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcmin_bnry</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcmin_bnry" title="Permalink to this definition">¶</a></dt>
<dd><p>Region used to get boundary condition lower cell extents in y</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcmin_cnst">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcmin_cnst</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcmin_cnst" title="Permalink to this definition">¶</a></dt>
<dd><p>Constrained dynamics region lower cell extents in y</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcmin_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcmin_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcmin_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Overlap region lower cell extents in y</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcpmax_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcpmax_cfd</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcpmax_cfd" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcpmax_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcpmax_md</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcpmax_md" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcpmin_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcpmin_cfd</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcpmin_cfd" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/jcpmin_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">jcpmin_md</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/jcpmin_md" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kblock_realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kblock_realm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kblock_realm" title="Permalink to this definition">¶</a></dt>
<dd><p>z Processor ID in Cartesian Coordinates</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcmax">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcmax</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcmax" title="Permalink to this definition">¶</a></dt>
<dd><p>Whole simulation upper cell extents in z</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcmax_bnry">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcmax_bnry</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcmax_bnry" title="Permalink to this definition">¶</a></dt>
<dd><p>Region used to get boundary condition upper cell extents in z</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcmax_cnst">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcmax_cnst</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcmax_cnst" title="Permalink to this definition">¶</a></dt>
<dd><p>Constrained dynamics region upper cell extents in z</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcmax_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcmax_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcmax_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Overlap region upper cell extents in z</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcmin">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcmin</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcmin" title="Permalink to this definition">¶</a></dt>
<dd><p>Whole simulation lower cell extents in z</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcmin_bnry">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcmin_bnry</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcmin_bnry" title="Permalink to this definition">¶</a></dt>
<dd><p>Region used to get boundary condition lower cell extents in z</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcmin_cnst">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcmin_cnst</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcmin_cnst" title="Permalink to this definition">¶</a></dt>
<dd><p>Constrained dynamics region lower cell extents in z</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcmin_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcmin_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcmin_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Overlap region lower cell extents in z</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcpmax_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcpmax_cfd</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcpmax_cfd" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcpmax_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcpmax_md</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcpmax_md" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcpmin_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcpmin_cfd</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcpmin_cfd" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/kcpmin_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">kcpmin_md</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/kcpmin_md" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/maxgridsize">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">maxgridsize</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">2097152</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/maxgridsize" title="Permalink to this definition">¶</a></dt>
<dd><p>Maximum size to store global grid</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/md_cfd_match_cellsize">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">md_cfd_match_cellsize</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/md_cfd_match_cellsize" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/md_realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">md_realm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">2</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/md_realm" title="Permalink to this definition">¶</a></dt>
<dd><p>MD realm identifier</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/myid_cart">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">myid_cart</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/myid_cart" title="Permalink to this definition">¶</a></dt>
<dd><p>Processor ID from 0 to nproc_cart-1;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/myid_graph">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">myid_graph</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/myid_graph" title="Permalink to this definition">¶</a></dt>
<dd><p>Processor ID from 0 to nproc_graph-1;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/myid_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">myid_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/myid_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Processor ID from 0 to nproc_olap-1;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/myid_realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">myid_realm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/myid_realm" title="Permalink to this definition">¶</a></dt>
<dd><p>Processor ID from 0 to nproc_realm-1;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/myid_world">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">myid_world</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/myid_world" title="Permalink to this definition">¶</a></dt>
<dd><p>Processor ID from 0 to nproc_world-1;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/ncx">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">ncx</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/ncx" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of x cells in domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/ncx_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">ncx_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/ncx_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of cells in x in overlap region</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/ncy">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">ncy</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/ncy" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of y cells in domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/ncy_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">ncy_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/ncy_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of cells in y in overlap region</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/ncz">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">ncz</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/ncz" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of z cells in domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/ncz_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">ncz_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/ncz_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of cells in z in overlap region</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/normal">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">normal</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">1</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/normal" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/nproc_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">nproc_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/nproc_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>Total number of processor in cfd</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/nproc_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">nproc_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/nproc_md" title="Permalink to this definition">¶</a></dt>
<dd><p>Total number of processor in md</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/nproc_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">nproc_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/nproc_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Total number of processor in overlap region</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/nproc_world">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">nproc_world</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/nproc_world" title="Permalink to this definition">¶</a></dt>
<dd><p>Total number of processor in world</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/npx_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">npx_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/npx_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of processor in x in the cfd</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/npx_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">npx_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/npx_md" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of processor in x in the md</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/npy_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">npy_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/npy_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of processor in y in the cfd</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/npy_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">npy_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/npy_md" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of processor in y in the md</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/npz_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">npz_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/npz_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of processor in z in the cfd</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/npz_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">npz_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/npz_md" title="Permalink to this definition">¶</a></dt>
<dd><p>Number of processor in z in the md</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/nsteps_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">nsteps_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/nsteps_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>CFD input steps</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/nsteps_coupled">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">nsteps_coupled</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/nsteps_coupled" title="Permalink to this definition">¶</a></dt>
<dd><p>Total number of steps for coupled simulation</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/nsteps_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">nsteps_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/nsteps_md" title="Permalink to this definition">¶</a></dt>
<dd><p>MD input steps</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/olap_mask">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">olap_mask</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">logical</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/olap_mask" title="Permalink to this definition">¶</a></dt>
<dd><p>Overlap mask specifying which processors overlap using world ranks</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/output_mode">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">output_mode</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">optional/default=1</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/output_mode" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/quiet">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">quiet</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">0</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/quiet" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank2coord_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank2coord_cfd</span></span> <span class="pre">(</span><span class="pre">*,*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank2coord_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>Array containing coordinates for each cartesian rank</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank2coord_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank2coord_md</span></span> <span class="pre">(</span><span class="pre">*,*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank2coord_md" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_cart">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_cart</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_cart" title="Permalink to this definition">¶</a></dt>
<dd><p>Processor rank from 1 to nproc_cart;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_cfdcart2rank_world">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_cfdcart2rank_world</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_cfdcart2rank_world" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_cfdrealm2rank_world">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_cfdrealm2rank_world</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_cfdrealm2rank_world" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_graph">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_graph</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_graph" title="Permalink to this definition">¶</a></dt>
<dd><p>Processor rank from 1 to nproc_graph;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_graph2rank_world">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_graph2rank_world</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_graph2rank_world" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_inter2rank_world">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_inter2rank_world</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_inter2rank_world" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_intersect">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_intersect</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_intersect" title="Permalink to this definition">¶</a></dt>
<dd><p>Processor rank in intersection of overlaping proces;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_mdcart2rank_world">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_mdcart2rank_world</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_mdcart2rank_world" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_mdrealm2rank_world">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_mdrealm2rank_world</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_mdrealm2rank_world" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>Processor rank from 1 to nproc_olap;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_olap2rank_realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_olap2rank_realm</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_olap2rank_realm" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_olap2rank_world">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_olap2rank_world</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_olap2rank_world" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_realm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_realm" title="Permalink to this definition">¶</a></dt>
<dd><p>Processor rank from 1 to nproc_realm;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_world">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_world</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_world" title="Permalink to this definition">¶</a></dt>
<dd><p>Processor rank from 1 to nproc_world;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_world2rank_cfdcart">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_world2rank_cfdcart</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_world2rank_cfdcart" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_world2rank_cfdrealm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_world2rank_cfdrealm</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_world2rank_cfdrealm" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_world2rank_graph">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_world2rank_graph</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_world2rank_graph" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_world2rank_inter">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_world2rank_inter</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_world2rank_inter" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_world2rank_mdcart">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_world2rank_mdcart</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_world2rank_mdcart" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_world2rank_mdrealm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_world2rank_mdrealm</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_world2rank_mdrealm" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rank_world2rank_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rank_world2rank_olap</span></span> <span class="pre">(</span><span class="pre">*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rank_world2rank_olap" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">realm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/realm" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/realm_name">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">realm_name</span></span> <span class="pre">(</span><span class="pre">2</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">character</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">(/&quot;</span><span class="pre">cfd</span><span class="pre">&quot;</span><em><span class="pre">,</span></em><em><span class="pre">&quot;md</span> <span class="pre">&quot;/)</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/realm_name" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rootid_cart">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rootid_cart</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rootid_cart" title="Permalink to this definition">¶</a></dt>
<dd><p>Root processor in each cart topology;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rootid_realm">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rootid_realm</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rootid_realm" title="Permalink to this definition">¶</a></dt>
<dd><p>Root processor in each realm;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/rootid_world">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">rootid_world</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/rootid_world" title="Permalink to this definition">¶</a></dt>
<dd><p>Root processor in world;</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/save_period">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">save_period</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected/optional/default=10</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/save_period" title="Permalink to this definition">¶</a></dt>
<dd><p>save period (corresponts to tplot in CFD)</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/sendtype_cfd_to_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">sendtype_cfd_to_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/sendtype_cfd_to_md" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/sendtype_md_to_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">sendtype_md_to_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/sendtype_md_to_cfd" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/staggered_averages">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">staggered_averages</span></span> <span class="pre">(</span><span class="pre">3</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">logical</span></em><em><span class="pre">,</span></em><em><span class="pre">protected/optional/default=(/.false.</span></em><em><span class="pre">,</span></em><em><span class="pre">.false.</span></em><em><span class="pre">,</span></em><em><span class="pre">.false./)</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/staggered_averages" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/testval">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">testval</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/testval" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/timestep_ratio">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">timestep_ratio</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/timestep_ratio" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/void_bn">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">void_bn</span></span><em> <span class="pre">[</span></em><em><span class="pre">integer</span></em><em><span class="pre">,</span></em><em><span class="pre">parameter=</span></em><span class="pre">-</span><span class="pre">666</span><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/void_bn" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/x_orig_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">x_orig_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/x_orig_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>x origin of the cfd domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/x_orig_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">x_orig_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/x_orig_md" title="Permalink to this definition">¶</a></dt>
<dd><p>x origin of the md domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/xg">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">xg</span></span> <span class="pre">(</span><span class="pre">*,*,*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">target/allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/xg" title="Permalink to this definition">¶</a></dt>
<dd><p>3D grid points in x</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/xl_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">xl_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/xl_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>x domain size of the cfd domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/xl_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">xl_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/xl_md" title="Permalink to this definition">¶</a></dt>
<dd><p>x domain size of the md domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/xl_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">xl_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/xl_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>x overlap region size</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/xll">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">xll</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/xll" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/y_orig_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">y_orig_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/y_orig_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>y origin of the cfd domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/y_orig_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">y_orig_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/y_orig_md" title="Permalink to this definition">¶</a></dt>
<dd><p>y origin of the md domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/yg">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">yg</span></span> <span class="pre">(</span><span class="pre">*,*,*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">target/allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/yg" title="Permalink to this definition">¶</a></dt>
<dd><p>3D grid points in y</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/yl_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">yl_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/yl_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>y domain size of the cfd domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/yl_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">yl_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/yl_md" title="Permalink to this definition">¶</a></dt>
<dd><p>y domain size of the md domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/yl_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">yl_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/yl_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>y overlap region size</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/yll">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">yll</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/yll" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/z_orig_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">z_orig_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/z_orig_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>z origin of the cfd domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/z_orig_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">z_orig_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/z_orig_md" title="Permalink to this definition">¶</a></dt>
<dd><p>z origin of the md domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/zg">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">zg</span></span> <span class="pre">(</span><span class="pre">*,*,*</span><span class="pre">)</span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">target/allocatable/protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/zg" title="Permalink to this definition">¶</a></dt>
<dd><p>3D grid points in z</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/zl_cfd">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">zl_cfd</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/zl_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>z domain size of the cfd domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/zl_md">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">zl_md</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/zl_md" title="Permalink to this definition">¶</a></dt>
<dd><p>z domain size of the md domain</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/zl_olap">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">zl_olap</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/zl_olap" title="Permalink to this definition">¶</a></dt>
<dd><p>z overlap region size</p>
</dd></dl>

</li>
<li><dl class="f variable">
<dt class="sig sig-object f" id="f/coupler_module/zll">
<span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">zll</span></span><em> <span class="pre">[</span></em><em><span class="pre">real</span></em><em><span class="pre">,</span></em><em><span class="pre">protected</span></em><em><span class="pre">]</span></em><a class="headerlink" href="#f/coupler_module/zll" title="Permalink to this definition">¶</a></dt>
<dd></dd></dl>

</li>
</ul>
<p class="rubric">Subroutines and functions</p>
<dl>
<dt class="sig sig-object f" id="f/coupler_module/cpl_init">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_init</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">callingrealm</span></em>, <em class="sig-param"><span class="pre">returned_realm_comm</span></em>, <em class="sig-param"><span class="pre">ierror</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/cpl_init" title="Permalink to this definition">¶</a></dt>
<dd><p>(cfd+md) Splits MPI_COMM_WORLD in both the CFD and MD code respectively
and create intercommunicator between CFD and MD</p>
<p><strong>Remarks</strong></p>
<p>Assumes MPI has been initialised <cite>MPI_init</cite> and communicator MPI_COMM_WORLD exists
and contains all processors in both CFD and MD regions</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_init</span><span class="p">(</span><span class="n">callingrealm</span><span class="p">,</span> <span class="n">RETURNED_REALM_COMM</span><span class="p">,</span> <span class="n">ierror</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<ul class="simple">
<li><p>callingrealm</p>
<ul>
<li><p>Should identify calling processor as either CFD_REALM (integer with value 1) or MD_REALM (integer with value 2).</p></li>
</ul>
</li>
</ul>
<p><strong>Outputs</strong></p>
<ul class="simple">
<li><p>RETURNED_REALM_COMM</p>
<ul>
<li><p>Communicator based on callingrealm value local to CFD or MD processor and resulting from the split of MPI_COMM_WORLD</p></li>
</ul>
</li>
<li><p>ierror</p>
<ul>
<li><p>Error flag</p></li>
</ul>
</li>
</ul>
<p><strong>Example</strong></p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>program main_CFD
   use cpl, only : CPL_init, CPL_finalize
   use mpi
   implicit none

   integer :: rank, nprocs, ierr
   integer :: CFD_COMM
   integer, parameter :: CFD_realm=1

   !Initialise MPI
   call MPI_Init(ierr)

   !Create MD Comm by spliting world
   call CPL_init(CFD_realm, CFD_COMM, ierr)

   !get local processor rank and print
   call MPI_comm_size(CFD_COMM, nprocs, ierr)
   call MPI_comm_rank(CFD_COMM, rank, ierr)

   print*, &quot;CFD code processor &quot;, rank+1, &quot; of &quot;, nprocs

   !No need for seperate CPL finalise as MPI finalise takes care of this
   call CPL_finalize(ierr)
   call MPI_comm_free(CFD_COMM,ierr)
   call MPI_finalize(ierr)

end program main_CFD
</pre></div>
</div>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>program main_MD
   use cpl, only : CPL_init, CPL_finalize
   use mpi
   implicit none

   integer :: rank, nprocs, ierr
   integer :: MD_COMM
   integer, parameter :: MD_realm=2

   !Initialise MPI
   call MPI_Init(ierr)

   !Create MD Comm by spliting world
   call CPL_init(MD_realm, MD_COMM, ierr)

   call MPI_comm_size(MD_COMM, nprocs, ierr)
   call MPI_comm_rank(MD_COMM, rank, ierr)

   print*, &quot;MD code processor &quot;, rank+1, &quot; of &quot;, nprocs

   !No need for seperate CPL finalise as MPI finalise takes care of this
   call CPL_finalize(ierr)
   call MPI_comm_free(MD_COMM,ierr)
   call MPI_finalize(ierr)

end program main_MD


</pre></div>
</div>
<p><strong>Errors</strong></p>
<blockquote>
<div><p>COUPLER_ERROR_REALM  = 1       ! wrong realm value
COUPLER_ERROR_ONE_REALM = 2    ! one realm missing
COUPLER_ERROR_INIT = 3         ! initialisation error</p>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>callingrealm</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: CFD_REALM=1 or MD_REALM=2</p></li>
<li><p><strong>returned_realm_comm</strong><em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
<li><p><strong>ierror</strong><em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/cpl_finalize">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_finalize</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">ierr</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/cpl_finalize" title="Permalink to this definition">¶</a></dt>
<dd><blockquote>
<div><p>Free all coupling COMMS, deallocate all arrays and set CPL_initialised
flag to zero</p>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>ierr</strong><em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em> :: Error flag</p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code> (<code class="xref f f-func docutils literal notranslate"><span class="pre">mpi_comm_null()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">mpi_barrier()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">mpi_comm_world()</span></code>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/read_coupler_input">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">read_coupler_input</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/read_coupler_input" title="Permalink to this definition">¶</a></dt>
<dd><p>Read COUPLER.in with keyword inputs, which looks for a word
and then reads an expected set of arguments on next lines
e.g. if you had the keyword KEYWORD followed by 2 integer argumets
this would be in the form</p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">KEYWORD</span>
<span class="mi">1</span>
<span class="mi">2</span>
</pre></div>
</div>
<p>This routine is called behind the scenes and attempts to read
the file located under cpl/COUPLER.in</p>
<dl class="field-list simple">
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module/coupler_cfd_init" title="f/coupler_module/coupler_cfd_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_cfd_init()</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_md_init" title="f/coupler_module/coupler_md_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_md_init()</span></code></a></p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module/locate" title="f/coupler_module/locate"><code class="xref f f-func docutils literal notranslate"><span class="pre">locate()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_write_header" title="f/coupler_module/cpl_write_header"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_write_header()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/cpl_write_header">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_write_header</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">header_filename</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/cpl_write_header" title="Permalink to this definition">¶</a></dt>
<dd><blockquote>
<div><p>Writes header information to specified filename in the format
Variable description ; variable name ; variable</p>
</div></blockquote>
<p><strong>Synopsis</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>CPL_write_header (header_filename)</p></li>
<li><p>header_filename</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>File name to write header to</p></li>
</ul>
</div></blockquote>
</div></blockquote>
<p><strong>Input/Output</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>NONE</p></li>
</ul>
</div></blockquote>
<p><strong>Output</strong></p>
<blockquote>
<div><blockquote>
<div><ul class="simple">
<li><p>NONE</p></li>
</ul>
</div></blockquote>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>header_filename</strong><em> [</em><em>character</em><em>,</em><em>in</em><em>]</em></p>
</dd>
<dt class="field-even">Called from</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module/read_coupler_input" title="f/coupler_module/read_coupler_input"><code class="xref f f-func docutils literal notranslate"><span class="pre">read_coupler_input()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/cpl_setup_cfd">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_setup_cfd</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">icomm_grid</span></em>, <em class="sig-param"><span class="pre">xyzl</span></em>, <em class="sig-param"><span class="pre">xyz_orig</span></em>, <em class="sig-param"><span class="pre">ncxyz</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/cpl_setup_cfd" title="Permalink to this definition">¶</a></dt>
<dd><p>Initialisation routine for coupler module - Every variable is sent and stored
to ensure both md and cfd region have an identical list of parameters</p>
<p><strong>Remarks</strong></p>
<p>Assumes CPL has been initialised <cite>CPL_init</cite> and communicator MD_REALM exists
<strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_setup_cfd</span><span class="p">(</span><span class="n">icomm_grid</span><span class="p">,</span> <span class="n">xyzL</span><span class="p">,</span> <span class="n">xyz_orig</span><span class="p">,</span> <span class="n">ncxyz</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<ul class="simple">
<li><p>icomm_grid</p>
<ul>
<li><p>Communicator based on CFD processor topology returned from a call to MPI_CART_CREATE.</p></li>
</ul>
</li>
<li><p>xyzL</p>
<ul>
<li><p>CFD domain size.</p></li>
</ul>
</li>
<li><p>xyz_orig</p>
<ul>
<li><p>CFD origin.</p></li>
</ul>
</li>
<li><p>ncxyz</p>
<ul>
<li><p>Number of CFD cells in global domain.</p></li>
</ul>
</li>
</ul>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>icomm_grid</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xyzl</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xyz_orig</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>ncxyz</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module/coupler_cfd_init" title="f/coupler_module/coupler_cfd_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_cfd_init()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/coupler_cfd_init">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_cfd_init</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">icomm_grid</span></em>, <em class="sig-param"><span class="pre">icoord</span></em>, <em class="sig-param"><span class="pre">npxyz_cfd</span></em>, <em class="sig-param"><span class="pre">xyzl</span></em>, <em class="sig-param"><span class="pre">xyz_orig</span></em>, <em class="sig-param"><span class="pre">ncxyz</span></em>, <em class="sig-param"><span class="pre">ijkcmax</span></em>, <em class="sig-param"><span class="pre">ijkcmin</span></em>, <em class="sig-param"><span class="pre">itmin</span></em>, <em class="sig-param"><span class="pre">itmax</span></em>, <em class="sig-param"><span class="pre">jtmin</span></em>, <em class="sig-param"><span class="pre">jtmax</span></em>, <em class="sig-param"><span class="pre">ktmin</span></em>, <em class="sig-param"><span class="pre">ktmax</span></em>, <em class="sig-param"><span class="pre">xgrid</span></em>, <em class="sig-param"><span class="pre">ygrid</span></em>, <em class="sig-param"><span class="pre">zgrid</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/coupler_cfd_init" title="Permalink to this definition">¶</a></dt>
<dd><p>Initialisation routine for coupler module to be called from CFD side
This is the full interface which is called behind the scenes by CPL_setup_CFD
so every variable is sent and stored to ensure both md and cfd region have
an identical list of parameters</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">coupler_cfd_init</span><span class="p">(</span><span class="n">icomm_grid</span><span class="p">,</span><span class="n">icoord</span><span class="p">,</span><span class="n">npxyz_cfd</span><span class="p">,</span><span class="n">xyzL</span><span class="p">,</span><span class="n">ncxyz</span><span class="p">,</span> <span class="n">ijkcmax</span><span class="p">,</span><span class="n">ijkcmin</span><span class="p">,</span><span class="n">iTmin</span><span class="p">,</span><span class="n">iTmax</span><span class="p">,</span><span class="n">jTmin</span><span class="p">,</span><span class="n">jTmax</span><span class="p">,</span><span class="n">kTmin</span><span class="p">,</span><span class="n">kTmax</span><span class="p">,</span><span class="n">xgrid</span><span class="p">,</span><span class="n">ygrid</span><span class="p">,</span><span class="n">zgrid</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Input</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>icomm_grid</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>The MPI communicator setup by the MPI_CART_CREATE command in the
CFD region (integer)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>icoord</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>The three coordinate for each rank in the domain (integer array nproc by 3)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>npxyz_cfd</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Number of processors in each cartesian dimension (integer array 3)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>xyzL</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Size of domain in each cartesian dimension (dp real array 3)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>ncxyz</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Global number of cells in each cartesian dimension (integer array 3)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>ijkcmax</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Global maximum cell in each cartesian dimension (integer array 3)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>ijkcmin</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Global minimum cell in each cartesian dimension (integer array 3)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>iTmin</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Local minimum cell for each rank (integer array no. procs in x)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>iTmax</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Local maximum cell for each rank (integer array no. procs in x)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>jTmin</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Local minimum cell for each rank (integer array no. procs in y)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>jTmax</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Local maximum cell for each rank (integer array no. procs in y)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>kTmin</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Local minimum cell for each rank (integer array no. procs in z)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>kTmax</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Local maximum cell for each rank (integer array no. procs in z)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>xgrid</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Array of cell vertices in the x direction
(no. cells in x + 1 by no. cells in y + 1, no. cells in z+1)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>ygrid</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Array of cell vertices in the y direction
(no. cells in x + 1 by no. cells in y + 1, no. cells in z+1)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>zgrid</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Array of cell vertices in the z direction
(no. cells in x + 1 by no. cells in y + 1, no. cells in z+1)</p></li>
</ul>
</div></blockquote>
</div></blockquote>
<p><strong>Input/Output</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>NONE</p></li>
</ul>
</div></blockquote>
<p><strong>Output</strong></p>
<blockquote>
<div><blockquote>
<div><ul class="simple">
<li><p>NONE</p></li>
</ul>
</div></blockquote>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>icomm_grid</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>icoord</strong> (,)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>npxyz_cfd</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xyzl</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xyz_orig</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>ncxyz</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>ijkcmax</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>ijkcmin</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>itmin</strong> (*)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>itmax</strong> (*)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>jtmin</strong> (*)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>jtmax</strong> (*)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>ktmin</strong> (*)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>ktmax</strong> (*)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xgrid</strong> (,,*)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>ygrid</strong> (,,*)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>zgrid</strong> (,,*)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/_/cpl_setup_cfd" title="f/_/cpl_setup_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_setup_cfd()</span></code></a></p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module/read_coupler_input" title="f/coupler_module/read_coupler_input"><code class="xref f f-func docutils literal notranslate"><span class="pre">read_coupler_input()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_rank_map" title="f/coupler_module/cpl_rank_map"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_rank_map()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_create_map" title="f/coupler_module/cpl_create_map"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_create_map()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/cpl_setup_md">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_setup_md</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">icomm_grid</span></em>, <em class="sig-param"><span class="pre">xyzl</span></em>, <em class="sig-param"><span class="pre">xyz_orig</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/cpl_setup_md" title="Permalink to this definition">¶</a></dt>
<dd><p>Initialisation routine for coupler module - Every variable is sent and stored
to ensure both md and cfd region have an identical list of parameters</p>
<p><strong>Remarks</strong></p>
<p>Assumes CPL has been initialised <cite>CPL_init</cite> and communicator MD_REALM exists</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">cpl_setup_md</span><span class="p">(</span><span class="n">icomm_grid</span><span class="p">,</span> <span class="n">xyzL</span><span class="p">,</span> <span class="n">xyz_orig</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>icomm_grid</p>
<ul>
<li><p>Communicator based on MD processor topology returned from a call to MPI_CART_CREATE.</p></li>
</ul>
</li>
<li><p>xyzL</p>
<ul>
<li><p>MD domain size.</p></li>
</ul>
</li>
<li><p>xyz_orig</p>
<ul>
<li><p>MD origin.</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>icomm_grid</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xyzl</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xyz_orig</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module/coupler_md_init" title="f/coupler_module/coupler_md_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_md_init()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/coupler_md_init">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">coupler_md_init</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">icomm_grid</span></em>, <em class="sig-param"><span class="pre">icoord</span></em>, <em class="sig-param"><span class="pre">npxyz_md</span></em>, <em class="sig-param"><span class="pre">globaldomain</span></em>, <em class="sig-param"><span class="pre">xyz_orig</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/coupler_md_init" title="Permalink to this definition">¶</a></dt>
<dd><p>Initialisation routine for coupler module to be called from MD side
This is the full interface which is called behind the scenes by CPL_setup_MD
so every variable is sent and stored to ensure both md and cfd region have
an identical list of parameters</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">coupler_md_init</span><span class="p">(</span><span class="n">icomm_grid</span><span class="p">,</span> <span class="n">icoord</span><span class="p">,</span> <span class="n">npxyz_md</span><span class="p">,</span> <span class="n">globaldomain</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Input</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>icomm_grid</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>The MPI communicator setup by the MPI_CART_CREATE command in the
CFD region (integer)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>icoord</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>The three coordinate for each rank in the domain (integer array nproc by 3)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>npxyz_md</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Number of processors in each cartesian dimension (integer array 3)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>globaldomain</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Size of domain in each cartesian dimension (dp real array 3)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>density</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Density of the CFD simulation (dp_real)</p></li>
</ul>
</div></blockquote>
</div></blockquote>
<p><strong>Input/Output</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>NONE</p></li>
</ul>
</div></blockquote>
<p><strong>Output</strong></p>
<blockquote>
<div><blockquote>
<div><ul class="simple">
<li><p>NONE</p></li>
</ul>
</div></blockquote>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>icomm_grid</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>icoord</strong> (,)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>npxyz_md</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>globaldomain</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>xyz_orig</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/_/cpl_setup_md" title="f/_/cpl_setup_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_setup_md()</span></code></a></p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module/read_coupler_input" title="f/coupler_module/read_coupler_input"><code class="xref f f-func docutils literal notranslate"><span class="pre">read_coupler_input()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_rank_map" title="f/coupler_module/cpl_rank_map"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_rank_map()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_create_map" title="f/coupler_module/cpl_create_map"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_create_map()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/cpl_set_timing">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_set_timing</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">initialstep</span></em>, <em class="sig-param"><span class="pre">nsteps</span></em>, <em class="sig-param"><span class="pre">dt</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/cpl_set_timing" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>nsteps</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: <ul>
<li><p>Number of steps in MD simulation.</p></li>
</ul>
</p></li>
<li><p><strong>initialstep</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: <ul>
<li><p>Initial steps in MD simulation.</p></li>
</ul>
</p></li>
<li><p><strong>dt</strong><em> [</em><em>real</em><em>,</em><em>in</em><em>]</em> :: <ul>
<li><p>Timestep in MD simulation.</p></li>
</ul>
</p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/cpl_create_map">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_create_map</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/cpl_create_map" title="Permalink to this definition">¶</a></dt>
<dd><p>Establish for all MD processors the mapping (if any)
to coupled CFD processors</p>
<p>Steps include:</p>
<blockquote>
<div><ul class="simple">
<li><p>check_config_feasibility()</p></li>
<li><p>get_md_cell_ranges()</p></li>
<li><p>get_overlap_blocks()</p></li>
<li><p>set_overlap_topology()</p></li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Use </dt>
<dd class="field-odd"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
<dt class="field-even">Called from</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module/coupler_cfd_init" title="f/coupler_module/coupler_cfd_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_cfd_init()</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_md_init" title="f/coupler_module/coupler_md_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_md_init()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/cpl_rank_map">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_rank_map</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">comm</span></em>, <em class="sig-param"><span class="pre">rank_bn</span></em>, <em class="sig-param"><span class="pre">nproc</span></em>, <em class="sig-param"><span class="pre">comm2world</span></em>, <em class="sig-param"><span class="pre">world2comm</span></em>, <em class="sig-param"><span class="pre">ierr</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/cpl_rank_map" title="Permalink to this definition">¶</a></dt>
<dd><p>Get COMM map for current communicator and relationship to
world rank used to link to others in the coupler hierachy</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_rank_map</span><span class="p">(</span><span class="n">COMM</span><span class="p">,</span> <span class="n">rank</span><span class="p">,</span> <span class="n">comm2world</span><span class="p">,</span> <span class="n">world2comm</span><span class="p">,</span> <span class="n">ierr</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Input</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>comm</p>
<ul>
<li><p>communicator with cartesian structure (handle)</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Output</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>rank</p>
<ul>
<li><p>rank of a process within group of comm (integer)
NOTE - fortran convention rank=1 to nproc</p></li>
</ul>
</li>
<li><p>nproc</p>
<ul>
<li><p>number of processes within group of comm (integer) comm2world
Array of size nproc_world which for element at
world_rank has local rank in COMM</p></li>
</ul>
</li>
<li><p>world2comm</p>
<ul>
<li><p>Array of size nproc_COMM which for element at
for local ranks in COMM has world rank</p></li>
</ul>
</li>
<li><p>ierr</p>
<ul>
<li><p>error flag</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>comm</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>rank_bn</strong><em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
<li><p><strong>nproc</strong><em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
<li><p><strong>comm2world</strong> (*)<em> [</em><em>integer</em><em>,</em><em>out,allocatable</em><em>]</em></p></li>
<li><p><strong>world2comm</strong> (*)<em> [</em><em>integer</em><em>,</em><em>out,allocatable</em><em>]</em></p></li>
<li><p><strong>ierr</strong><em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module/coupler_cfd_init" title="f/coupler_module/coupler_cfd_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_cfd_init()</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_md_init" title="f/coupler_module/coupler_md_init"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_md_init()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/locate">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">locate</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">fileid</span></em>, <em class="sig-param"><span class="pre">keyword</span></em>, <em class="sig-param"><span class="pre">have_data</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/locate" title="Permalink to this definition">¶</a></dt>
<dd><blockquote>
<div><p>Locate keyword argument in input</p>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>fileid</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: File unit number</p></li>
<li><p><strong>keyword</strong><em> [</em><em>character</em><em>,</em><em>in</em><em>]</em> :: Input keyword</p></li>
<li><p><strong>have_data</strong><em> [</em><em>logical</em><em>,</em><em>out</em><em>]</em> :: Flag: input found</p></li>
</ul>
</dd>
<dt class="field-even">Called from</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module/read_coupler_input" title="f/coupler_module/read_coupler_input"><code class="xref f f-func docutils literal notranslate"><span class="pre">read_coupler_input()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/error_abort_s">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">error_abort_s</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="pre">msg</span></em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/error_abort_s" title="Permalink to this definition">¶</a></dt>
<dd><p>Error handling subroutines calling MPI ABORT</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>msg</strong><em> [</em><em>character</em><em>,</em><em>in,</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code>, <code class="xref f f-mod docutils literal notranslate"><span class="pre">iso_fortran_env</span></code> (<code class="xref f f-func docutils literal notranslate"><span class="pre">error_unit()</span></code>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/error_abort_si">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">error_abort_si</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">msg</span></em>, <em class="sig-param"><span class="pre">i</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/error_abort_si" title="Permalink to this definition">¶</a></dt>
<dd><p>Error handling subroutines calling MPI ABORT</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>msg</strong><em> [</em><em>character</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>i</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code>, <code class="xref f f-mod docutils literal notranslate"><span class="pre">iso_fortran_env</span></code> (<code class="xref f f-func docutils literal notranslate"><span class="pre">error_unit()</span></code>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/messenger_lasterrorcheck">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">messenger_lasterrorcheck</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/messenger_lasterrorcheck" title="Permalink to this definition">¶</a></dt>
<dd><p>Use MPI last Error system</p>
<dl class="field-list simple">
<dt class="field-odd">Use </dt>
<dd class="field-odd"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code>, <code class="xref f f-mod docutils literal notranslate"><span class="pre">iso_fortran_env</span></code> (<code class="xref f f-func docutils literal notranslate"><span class="pre">error_unit()</span></code>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/printf">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">printf</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">buf</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">dplaces_in</span></em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/printf" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>buf</strong> (*)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>dplaces_in</strong><em> [</em><em>integer</em><em>,</em><em>in,</em><em>]</em></p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/write_matrix_int">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">write_matrix_int</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">a</span></em>, <em class="sig-param"><span class="pre">varname</span></em>, <em class="sig-param"><span class="pre">fh</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/write_matrix_int" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>a</strong> (,)<em> [</em><em>integer</em><em>]</em></p></li>
<li><p><strong>varname</strong><em> [</em><em>character</em><em>]</em></p></li>
<li><p><strong>fh</strong><em> [</em><em>integer</em><em>]</em></p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/write_matrix">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">write_matrix</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">a</span></em>, <em class="sig-param"><span class="pre">varname</span></em>, <em class="sig-param"><span class="pre">fh</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/write_matrix" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>a</strong> (,)<em> [</em><em>real</em><em>]</em></p></li>
<li><p><strong>varname</strong><em> [</em><em>character</em><em>]</em></p></li>
<li><p><strong>fh</strong><em> [</em><em>integer</em><em>]</em></p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/cpl_new_fileunit">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">cpl_new_fileunit</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/cpl_new_fileunit" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Return</dt>
<dd class="field-odd"><p><strong>f</strong><em> [</em><em>integer</em><em>]</em></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/set_output_mode">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">set_output_mode</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">mode</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/set_output_mode" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>mode</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler_module/get_new_fileunit">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler_module/</span></span><span class="sig-name descname"><span class="pre">get_new_fileunit</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler_module/get_new_fileunit" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Return</dt>
<dd class="field-odd"><p><strong>f</strong><em> [</em><em>integer</em><em>]</em></p>
</dd>
</dl>
</dd></dl>

</section>
<section id="coupler-methods-module">
<h3>Coupler Methods Module<a class="headerlink" href="#coupler-methods-module" title="Permalink to this headline">¶</a></h3>
<p>All the subroutines and functions which would be called
during a run, such as CPL_Send and CPL_recv</p>
<span class="target" id="f/coupler"></span><p class="rubric">Description</p>
<p>Routines accessible from application ( molecular or continuum ) after
the name, in parenthesis, is the realm in which each routine must be called</p>
<blockquote>
<div><ul class="simple">
<li><p>CPL_send            (cfd+md)   sends grid data exchanged between realms ( generic interface)</p></li>
<li><p>CPL_recv            (cfd+md)   receives data exchanged between realms ( generic interface)</p></li>
<li><p>CPL_cfd_get         (cfd)    returns coupler internal parameters for CFD realm</p></li>
<li><p>CPL_get             (md)    returns coupler internal parameters</p></li>
<li><p>CPL_md_get_save_period     (md)    auxiliary used for testing [depricated]</p></li>
<li><p>CPL_md_get_average_period  (md)    returns average period of BC [depricated]</p></li>
<li><p>CPL_md_get_md_per_cfd_dt   (md)    returns the number of step MD does for each CFD step [depricated]</p></li>
</ul>
</div></blockquote>
<p>Also see <a class="reference external" href="fortran_api.shtml#coupler-module">coupler module</a> which contains all
routines to setup the simulation and all the variables defining the setup topology.</p>
<div class="highlight-guess notranslate"><div class="highlight"><pre><span></span>________/\\\\\\\\\__/\\\\\\\\\\\\\____/\\\_____________
 _____/\\\////////__\/\\\/////////\\\_\/\\\_____________
  ___/\\\/___________\/\\\_______\/\\\_\/\\\_____________
   __/\\\_____________\/\\\\\\\\\\\\\/__\/\\\_____________
    _\/\\\_____________\/\\\/////////____\/\\\_____________
     _\//\\\____________\/\\\_____________\/\\\_____________
      __\///\\\__________\/\\\_____________\/\\\_____________
       ____\////\\\\\\\\\_\/\\\_____________\/\\\\\\\\\\\\\\\_
        _______\/////////__\///______________\///////////////__


                     C P L  -  L I B R A R Y

       Copyright (C) 2012-2022 Edward Smith
</pre></div>
</div>
<p><strong>Author(s)</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>Edward Smith Novemeber 2011 to present</p></li>
<li><p>Eduardo Ramos Fernandez 2015 to 2018</p></li>
<li><p>David Trevelyan September 2012 to December 2015</p></li>
<li><p>Lucian Anton, November 2011</p></li>
</ul>
</div></blockquote>
<p><strong>License</strong></p>
<blockquote>
<div><p>This file is part of CPL-Library.</p>
<p>CPL-Library is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.</p>
<p>CPL-Library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.</p>
<p>You should have received a copy of the GNU General Public License
along with CPL-Library.  If not, see &lt;<a class="reference external" href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;.</p>
</div></blockquote>
<p class="rubric">Quick access</p>
<dl class="field-list simple">
<dt class="field-odd">Routines</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/coupler_md_get_average_period" title="f/coupler/coupler_md_get_average_period"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_md_get_average_period()</span></code></a>, <a class="reference internal" href="#f/coupler/coupler_md_get_md_steps_per_cfd_dt" title="f/coupler/coupler_md_get_md_steps_per_cfd_dt"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_md_get_md_steps_per_cfd_dt()</span></code></a>, <a class="reference internal" href="#f/coupler/coupler_md_get_save_period" title="f/coupler/coupler_md_get_save_period"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_md_get_save_period()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_cart_coords" title="f/coupler/cpl_cart_coords"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cart_coords()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_cfd2md" title="f/coupler/cpl_cfd2md"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cfd2md()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_cfd_dt" title="f/coupler/cpl_cfd_dt"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cfd_dt()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_comm_style" title="f/coupler/cpl_comm_style"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_comm_style()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_gather" title="f/coupler/cpl_gather"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_gather()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get" title="f/coupler/cpl_get"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get()</span></code></a>, <a class="reference internal" href="#f/_/cpl_get_arrays" title="f/_/cpl_get_arrays"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_arrays()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_bnry_limits" title="f/coupler/cpl_get_bnry_limits"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_bnry_limits()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_cnst_limits" title="f/coupler/cpl_get_cnst_limits"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_cnst_limits()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_no_cells" title="f/coupler/cpl_get_no_cells"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_no_cells()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_olap_limits" title="f/coupler/cpl_get_olap_limits"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_olap_limits()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_rank" title="f/coupler/cpl_get_rank"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_rank()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_is_proc_inside" title="f/coupler/cpl_is_proc_inside"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_is_proc_inside()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_map_cell2coord" title="f/coupler/cpl_map_cell2coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_cell2coord()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_map_cfd2md_coord" title="f/coupler/cpl_map_cfd2md_coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_cfd2md_coord()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_map_coord2cell" title="f/coupler/cpl_map_coord2cell"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_coord2cell()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_map_glob2loc_cell" title="f/coupler/cpl_map_glob2loc_cell"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_glob2loc_cell()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_map_md2cfd_coord" title="f/coupler/cpl_map_md2cfd_coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_md2cfd_coord()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_md2cfd" title="f/coupler/cpl_md2cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_md2cfd()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_meshgrid" title="f/coupler/cpl_meshgrid"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_meshgrid()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_my_proc_extents" title="f/coupler/cpl_my_proc_extents"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_my_proc_extents()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_my_proc_portion" title="f/coupler/cpl_my_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_my_proc_portion()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_olap_extents" title="f/coupler/cpl_olap_extents"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_olap_extents()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_overlap" title="f/coupler/cpl_overlap"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_overlap()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_proc_extents" title="f/coupler/cpl_proc_extents"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_proc_extents()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_proc_portion" title="f/coupler/cpl_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_proc_portion()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_realm" title="f/coupler/cpl_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_realm()</span></code></a>, <a class="reference internal" href="#f/_/cpl_recv_full" title="f/_/cpl_recv_full"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_recv_full()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_recv_min" title="f/coupler/cpl_recv_min"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_recv_min()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_scatter" title="f/coupler/cpl_scatter"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_scatter()</span></code></a>, <a class="reference internal" href="#f/_/cpl_send_full" title="f/_/cpl_send_full"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_send_full()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_send_min" title="f/coupler/cpl_send_min"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_send_min()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_swaphalos" title="f/coupler/cpl_swaphalos"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_swaphalos()</span></code></a>, <a class="reference internal" href="#f/coupler/establish_halo_cells" title="f/coupler/establish_halo_cells"><code class="xref f f-func docutils literal notranslate"><span class="pre">establish_halo_cells()</span></code></a>, <a class="reference internal" href="#f/coupler/establish_surface_cells" title="f/coupler/establish_surface_cells"><code class="xref f f-func docutils literal notranslate"><span class="pre">establish_surface_cells()</span></code></a>, <a class="reference internal" href="#f/coupler/heaviside" title="f/coupler/heaviside"><code class="xref f f-func docutils literal notranslate"><span class="pre">heaviside()</span></code></a>, <a class="reference internal" href="#f/coupler/is_cell_inside" title="f/coupler/is_cell_inside"><code class="xref f f-func docutils literal notranslate"><span class="pre">is_cell_inside()</span></code></a>, <a class="reference internal" href="#f/coupler/is_coord_inside" title="f/coupler/is_coord_inside"><code class="xref f f-func docutils literal notranslate"><span class="pre">is_coord_inside()</span></code></a>, <a class="reference internal" href="#f/coupler/mpi_errorcheck" title="f/coupler/mpi_errorcheck"><code class="xref f f-func docutils literal notranslate"><span class="pre">mpi_errorcheck()</span></code></a>, <a class="reference internal" href="#f/coupler/test_python" title="f/coupler/test_python"><code class="xref f f-func docutils literal notranslate"><span class="pre">test_python()</span></code></a>, <a class="reference internal" href="#f/coupler/updatefaces" title="f/coupler/updatefaces"><code class="xref f f-func docutils literal notranslate"><span class="pre">updatefaces()</span></code></a></p>
</dd>
</dl>
<p class="rubric">Variables</p>
<p class="rubric">Subroutines and functions</p>
<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_gather">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_gather</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">gatherarray</span></em>, <em class="sig-param"><span class="pre">npercell</span></em>, <em class="sig-param"><span class="pre">limits</span></em>, <em class="sig-param"><span class="pre">recvarray</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_gather" title="Permalink to this definition">¶</a></dt>
<dd><p>Perform gather operation on CPL_OLAP_COMM communicator. The CFD processor
is the root process. The gathered data is effectively “slotted” into the
correct part of the recvarray, and is intented for use in providing the
CFD simulation boundary conditions with data obtained from the MD
simulation.</p>
<p><strong>Synopsis</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>CPL_gather(gatherarray,npercell,limits,recvarray)</p></li>
</ul>
</div></blockquote>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul>
<li><p>gatherarray
- Assumed shape array of data to be gathered from each MD processor</p>
<blockquote>
<div><p>in the overlap communicator. Must be size 0 on CFD processor.</p>
</div></blockquote>
</li>
<li><p>limits
- Integer array of length 6, specifying the global cell extents of the</p>
<blockquote>
<div><p>region to be gathered, is the same on ALL processors.</p>
</div></blockquote>
</li>
<li><p>npercell
- number of data points per cell to be gathered (integer)</p>
<blockquote>
<div><p>Note: should be the same as size(gatherarray(1)) for MD
processor. E.G. npercell = 3 for gathering 3D velocities.</p>
</div></blockquote>
</li>
</ul>
</div></blockquote>
<p><strong>Inputs/Output</strong></p>
<blockquote>
<div><ul>
<li><p>recvarray
- The array in which the gathered values are to be stored on the CFD</p>
<blockquote>
<div><p>processor. The only values to be changed in recvarray are:</p>
</div></blockquote>
</li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>recvarray</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>inout</em><em>]</em> :: limits(1):limits(2),limits(3):limits(4),limits(5):limits(6))</p>
</dd>
</dl>
<dl>
<dt><strong>Output</strong></dt><dd><blockquote>
<div><ul class="simple">
<li><p>NONE</p></li>
</ul>
</div></blockquote>
</dd>
</dl>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>gatherarray</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>npercell</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code>, <a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a></p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_overlap" title="f/coupler/cpl_overlap"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_overlap()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_scatter">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_scatter</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">scatterarray</span></em>, <em class="sig-param"><span class="pre">npercell</span></em>, <em class="sig-param"><span class="pre">limits</span></em>, <em class="sig-param"><span class="pre">recvarray</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_scatter" title="Permalink to this definition">¶</a></dt>
<dd><p>Scatter cell-wise data from CFD processor to corresponding MD processors
on the overlap communicator CPL_OLAP_COMM.</p>
<p><strong>Synopsis</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>CPL_scatter(scatterarray,npercell,limits,recvarray)</p></li>
</ul>
</div></blockquote>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>scatterarray</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>assumed shape array of data to be scattered (real(kind(0.d0)))</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>limits</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>integer array of length 6, specifying the global cell extents of the
region to be scattered, is the same on all processors.</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>npercell</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>number of data points per cell to be scattered (integer).
Note: should be the same as size(scatterarray(1)) for CFD proc</p></li>
</ul>
</div></blockquote>
</div></blockquote>
<dl>
<dt><strong>Inputs/Output</strong></dt><dd><ul class="simple">
<li><p>recvarray</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>the array in which the scattered values are stored on the MD
processors.</p></li>
</ul>
</div></blockquote>
</dd>
<dt><strong>Output</strong></dt><dd><blockquote>
<div><ul class="simple">
<li><p>NONE</p></li>
</ul>
</div></blockquote>
</dd>
</dl>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>scatterarray</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>npercell</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>recvarray</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>inout</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a>, <code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_overlap" title="f/coupler/cpl_overlap"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_overlap()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_cart_coords" title="f/coupler/cpl_cart_coords"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cart_coords()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_proc_portion" title="f/coupler/cpl_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_proc_portion()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_send_full">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_send_full</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">asend</span></em>, <em class="sig-param"><span class="pre">limits</span></em>, <em class="sig-param"><span class="pre">send_flag</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_send_full" title="Permalink to this definition">¶</a></dt>
<dd><p>Send four dimensional array <em>asend</em> of data from all processors in the
current realm with data between global cell array <em>limits</em> to the
corresponding processors from the other realm.</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_send</span><span class="p">(</span><span class="n">asend</span><span class="p">,</span> <span class="n">limits</span><span class="p">,</span> <span class="n">send_flag</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>asend</p>
<ul>
<li><p>Array of data to send. Should be a four dimensional array allocated using the number of cells on the current processor between the limits. Size should be be obtained from <a class="reference external" href="#f/coupler/cpl_my_proc_portion">CPL_my_proc_portion(limits, portion)</a>.</p></li>
</ul>
</li>
<li><p>limits</p>
<ul>
<li><p>Limits in global cell coordinates, must be the same as corresponding recieve</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Outputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>send_flag</p>
<ul>
<li><p>Returned flag which indicates success or failure of send process</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Example</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span> <span class="k">call </span><span class="n">CPL_get_olap_limits</span><span class="p">(</span><span class="n">limits</span><span class="p">)</span>
 <span class="k">call </span><span class="n">CPL_my_proc_portion</span><span class="p">(</span><span class="n">limits</span><span class="p">,</span> <span class="n">portion</span><span class="p">)</span>
 <span class="k">call </span><span class="n">CPL_get_no_cells</span><span class="p">(</span><span class="n">portion</span><span class="p">,</span> <span class="n">Ncells</span><span class="p">)</span>

 <span class="c">!Coupled Send array</span>
 <span class="k">allocate</span><span class="p">(</span><span class="n">A</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">Ncells</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">Ncells</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="n">Ncells</span><span class="p">(</span><span class="mi">3</span><span class="p">)))</span>

 <span class="k">do </span><span class="n">i</span> <span class="o">=</span><span class="n">portion</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="n">portion</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
 <span class="k">do </span><span class="n">j</span> <span class="o">=</span><span class="n">portion</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span><span class="n">portion</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
 <span class="k">do </span><span class="n">k</span> <span class="o">=</span><span class="n">portion</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span><span class="n">portion</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
    <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span><span class="o">-</span><span class="n">portion</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">jj</span> <span class="o">=</span> <span class="n">j</span><span class="o">-</span><span class="n">portion</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">kk</span> <span class="o">=</span> <span class="n">k</span><span class="o">-</span><span class="n">portion</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
    <span class="n">A</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">ii</span><span class="p">,</span><span class="n">jj</span><span class="p">,</span><span class="n">kk</span><span class="p">)</span> <span class="o">=</span> <span class="nb">dble</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">A</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">ii</span><span class="p">,</span><span class="n">jj</span><span class="p">,</span><span class="n">kk</span><span class="p">)</span> <span class="o">=</span> <span class="nb">dble</span><span class="p">(</span><span class="n">j</span><span class="p">)</span>
    <span class="n">A</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="n">ii</span><span class="p">,</span><span class="n">jj</span><span class="p">,</span><span class="n">kk</span><span class="p">)</span> <span class="o">=</span> <span class="nb">dble</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
 <span class="n">enddo</span>
 <span class="n">enddo</span>
 <span class="n">enddo</span>
 <span class="k">call </span><span class="n">CPL_send</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">limits</span><span class="p">,</span> <span class="n">send_flag</span><span class="p">)</span>

<span class="p">..</span> <span class="n">sectionauthor</span><span class="kd">::</span><span class="n">Edward</span> <span class="n">Smith</span>
<span class="o">----------------------------------------------------------------------------</span>
</pre></div>
</div>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>asend</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em> :: Array containing data to send</p></li>
<li><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: Global cell indices with minimum and maximum values to send</p></li>
<li><p><strong>send_flag</strong><em> [</em><em>logical</em><em>,</em><em>out</em><em>]</em> :: Flag set if processor has passed data</p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code>, <a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>, <a class="reference internal" href="#f/coupler_module/cpl_graph_comm" title="f/coupler_module/cpl_graph_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_graph_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/myid_graph" title="f/coupler_module/myid_graph"><code class="xref f f-func docutils literal notranslate"><span class="pre">myid_graph()</span></code></a>, <a class="reference internal" href="#f/coupler_module/olap_mask" title="f/coupler_module/olap_mask"><code class="xref f f-func docutils literal notranslate"><span class="pre">olap_mask()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world" title="f/coupler_module/rank_world"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_world()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm" title="f/coupler_module/realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/ierr" title="f/coupler_module/ierr"><code class="xref f f-func docutils literal notranslate"><span class="pre">ierr()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">void()</span></code>, <a class="reference internal" href="#f/coupler_module/cpl_setup_complete" title="f/coupler_module/cpl_setup_complete"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_setup_complete()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm_name" title="f/coupler_module/realm_name"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm_name()</span></code></a>, <a class="reference internal" href="#f/coupler_module/myid_realm" title="f/coupler_module/myid_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">myid_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rootid_realm" title="f/coupler_module/rootid_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">rootid_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_intersect" title="f/coupler_module/rank_intersect"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_intersect()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_realm_intersection_comm" title="f/coupler_module/cpl_realm_intersection_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_realm_intersection_comm()</span></code></a>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_send_min" title="f/coupler/cpl_send_min"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_send_min()</span></code></a></p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_my_proc_portion" title="f/coupler/cpl_my_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_my_proc_portion()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_cart_coords" title="f/coupler/cpl_cart_coords"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cart_coords()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_proc_portion" title="f/coupler/cpl_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_proc_portion()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_no_cells" title="f/coupler/cpl_get_no_cells"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_no_cells()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_send_min">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_send_min</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">asend</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">send_flag</span></em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_send_min" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>asend</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em> :: Array containing data to send</p></li>
<li><p><strong>send_flag</strong><em> [</em><em>logical</em><em>,</em><em>out,</em><em>]</em> :: Flag set if processor has passed data</p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm" title="f/coupler_module/realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm()</span></code></a>)</p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_get_cnst_limits" title="f/coupler/cpl_get_cnst_limits"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_cnst_limits()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_bnry_limits" title="f/coupler/cpl_get_bnry_limits"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_bnry_limits()</span></code></a>, <a class="reference internal" href="#f/_/cpl_send_full" title="f/_/cpl_send_full"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_send_full()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_recv_full">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_recv_full</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">arecv</span></em>, <em class="sig-param"><span class="pre">limits</span></em>, <em class="sig-param"><span class="pre">recv_flag</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_recv_full" title="Permalink to this definition">¶</a></dt>
<dd><p>Receive data from to local grid from the associated ranks from the other
realm</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_recv</span><span class="p">(</span><span class="n">arecv</span><span class="p">,</span> <span class="n">limits</span><span class="p">,</span> <span class="n">recv_flag</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<ul class="simple">
<li><p>arecv</p>
<ul>
<li><p>Array of data to recv. Should be a four dimensional array allocated using the number of cells on the current processor between the limits. Size should be be obtained from <a class="reference external" href="#f/coupler/cpl_my_proc_portion">CPL_my_proc_portion(limits, portion)</a>.</p></li>
</ul>
</li>
<li><p>limits</p>
<ul>
<li><p>Limits in global cell coordinates, must be the same as corresponding send</p></li>
</ul>
</li>
</ul>
<p><strong>Outputs</strong></p>
<ul class="simple">
<li><p>recv_flag</p>
<ul>
<li><p>Returned flag which indicates success or failure of recv process</p></li>
</ul>
</li>
</ul>
<p><strong>Example</strong></p>
<div class="highlight-guess notranslate"><div class="highlight"><pre><span></span>call CPL_get_olap_limits(limits)
call CPL_my_proc_portion(limits, portion)
call CPL_get_no_cells(portion, Ncells)

!Coupled Recieve
allocate(A(3, Ncells(1), Ncells(2), Ncells(3)))
call CPL_recv(A, limits, recv_flag)
</pre></div>
</div>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>arecv</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>inout</em><em>]</em> :: Pre allocated array that recieves data</p></li>
<li><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: Global cell indices with minimum and maximum values to recv</p></li>
<li><p><strong>recv_flag</strong><em> [</em><em>logical</em><em>,</em><em>out</em><em>]</em> :: Flag set if processor has received data</p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code>, <a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_graph" title="f/coupler_module/rank_graph"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_graph()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>, <a class="reference internal" href="#f/coupler_module/cpl_graph_comm" title="f/coupler_module/cpl_graph_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_graph_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/myid_graph" title="f/coupler_module/myid_graph"><code class="xref f f-func docutils literal notranslate"><span class="pre">myid_graph()</span></code></a>, <a class="reference internal" href="#f/coupler_module/olap_mask" title="f/coupler_module/olap_mask"><code class="xref f f-func docutils literal notranslate"><span class="pre">olap_mask()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world" title="f/coupler_module/rank_world"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_world()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm" title="f/coupler_module/realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm_name" title="f/coupler_module/realm_name"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm_name()</span></code></a>, <a class="reference internal" href="#f/coupler_module/iblock_realm" title="f/coupler_module/iblock_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">iblock_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jblock_realm" title="f/coupler_module/jblock_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">jblock_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kblock_realm" title="f/coupler_module/kblock_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">kblock_realm()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">void()</span></code>, <a class="reference internal" href="#f/coupler_module/ierr" title="f/coupler_module/ierr"><code class="xref f f-func docutils literal notranslate"><span class="pre">ierr()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_intersect" title="f/coupler_module/rank_intersect"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_intersect()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_realm_intersection_comm" title="f/coupler_module/cpl_realm_intersection_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_realm_intersection_comm()</span></code></a>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_recv_min" title="f/coupler/cpl_recv_min"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_recv_min()</span></code></a></p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_cart_coords" title="f/coupler/cpl_cart_coords"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cart_coords()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_proc_portion" title="f/coupler/cpl_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_proc_portion()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_my_proc_portion" title="f/coupler/cpl_my_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_my_proc_portion()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_recv_min">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_recv_min</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">arecv</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">recv_flag</span></em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_recv_min" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>arecv</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>out</em><em>]</em></p></li>
<li><p><strong>recv_flag</strong><em> [</em><em>logical</em><em>,</em><em>out,</em><em>]</em> :: Flag set if processor has passed data</p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm" title="f/coupler_module/realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm()</span></code></a>)</p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_get_bnry_limits" title="f/coupler/cpl_get_bnry_limits"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_bnry_limits()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_cnst_limits" title="f/coupler/cpl_get_cnst_limits"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_cnst_limits()</span></code></a>, <a class="reference internal" href="#f/_/cpl_recv_full" title="f/_/cpl_recv_full"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_recv_full()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_swaphalos">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_swaphalos</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">a</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_swaphalos" title="Permalink to this definition">¶</a></dt>
<dd><p>Swap halos with adjacent processors on current realm cart comm</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_swaphalos</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<ul class="simple">
<li><p>A</p>
<ul>
<li><p>Array of data to swaphalo. Should be a four dimensional array allocated using the number of cells including one halos on the current processor. Size should be be obtained from <a class="reference external" href="#f/coupler/cpl_my_proc_portion">CPL_my_proc_portion(limits, portion)</a> with an extra halo on each side. This halo should have been used to collect overflow on current processor.</p></li>
</ul>
</li>
</ul>
<p><strong>Outputs</strong></p>
<ul class="simple">
<li><p>A</p>
<ul>
<li><p>Array of data with outer halo obtained from adjacent processes.</p></li>
</ul>
</li>
</ul>
<p><strong>Example</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="k">call </span><span class="n">CPL_get</span><span class="p">(</span><span class="n">icmax_olap</span><span class="o">=</span><span class="n">icmax_olap</span><span class="p">)</span>
<span class="k">call </span><span class="n">CPL_get_olap_limits</span><span class="p">(</span><span class="n">limits</span><span class="p">)</span>
<span class="k">call </span><span class="n">CPL_my_proc_portion</span><span class="p">(</span><span class="n">limits</span><span class="p">,</span> <span class="n">portion</span><span class="p">)</span>
<span class="k">call </span><span class="n">CPL_get_no_cells</span><span class="p">(</span><span class="n">portion</span><span class="p">,</span> <span class="n">Ncells</span><span class="p">)</span>

<span class="n">Setup</span> <span class="n">an</span> <span class="n">increasing</span> <span class="n">number</span> <span class="n">in</span> <span class="n">each</span> <span class="n">cell</span> <span class="n">in</span> <span class="mi">2</span><span class="n">D</span>
<span class="k">allocate</span><span class="p">(</span><span class="n">A</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">Ncells</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">Ncells</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span> <span class="n">Ncells</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="p">))</span>
<span class="n">A</span> <span class="o">=</span> <span class="mf">0.0d0</span>
<span class="k">do </span><span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">Ncells</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
<span class="k">do </span><span class="n">j</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">Ncells</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
<span class="k">do </span><span class="n">k</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">Ncells</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span>
    <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">portion</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">jj</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">portion</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="n">A</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">)</span> <span class="o">=</span> <span class="n">ii</span> <span class="o">+</span> <span class="n">jj</span><span class="o">*</span><span class="n">icmax_olap</span>
<span class="n">enddo</span>
<span class="n">enddo</span>
<span class="n">enddo</span>
<span class="k">call </span><span class="n">CPL_swaphalo</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</pre></div>
</div>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>a</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>inout</em><em>]</em> :: 4D Array of data with empty outer halo.</p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/cpl_cart_comm" title="f/coupler_module/cpl_cart_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cart_comm()</span></code></a>)</p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/establish_halo_cells" title="f/coupler/establish_halo_cells"><code class="xref f f-func docutils literal notranslate"><span class="pre">establish_halo_cells()</span></code></a>, <a class="reference internal" href="#f/coupler/heaviside" title="f/coupler/heaviside"><code class="xref f f-func docutils literal notranslate"><span class="pre">heaviside()</span></code></a>, <a class="reference internal" href="#f/coupler/updatefaces" title="f/coupler/updatefaces"><code class="xref f f-func docutils literal notranslate"><span class="pre">updatefaces()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/updatefaces">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">updatefaces</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">a</span></em>, <em class="sig-param"><span class="pre">n1</span></em>, <em class="sig-param"><span class="pre">n2</span></em>, <em class="sig-param"><span class="pre">n3</span></em>, <em class="sig-param"><span class="pre">nresults</span></em>, <em class="sig-param"><span class="pre">ixyz</span></em>, <em class="sig-param"><span class="pre">icomm_grid</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/updatefaces" title="Permalink to this definition">¶</a></dt>
<dd><blockquote>
<div><p>updatefaces –  Facilitate the MPI based exchange of data
Update face halo cells by passing to neighbours</p>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>a</strong> (,,*,*)<em> [</em><em>real</em><em>,</em><em>inout</em><em>]</em></p></li>
<li><p><strong>n1</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>n2</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>n3</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>nresults</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>ixyz</strong><em> [</em><em>integer</em><em>]</em></p></li>
<li><p><strong>icomm_grid</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_swaphalos" title="f/coupler/cpl_swaphalos"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_swaphalos()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/establish_surface_cells">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">establish_surface_cells</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">ncells</span></em>, <em class="sig-param"><span class="pre">nhb</span></em>, <em class="sig-param"><span class="pre">surfacecells</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/establish_surface_cells" title="Permalink to this definition">¶</a></dt>
<dd><p>Establish and store indices of cells which are on the outer domain
but not in the halo</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>ncells</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: Number of cells in x,y and z</p></li>
<li><p><strong>nhb</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: Number of halos in x,y and z</p></li>
<li><p><strong>surfacecells</strong> (,)<em> [</em><em>integer</em><em>,</em><em>out,allocatable</em><em>]</em> :: N by 3 array of Surface cells</p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/establish_halo_cells">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">establish_halo_cells</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">ncells</span></em>, <em class="sig-param"><span class="pre">halocells</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/establish_halo_cells" title="Permalink to this definition">¶</a></dt>
<dd><p>Establish and store indices of cells which are in the halo</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>ncells</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em> :: Number of cells in x,y and z</p></li>
<li><p><strong>halocells</strong> (,)<em> [</em><em>integer</em><em>,</em><em>out,allocatable</em><em>]</em> :: N by 3 array of halo cells</p></li>
</ul>
</dd>
<dt class="field-even">Called from</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_swaphalos" title="f/coupler/cpl_swaphalos"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_swaphalos()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/heaviside">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">heaviside</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">x</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/heaviside" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>x</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p>
</dd>
<dt class="field-even">Return</dt>
<dd class="field-even"><p><strong>heaviside</strong><em> [</em><em>real</em><em>]</em></p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_swaphalos" title="f/coupler/cpl_swaphalos"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_swaphalos()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_proc_extents">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_proc_extents</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">coord</span></em>, <em class="sig-param"><span class="pre">realm</span></em>, <em class="sig-param"><span class="pre">extents</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">ncells</span></em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_proc_extents" title="Permalink to this definition">¶</a></dt>
<dd><p>Gets maximum and minimum cells for processor coordinates</p>
<p><strong>Synopsis</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>CPL_proc_extents(coord,realm,extents,ncells)</p></li>
</ul>
</div></blockquote>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>coord</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>processor cartesian coordinate (3 x integer)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>realm</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>cfd_realm (1) or md_realm (2) (integer)</p></li>
</ul>
</div></blockquote>
</div></blockquote>
<dl class="simple">
<dt><strong>Inputs/Output</strong></dt><dd><ul class="simple">
<li><p>NONE</p></li>
</ul>
</dd>
</dl>
<p><strong>Output</strong></p>
<blockquote>
<div><ul>
<li><p>extents
- Six components array which defines processor extents</p>
<blockquote>
<div><p>xmin,xmax,ymin,ymax,zmin,zmax (6 x integer)</p>
</div></blockquote>
</li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>ncells</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em> :: <dl class="simple">
<dt>optional)</dt><dd><ul>
<li><p>number of cells on processor (integer)</p></li>
</ul>
</dd>
</dl>
</p></li>
<li><p><strong>coord</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>realm</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>extents</strong> (6)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code>, <a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmin_md" title="f/coupler_module/icpmin_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">icpmin_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmax_md" title="f/coupler_module/icpmax_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">icpmax_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmin_md" title="f/coupler_module/jcpmin_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcpmin_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmax_md" title="f/coupler_module/jcpmax_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcpmax_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmin_md" title="f/coupler_module/kcpmin_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcpmin_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmax_md" title="f/coupler_module/kcpmax_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcpmax_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmin_cfd" title="f/coupler_module/icpmin_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">icpmin_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmax_cfd" title="f/coupler_module/icpmax_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">icpmax_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmin_cfd" title="f/coupler_module/jcpmin_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcpmin_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmax_cfd" title="f/coupler_module/jcpmax_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcpmax_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmin_cfd" title="f/coupler_module/kcpmin_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcpmin_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmax_cfd" title="f/coupler_module/kcpmax_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcpmax_cfd()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_proc_portion" title="f/coupler/cpl_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_proc_portion()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_my_proc_extents" title="f/coupler/cpl_my_proc_extents"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_my_proc_extents()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_olap_extents">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_olap_extents</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">coord</span></em>, <em class="sig-param"><span class="pre">realm</span></em>, <em class="sig-param"><span class="pre">extents</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">ncells</span></em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_olap_extents" title="Permalink to this definition">¶</a></dt>
<dd><p>Get maximum and minimum cells for current communicator within
the overlapping region only</p>
<p><strong>Synopsis</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>CPL_olap_extents(coord,realm,extents,ncells)</p></li>
</ul>
</div></blockquote>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>coord</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>processor cartesian coordinate (3 x integer)</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>realm</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>cfd_realm (1) or md_realm (2) (integer)</p></li>
</ul>
</div></blockquote>
</div></blockquote>
<dl class="simple">
<dt><strong>Inputs/Output</strong></dt><dd><ul class="simple">
<li><p>NONE</p></li>
</ul>
</dd>
</dl>
<p><strong>Output</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>extents</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>Six components array which defines processor extents within
the overlap region only: xmin,xmax,ymin,ymax,zmin,zmax (6 x integer)</p></li>
</ul>
</div></blockquote>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>ncells</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em> :: <dl class="simple">
<dt>optional)</dt><dd><ul>
<li><p>number of cells on processor (integer)</p></li>
</ul>
</dd>
</dl>
</p></li>
<li><p><strong>coord</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>realm</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>extents</strong> (6)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code>, <a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmin_md" title="f/coupler_module/icpmin_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">icpmin_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmax_md" title="f/coupler_module/icpmax_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">icpmax_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmin_md" title="f/coupler_module/jcpmin_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcpmin_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmax_md" title="f/coupler_module/jcpmax_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcpmax_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmin_md" title="f/coupler_module/kcpmin_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcpmin_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmax_md" title="f/coupler_module/kcpmax_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcpmax_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmin_cfd" title="f/coupler_module/icpmin_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">icpmin_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icpmax_cfd" title="f/coupler_module/icpmax_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">icpmax_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmin_cfd" title="f/coupler_module/jcpmin_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcpmin_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcpmax_cfd" title="f/coupler_module/jcpmax_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcpmax_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmin_cfd" title="f/coupler_module/kcpmin_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcpmin_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcpmax_cfd" title="f/coupler_module/kcpmax_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcpmax_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmin_olap" title="f/coupler_module/icmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmax_olap" title="f/coupler_module/icmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmin_olap" title="f/coupler_module/jcmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmax_olap" title="f/coupler_module/jcmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmin_olap" title="f/coupler_module/kcmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmax_olap" title="f/coupler_module/kcmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmax_olap()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_proc_portion">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_proc_portion</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">coord</span></em>, <em class="sig-param"><span class="pre">realm</span></em>, <em class="sig-param"><span class="pre">limits</span></em>, <em class="sig-param"><span class="pre">portion</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">ncells</span></em><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_proc_portion" title="Permalink to this definition">¶</a></dt>
<dd><p>Get maximum and minimum cell indices, i.e. the ‘portion’, of the
input cell extents ‘limits’ that is contributed by the processor
specified by processor coord.</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.</p>
<blockquote>
<div><ul class="simple">
<li><p>Note: limits(6) and portion(6) are of the form: (xmin,xmax,ymin,ymax,zmin,zmax)</p></li>
</ul>
</div></blockquote>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_proc_portion</span><span class="p">(</span><span class="n">coord</span><span class="p">,</span> <span class="n">realm</span><span class="p">,</span> <span class="n">limits</span><span class="p">,</span> <span class="n">portion</span><span class="p">,</span> <span class="n">ncells</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>coord</p>
<ul>
<li><p>processor cartesian coordinate (3 x integer)</p></li>
</ul>
</li>
<li><p>realm</p>
<ul>
<li><p>cfd_realm (1) or md_realm (2) (integer)</p></li>
</ul>
</li>
<li><p>limits</p>
<ul>
<li><p>Array of cell extents that specify the input region.</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Outputs</strong></p>
<blockquote>
<div><ul>
<li><p>portion
- Array of cell extents that define the local processor’s</p>
<blockquote>
<div><p>contribution to the input region ‘limits’.</p>
</div></blockquote>
</li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>ncells</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em> :: <dl class="simple">
<dt>optional)</dt><dd><ul>
<li><p>number of cells in portion (integer)</p></li>
</ul>
</dd>
</dl>
</p></li>
<li><p><strong>coord</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>realm</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>portion</strong> (6)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code>, <a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<code class="xref f f-func docutils literal notranslate"><span class="pre">void()</span></code>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_scatter" title="f/coupler/cpl_scatter"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_scatter()</span></code></a>, <a class="reference internal" href="#f/_/cpl_send_full" title="f/_/cpl_send_full"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_send_full()</span></code></a>, <a class="reference internal" href="#f/_/cpl_recv_full" title="f/_/cpl_recv_full"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_recv_full()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_my_proc_portion" title="f/coupler/cpl_my_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_my_proc_portion()</span></code></a></p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_proc_extents" title="f/coupler/cpl_proc_extents"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_proc_extents()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_my_proc_portion">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_my_proc_portion</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">limits</span></em>, <em class="sig-param"><span class="pre">portion</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_my_proc_portion" title="Permalink to this definition">¶</a></dt>
<dd><p>Get maximum and minimum cell indices, i.e. the ‘portion’, of the
input cell extents ‘limits’ that is contributed by calling processor.</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.</p>
<blockquote>
<div><ul class="simple">
<li><p>Note: limits(6) and portion(6) are of the form: (xmin,xmax,ymin,ymax,zmin,zmax)</p></li>
</ul>
</div></blockquote>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_my_proc_portion</span><span class="p">(</span><span class="n">limits</span><span class="p">,</span> <span class="n">portion</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>limits</p>
<ul>
<li><p>Array of cell extents that specify the input region.</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Outputs</strong></p>
<blockquote>
<div><ul>
<li><p>portion
- Array of cell extents that define the local processor’s</p>
<blockquote>
<div><p>part of the input region ‘limits’.</p>
</div></blockquote>
</li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>portion</strong> (6)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/rank_cart" title="f/coupler_module/rank_cart"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_cart()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm" title="f/coupler_module/realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank2coord_cfd" title="f/coupler_module/rank2coord_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank2coord_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank2coord_md" title="f/coupler_module/rank2coord_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank2coord_md()</span></code></a>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/_/cpl_send_full" title="f/_/cpl_send_full"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_send_full()</span></code></a>, <a class="reference internal" href="#f/_/cpl_recv_full" title="f/_/cpl_recv_full"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_recv_full()</span></code></a>, <a class="reference internal" href="#f/_/cpl_get_arrays" title="f/_/cpl_get_arrays"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_arrays()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">rwrite_arrays()</span></code></p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_proc_portion" title="f/coupler/cpl_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_proc_portion()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_my_proc_extents">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_my_proc_extents</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">extents</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_my_proc_extents" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>extents</strong> (6)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/rank_cart" title="f/coupler_module/rank_cart"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_cart()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm" title="f/coupler_module/realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank2coord_cfd" title="f/coupler_module/rank2coord_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank2coord_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank2coord_md" title="f/coupler_module/rank2coord_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank2coord_md()</span></code></a>)</p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_proc_extents" title="f/coupler/cpl_proc_extents"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_proc_extents()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_cart_coords">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_cart_coords</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">comm</span></em>, <em class="sig-param"><span class="pre">rank_bn</span></em>, <em class="sig-param"><span class="pre">realm</span></em>, <em class="sig-param"><span class="pre">maxdims</span></em>, <em class="sig-param"><span class="pre">coords</span></em>, <em class="sig-param"><span class="pre">ierr</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_cart_coords" title="Permalink to this definition">¶</a></dt>
<dd><p>Determines process coords in appropriate realm’s cartesian topology
given a rank in any communicator</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_Cart_coords</span><span class="p">(</span><span class="n">COMM</span><span class="p">,</span> <span class="n">rank</span><span class="p">,</span> <span class="n">realm</span><span class="p">,</span> <span class="n">maxdims</span><span class="p">,</span> <span class="n">coords</span><span class="p">,</span> <span class="n">ierr</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>COMM</p>
<ul>
<li><p>communicator with cartesian structure (handle)</p></li>
</ul>
</li>
<li><p>rank</p>
<ul>
<li><p>rank of a process within group of comm (integer) NOTE fortran convention rank=1 to nproc</p></li>
</ul>
</li>
<li><p>realm</p>
<ul>
<li><p>cfd_realm (1) or md_realm (2) (integer)</p></li>
</ul>
</li>
<li><p>maxdims</p>
<ul>
<li><p>length of vector coords in the calling program (integer)</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<p><strong>Outputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>coords</p>
<ul>
<li><p>integer array (of size ndims) containing the Cartesian coordinates
of specified process (integer)</p></li>
</ul>
</li>
<li><p>ierr</p>
<ul>
<li><p>error flag</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>comm</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>rank_bn</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>realm</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>maxdims</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>coords</strong> (maxdims)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
<li><p><strong>ierr</strong><em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/cpl_world_comm" title="f/coupler_module/cpl_world_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_world_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_realm_comm" title="f/coupler_module/cpl_realm_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_realm_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_inter_comm" title="f/coupler_module/cpl_inter_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_inter_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_cart_comm" title="f/coupler_module/cpl_cart_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cart_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_olap_comm" title="f/coupler_module/cpl_olap_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_olap_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_graph_comm" title="f/coupler_module/cpl_graph_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_graph_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_realm_intersection_comm" title="f/coupler_module/cpl_realm_intersection_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_realm_intersection_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world2rank_mdcart" title="f/coupler_module/rank_world2rank_mdcart"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_world2rank_mdcart()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world2rank_cfdcart" title="f/coupler_module/rank_world2rank_cfdcart"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_world2rank_cfdcart()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_mdrealm2rank_world" title="f/coupler_module/rank_mdrealm2rank_world"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_mdrealm2rank_world()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_cfdrealm2rank_world" title="f/coupler_module/rank_cfdrealm2rank_world"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_cfdrealm2rank_world()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_olap2rank_world" title="f/coupler_module/rank_olap2rank_world"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_olap2rank_world()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_graph2rank_world" title="f/coupler_module/rank_graph2rank_world"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_graph2rank_world()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank2coord_cfd" title="f/coupler_module/rank2coord_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank2coord_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank2coord_md" title="f/coupler_module/rank2coord_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank2coord_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/coupler_error_cart_comm" title="f/coupler_module/coupler_error_cart_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">coupler_error_cart_comm()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">void()</span></code>, <a class="reference internal" href="#f/coupler_module/nproc_cfd" title="f/coupler_module/nproc_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">nproc_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/nproc_md" title="f/coupler_module/nproc_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">nproc_md()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_scatter" title="f/coupler/cpl_scatter"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_scatter()</span></code></a>, <a class="reference internal" href="#f/_/cpl_send_full" title="f/_/cpl_send_full"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_send_full()</span></code></a>, <a class="reference internal" href="#f/_/cpl_recv_full" title="f/_/cpl_recv_full"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_recv_full()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_get_rank">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_get_rank</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">comm</span></em>, <em class="sig-param"><span class="pre">rank_bn</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_get_rank" title="Permalink to this definition">¶</a></dt>
<dd><p>Return rank of current processor in specified COMM</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_get_rank</span><span class="p">(</span><span class="n">COMM</span><span class="p">,</span> <span class="n">rank</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Inputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>COMM
- communicator with cartesian structure (handle)</p></li>
</ul>
</div></blockquote>
<p><strong>Outputs</strong></p>
<blockquote>
<div><ul>
<li><p>rank
- rank of a process within group of comm (integer)</p>
<blockquote>
<div><p>NOTE fortran convention rank=1 to nproc</p>
</div></blockquote>
</li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>comm</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>rank_bn</strong><em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/cpl_world_comm" title="f/coupler_module/cpl_world_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_world_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_realm_comm" title="f/coupler_module/cpl_realm_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_realm_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_inter_comm" title="f/coupler_module/cpl_inter_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_inter_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_cart_comm" title="f/coupler_module/cpl_cart_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cart_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_olap_comm" title="f/coupler_module/cpl_olap_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_olap_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_graph_comm" title="f/coupler_module/cpl_graph_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_graph_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cpl_realm_intersection_comm" title="f/coupler_module/cpl_realm_intersection_comm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_realm_intersection_comm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world" title="f/coupler_module/rank_world"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_world()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_realm" title="f/coupler_module/rank_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_cart" title="f/coupler_module/rank_cart"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_cart()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_olap" title="f/coupler_module/rank_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_graph" title="f/coupler_module/rank_graph"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_graph()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_overlap">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_overlap</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_overlap" title="Permalink to this definition">¶</a></dt>
<dd><p>Check if current processor is in the overlap region</p>
<p><strong>Synopsis</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>CPL_olap_check()</p></li>
</ul>
</div></blockquote>
<p><strong>Inputs</strong> Parameters</p>
<blockquote>
<div><blockquote>
<div><ul class="simple">
<li><p>NONE</p></li>
</ul>
</div></blockquote>
<ul class="simple">
<li><p>Returns</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>CPL_olap_check</p></li>
</ul>
<blockquote>
<div><ul class="simple">
<li><p>True if calling processor is in the overlap region
and false otherwise</p></li>
</ul>
</div></blockquote>
</div></blockquote>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Return</dt>
<dd class="field-odd"><p><strong>p</strong><em> [</em><em>logical</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/olap_mask" title="f/coupler_module/olap_mask"><code class="xref f f-func docutils literal notranslate"><span class="pre">olap_mask()</span></code></a>, <a class="reference internal" href="#f/coupler_module/rank_world" title="f/coupler_module/rank_world"><code class="xref f f-func docutils literal notranslate"><span class="pre">rank_world()</span></code></a>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_gather" title="f/coupler/cpl_gather"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_gather()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_scatter" title="f/coupler/cpl_scatter"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_scatter()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_get">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_get</span></span><span class="sig-paren">(</span><span class="optional">[</span><em class="sig-param"><span class="pre">icmax_olap</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">icmin_olap</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">jcmax_olap</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">jcmin_olap</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">kcmax_olap</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">kcmin_olap</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">density_cfd</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">density_md</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">dt_cfd</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">dt_md</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">dx</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">dy</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">dz</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">ncx</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">ncy</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">ncz</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">xg</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">yg</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">zg</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">xl_md</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">xl_cfd</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">yl_md</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">yl_cfd</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">zl_md</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">zl_cfd</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">npx_md</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">npy_md</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">npz_md</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">npx_cfd</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">npy_cfd</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">npz_cfd</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">constraint_algo</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">constraint_cvflag</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">constraint_ot</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">constraint_ncer</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">constraint_flekkoy</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">constraint_off</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">constraint_cv</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">icmin_cnst</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">icmax_cnst</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">jcmin_cnst</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">jcmax_cnst</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">kcmin_cnst</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">kcmax_cnst</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">md_cfd_match_cellsize</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">staggered_averages</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">cpl_cfd_bc_slice</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">cpl_md_bc_slice</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">nsteps_md</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">nsteps_cfd</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">nsteps_coupled</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">cpl_cfd_bc_x</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">cpl_cfd_bc_y</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">cpl_cfd_bc_z</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">timestep_ratio</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">comm_style</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">sendtype_cfd_to_md</span></em><span class="optional">[</span>, <em class="sig-param"><span class="pre">sendtype_md_to_cfd</span></em><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="optional">]</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_get" title="Permalink to this definition">¶</a></dt>
<dd><p>Wrapper to retrieve (read only) parameters from the coupler_module
Note - this ensures all variable in the coupler are protected
from corruption by either CFD or MD codes</p>
<p><strong>Synopsis</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>CPL_get([see coupler_module])</p></li>
</ul>
</div></blockquote>
<p><strong>Input</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>NONE</p></li>
</ul>
</div></blockquote>
<p><strong>Output</strong></p>
<blockquote>
<div><blockquote>
<div><ul class="simple">
<li><p>See below</p></li>
</ul>
</div></blockquote>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>icmax_olap</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>icmin_olap</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>jcmax_olap</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>jcmin_olap</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>kcmax_olap</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>kcmin_olap</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>density_cfd</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>density_md</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>dt_cfd</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>dt_md</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>dx</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>dy</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>dz</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>ncx</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>ncy</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>ncz</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>xg</strong> (,,*)<em> [</em><em>real</em><em>,</em><em>out,allocatable</em><em>]</em></p></li>
<li><p><strong>yg</strong> (,,*)<em> [</em><em>real</em><em>,</em><em>out,allocatable</em><em>]</em></p></li>
<li><p><strong>zg</strong> (,,*)<em> [</em><em>real</em><em>,</em><em>out,allocatable</em><em>]</em></p></li>
<li><p><strong>xl_md</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>xl_cfd</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>yl_md</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>yl_cfd</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>zl_md</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>zl_cfd</strong><em> [</em><em>real</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>npx_md</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>npy_md</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>npz_md</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>npx_cfd</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>npy_cfd</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>npz_cfd</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>constraint_algo</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>constraint_cvflag</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>constraint_ot</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>constraint_ncer</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>constraint_flekkoy</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>constraint_off</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>constraint_cv</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>icmin_cnst</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>icmax_cnst</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>jcmin_cnst</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>jcmax_cnst</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>kcmin_cnst</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>kcmax_cnst</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>md_cfd_match_cellsize</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>staggered_averages</strong> (3)<em> [</em><em>logical</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>cpl_cfd_bc_slice</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>cpl_md_bc_slice</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>nsteps_md</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>nsteps_cfd</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>nsteps_coupled</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>cpl_cfd_bc_x</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>cpl_cfd_bc_y</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>cpl_cfd_bc_z</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>timestep_ratio</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>comm_style</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>sendtype_cfd_to_md</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
<li><p><strong>sendtype_md_to_cfd</strong><em> [</em><em>integer</em><em>,</em><em>out,</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<code class="xref f f-func docutils literal notranslate"><span class="pre">icmax_olap_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">icmax_olap_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">icmin_olap_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">icmin_olap_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">jcmax_olap_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">jcmax_olap_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">jcmin_olap_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">jcmin_olap_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">kcmax_olap_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">kcmax_olap_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">kcmin_olap_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">kcmin_olap_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">density_cfd_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">density_cfd_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">density_md_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">density_md_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">dt_cfd_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">dt_cfd_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">dt_md_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">dt_md_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">dx_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">dx_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">dy_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">dy_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">dz_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">dz_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">ncx_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">ncx_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">ncy_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">ncy_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">ncz_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">ncz_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">xl_md_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">xl_md_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">yl_md_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">yl_md_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">zl_md_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">zl_md_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">xl_cfd_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">xl_cfd_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">yl_cfd_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">yl_cfd_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">zl_cfd_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">zl_cfd_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">npx_md_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">npx_md_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">npy_md_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">npy_md_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">npz_md_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">npz_md_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">npx_cfd_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">npx_cfd_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">npy_cfd_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">npy_cfd_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">npz_cfd_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">npz_cfd_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">xg_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">xg_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">yg_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">yg_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">zg_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">zg_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">timestep_ratio_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">timestep_ratio_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">md_cfd_match_cellsize_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">md_cfd_match_cellsize_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">staggered_averages_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">staggered_averages_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_algo_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_algo_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_cvflag_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_cvflag_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_ot_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_ot_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_ncer_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_ncer_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_flekkoy_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_flekkoy_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_cv_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_cv_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_off_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">constraint_off_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">icmin_cnst_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">icmin_cnst_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">icmax_cnst_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">icmax_cnst_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">jcmin_cnst_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">jcmin_cnst_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">jcmax_cnst_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">jcmax_cnst_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">kcmin_cnst_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">kcmin_cnst_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">kcmax_cnst_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">kcmax_cnst_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cfd_bc_slice_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cfd_bc_slice_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_md_bc_slice_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_md_bc_slice_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">nsteps_md_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">nsteps_md_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">nsteps_cfd_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">nsteps_cfd_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">nsteps_coupled_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">nsteps_coupled_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cfd_bc_x_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cfd_bc_x_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cfd_bc_y_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cfd_bc_y_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cfd_bc_z_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cfd_bc_z_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">comm_style_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">comm_style_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">comm_style_send_recv_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">comm_style_send_recv_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">comm_style_gath_scat_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">comm_style_gath_scat_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">sendtype_cfd_to_md_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">sendtype_cfd_to_md_()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">sendtype_md_to_cfd_()</span></code> =&gt; <code class="xref f f-func docutils literal notranslate"><span class="pre">sendtype_md_to_cfd_()</span></code>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_meshgrid" title="f/coupler/cpl_meshgrid"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_meshgrid()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_comm_style">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_comm_style</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_comm_style" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Return</dt>
<dd class="field-odd"><p><strong>cpl_comm_style</strong><em> [</em><em>integer</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/comm_style" title="f/coupler_module/comm_style"><code class="xref f f-func docutils literal notranslate"><span class="pre">comm_style()</span></code></a>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_realm">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_realm</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_realm" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Return</dt>
<dd class="field-odd"><p><strong>cpl_realm</strong><em> [</em><em>integer</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/realm" title="f/coupler_module/realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm()</span></code></a>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_meshgrid">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_meshgrid</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">xg</span></em>, <em class="sig-param"><span class="pre">yg</span></em>, <em class="sig-param"><span class="pre">zg</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_meshgrid" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>xg</strong> (,,*)<em> [</em><em>real</em><em>,</em><em>out,allocatable</em><em>]</em></p></li>
<li><p><strong>yg</strong> (,,*)<em> [</em><em>real</em><em>,</em><em>out,allocatable</em><em>]</em></p></li>
<li><p><strong>zg</strong> (,,*)<em> [</em><em>real</em><em>,</em><em>out,allocatable</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_get" title="f/coupler/cpl_get"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_map_md2cfd_coord">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_map_md2cfd_coord</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">coord_md</span></em>, <em class="sig-param"><span class="pre">coord_cfd</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_map_md2cfd_coord" title="Permalink to this definition">¶</a></dt>
<dd><blockquote>
<div><p>Map global MD position to global CFD coordinate frame</p>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>coord_md</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>coord_cfd</strong> (3)<em> [</em><em>real</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Return</dt>
<dd class="field-even"><p><strong>valid_coord</strong><em> [</em><em>logical</em><em>]</em></p>
</dd>
<dt class="field-odd">Use </dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/xl_md" title="f/coupler_module/xl_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">xl_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/xg" title="f/coupler_module/xg"><code class="xref f f-func docutils literal notranslate"><span class="pre">xg()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmin_olap" title="f/coupler_module/icmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmax_olap" title="f/coupler_module/icmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/yl_md" title="f/coupler_module/yl_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">yl_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/yg" title="f/coupler_module/yg"><code class="xref f f-func docutils literal notranslate"><span class="pre">yg()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmin_olap" title="f/coupler_module/jcmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmax_olap" title="f/coupler_module/jcmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/zl_md" title="f/coupler_module/zl_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">zl_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/zg" title="f/coupler_module/zg"><code class="xref f f-func docutils literal notranslate"><span class="pre">zg()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmin_olap" title="f/coupler_module/kcmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmax_olap" title="f/coupler_module/kcmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/x_orig_md" title="f/coupler_module/x_orig_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">x_orig_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/y_orig_md" title="f/coupler_module/y_orig_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">y_orig_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/z_orig_md" title="f/coupler_module/z_orig_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">z_orig_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/x_orig_cfd" title="f/coupler_module/x_orig_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">x_orig_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/y_orig_cfd" title="f/coupler_module/y_orig_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">y_orig_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/z_orig_cfd" title="f/coupler_module/z_orig_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">z_orig_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/xl_cfd" title="f/coupler_module/xl_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">xl_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/yl_cfd" title="f/coupler_module/yl_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">yl_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/zl_cfd" title="f/coupler_module/zl_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">zl_cfd()</span></code></a>)</p>
</dd>
<dt class="field-even">Called from</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_md2cfd" title="f/coupler/cpl_md2cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_md2cfd()</span></code></a></p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/is_coord_inside" title="f/coupler/is_coord_inside"><code class="xref f f-func docutils literal notranslate"><span class="pre">is_coord_inside()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_map_cfd2md_coord">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_map_cfd2md_coord</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">coord_cfd</span></em>, <em class="sig-param"><span class="pre">coord_md</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_map_cfd2md_coord" title="Permalink to this definition">¶</a></dt>
<dd><p>Map global CFD position in global MD coordinate frame</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>coord_cfd</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>coord_md</strong> (3)<em> [</em><em>real</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Return</dt>
<dd class="field-even"><p><strong>valid_coord</strong><em> [</em><em>logical</em><em>]</em></p>
</dd>
<dt class="field-odd">Use </dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/xl_md" title="f/coupler_module/xl_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">xl_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/xg" title="f/coupler_module/xg"><code class="xref f f-func docutils literal notranslate"><span class="pre">xg()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmin_olap" title="f/coupler_module/icmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmax_olap" title="f/coupler_module/icmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/yl_md" title="f/coupler_module/yl_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">yl_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/yg" title="f/coupler_module/yg"><code class="xref f f-func docutils literal notranslate"><span class="pre">yg()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmin_olap" title="f/coupler_module/jcmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmax_olap" title="f/coupler_module/jcmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/zl_md" title="f/coupler_module/zl_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">zl_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/zg" title="f/coupler_module/zg"><code class="xref f f-func docutils literal notranslate"><span class="pre">zg()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmin_olap" title="f/coupler_module/kcmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmax_olap" title="f/coupler_module/kcmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/x_orig_md" title="f/coupler_module/x_orig_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">x_orig_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/y_orig_md" title="f/coupler_module/y_orig_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">y_orig_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/z_orig_md" title="f/coupler_module/z_orig_md"><code class="xref f f-func docutils literal notranslate"><span class="pre">z_orig_md()</span></code></a>, <a class="reference internal" href="#f/coupler_module/x_orig_cfd" title="f/coupler_module/x_orig_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">x_orig_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/y_orig_cfd" title="f/coupler_module/y_orig_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">y_orig_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/z_orig_cfd" title="f/coupler_module/z_orig_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">z_orig_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/xl_cfd" title="f/coupler_module/xl_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">xl_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/yl_cfd" title="f/coupler_module/yl_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">yl_cfd()</span></code></a>, <a class="reference internal" href="#f/coupler_module/zl_cfd" title="f/coupler_module/zl_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">zl_cfd()</span></code></a>)</p>
</dd>
<dt class="field-even">Called from</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_cfd2md" title="f/coupler/cpl_cfd2md"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_cfd2md()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_map_cell2coord" title="f/coupler/cpl_map_cell2coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_cell2coord()</span></code></a></p>
</dd>
<dt class="field-odd">Call to</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/is_coord_inside" title="f/coupler/is_coord_inside"><code class="xref f f-func docutils literal notranslate"><span class="pre">is_coord_inside()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_md2cfd">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_md2cfd</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">coord_md</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_md2cfd" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>coord_md</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p>
</dd>
<dt class="field-even">Return</dt>
<dd class="field-even"><p><strong>coord_cfd</strong> (3)<em> [</em><em>real</em><em>]</em></p>
</dd>
<dt class="field-odd">Use </dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>)</p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_map_md2cfd_coord" title="f/coupler/cpl_map_md2cfd_coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_md2cfd_coord()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_cfd2md">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_cfd2md</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">coord_cfd</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_cfd2md" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>coord_cfd</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p>
</dd>
<dt class="field-even">Return</dt>
<dd class="field-even"><p><strong>coord_md</strong> (3)<em> [</em><em>real</em><em>]</em></p>
</dd>
<dt class="field-odd">Use </dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>)</p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_map_cfd2md_coord" title="f/coupler/cpl_map_cfd2md_coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_cfd2md_coord()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_map_cell2coord">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_map_cell2coord</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">i</span></em>, <em class="sig-param"><span class="pre">j</span></em>, <em class="sig-param"><span class="pre">k</span></em>, <em class="sig-param"><span class="pre">coord_xyz</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_map_cell2coord" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>i</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>j</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>k</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>coord_xyz</strong> (3)<em> [</em><em>real</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/xg" title="f/coupler_module/xg"><code class="xref f f-func docutils literal notranslate"><span class="pre">xg()</span></code></a>, <a class="reference internal" href="#f/coupler_module/yg" title="f/coupler_module/yg"><code class="xref f f-func docutils literal notranslate"><span class="pre">yg()</span></code></a>, <a class="reference internal" href="#f/coupler_module/zg" title="f/coupler_module/zg"><code class="xref f f-func docutils literal notranslate"><span class="pre">zg()</span></code></a>, <a class="reference internal" href="#f/coupler_module/realm" title="f/coupler_module/realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/ncx" title="f/coupler_module/ncx"><code class="xref f f-func docutils literal notranslate"><span class="pre">ncx()</span></code></a>, <a class="reference internal" href="#f/coupler_module/ncy" title="f/coupler_module/ncy"><code class="xref f f-func docutils literal notranslate"><span class="pre">ncy()</span></code></a>, <a class="reference internal" href="#f/coupler_module/ncz" title="f/coupler_module/ncz"><code class="xref f f-func docutils literal notranslate"><span class="pre">ncz()</span></code></a>, <a class="reference internal" href="#f/coupler_module/md_realm" title="f/coupler_module/md_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">md_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/cfd_realm" title="f/coupler_module/cfd_realm"><code class="xref f f-func docutils literal notranslate"><span class="pre">cfd_realm()</span></code></a>, <a class="reference internal" href="#f/coupler_module/maxgridsize" title="f/coupler_module/maxgridsize"><code class="xref f f-func docutils literal notranslate"><span class="pre">maxgridsize()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_map_coord2cell" title="f/coupler/cpl_map_coord2cell"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_coord2cell()</span></code></a></p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_get_olap_limits" title="f/coupler/cpl_get_olap_limits"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_olap_limits()</span></code></a>, <a class="reference internal" href="#f/coupler/is_cell_inside" title="f/coupler/is_cell_inside"><code class="xref f f-func docutils literal notranslate"><span class="pre">is_cell_inside()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_map_cfd2md_coord" title="f/coupler/cpl_map_cfd2md_coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_cfd2md_coord()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_map_coord2cell">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_map_coord2cell</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">x</span></em>, <em class="sig-param"><span class="pre">y</span></em>, <em class="sig-param"><span class="pre">z</span></em>, <em class="sig-param"><span class="pre">cell_ijk</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_map_coord2cell" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>x</strong><em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>y</strong><em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>z</strong><em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>cell_ijk</strong> (3)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Return</dt>
<dd class="field-even"><p><strong>ret</strong><em> [</em><em>logical</em><em>]</em></p>
</dd>
<dt class="field-odd">Use </dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/dx" title="f/coupler_module/dx"><code class="xref f f-func docutils literal notranslate"><span class="pre">dx()</span></code></a>, <a class="reference internal" href="#f/coupler_module/dy" title="f/coupler_module/dy"><code class="xref f f-func docutils literal notranslate"><span class="pre">dy()</span></code></a>, <a class="reference internal" href="#f/coupler_module/dz" title="f/coupler_module/dz"><code class="xref f f-func docutils literal notranslate"><span class="pre">dz()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmin_olap" title="f/coupler_module/icmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmin_olap" title="f/coupler_module/jcmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmin_olap" title="f/coupler_module/kcmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmax_olap" title="f/coupler_module/icmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmax_olap" title="f/coupler_module/jcmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmax_olap" title="f/coupler_module/kcmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmax_olap()</span></code></a>)</p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_map_cell2coord" title="f/coupler/cpl_map_cell2coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_cell2coord()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_olap_limits" title="f/coupler/cpl_get_olap_limits"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_olap_limits()</span></code></a>, <a class="reference internal" href="#f/coupler/is_cell_inside" title="f/coupler/is_cell_inside"><code class="xref f f-func docutils literal notranslate"><span class="pre">is_cell_inside()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_get_no_cells">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_get_no_cells</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">limits</span></em>, <em class="sig-param"><span class="pre">no_cells</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_get_no_cells" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>no_cells</strong> (3)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Called from</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/_/cpl_send_full" title="f/_/cpl_send_full"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_send_full()</span></code></a>, <a class="reference internal" href="#f/_/cpl_get_arrays" title="f/_/cpl_get_arrays"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_arrays()</span></code></a>, <code class="xref f f-func docutils literal notranslate"><span class="pre">rwrite_arrays()</span></code></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_map_glob2loc_cell">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_map_glob2loc_cell</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">limits</span></em>, <em class="sig-param"><span class="pre">glob_cell</span></em>, <em class="sig-param"><span class="pre">loc_cell</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_map_glob2loc_cell" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>glob_cell</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>loc_cell</strong> (3)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Return</dt>
<dd class="field-even"><p><strong>ret</strong><em> [</em><em>logical</em><em>]</em></p>
</dd>
<dt class="field-odd">Use </dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<code class="xref f f-func docutils literal notranslate"><span class="pre">void()</span></code>, <code class="xref f f-func docutils literal notranslate"><span class="pre">error_abort()</span></code>)</p>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/is_cell_inside" title="f/coupler/is_cell_inside"><code class="xref f f-func docutils literal notranslate"><span class="pre">is_cell_inside()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_get_olap_limits">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_get_olap_limits</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">limits</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_get_olap_limits" title="Permalink to this definition">¶</a></dt>
<dd><p>Get limits of overlap region as cell indices in global coordinate system,
these are as specified in the input file (COUPLER.in).</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.
- Note: limits(6) are of the form: (xmin,xmax,ymin,ymax,zmin,zmax)</p>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_get_olap_limits</span><span class="p">(</span><span class="n">limits</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Outputs</strong></p>
<ul class="simple">
<li><p>limits</p>
<ul>
<li><p>Array of cell extents that specify the overlap region.</p></li>
</ul>
</li>
</ul>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/icmin_olap" title="f/coupler_module/icmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmax_olap" title="f/coupler_module/icmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmin_olap" title="f/coupler_module/jcmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmax_olap" title="f/coupler_module/jcmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmax_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmin_olap" title="f/coupler_module/kcmin_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmin_olap()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmax_olap" title="f/coupler_module/kcmax_olap"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmax_olap()</span></code></a>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_map_cell2coord" title="f/coupler/cpl_map_cell2coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_cell2coord()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_map_coord2cell" title="f/coupler/cpl_map_coord2cell"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_coord2cell()</span></code></a>, <a class="reference internal" href="#f/_/cpl_get_arrays" title="f/_/cpl_get_arrays"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_arrays()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_get_cnst_limits">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_get_cnst_limits</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">limits</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_get_cnst_limits" title="Permalink to this definition">¶</a></dt>
<dd><p>Get limits of constraint region as cell indices in global coordinate system,
these are as specified in the input file (COUPLER.in) and must be in the
overlap region.</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.</p>
<blockquote>
<div><ul class="simple">
<li><p>Note: limits(6) are of the form: (xmin,xmax,ymin,ymax,zmin,zmax)</p></li>
</ul>
</div></blockquote>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_get_cnst_limits</span><span class="p">(</span><span class="n">limits</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Outputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>limits</p>
<ul>
<li><p>Array of cell extents that specify the constrained region.</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/icmin_cnst" title="f/coupler_module/icmin_cnst"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmin_cnst()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmax_cnst" title="f/coupler_module/icmax_cnst"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmax_cnst()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmin_cnst" title="f/coupler_module/jcmin_cnst"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmin_cnst()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmax_cnst" title="f/coupler_module/jcmax_cnst"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmax_cnst()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmin_cnst" title="f/coupler_module/kcmin_cnst"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmin_cnst()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmax_cnst" title="f/coupler_module/kcmax_cnst"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmax_cnst()</span></code></a>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_send_min" title="f/coupler/cpl_send_min"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_send_min()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_recv_min" title="f/coupler/cpl_recv_min"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_recv_min()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_get_bnry_limits">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_get_bnry_limits</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">limits</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_get_bnry_limits" title="Permalink to this definition">¶</a></dt>
<dd><p>Get limits of boundary region as cell indices in global coordinate system,
these are as specified in the input file (COUPLER.in) and must be in the
overlap region.</p>
<p><strong>Remarks</strong></p>
<p>Assumes the coupler has been initialised with <a class="reference external" href="#f/_/cpl_init">CPL_init</a> and
topological mapping has been setup using either <a class="reference external" href="#f/_/cpl_setup_md">CPL_setup_md</a>
or <a class="reference external" href="#f/_/cpl_setup_cfd">CPL_setup_cfd</a> as appropriate.</p>
<blockquote>
<div><ul class="simple">
<li><p>Note: limits(6) are of the form: (xmin,xmax,ymin,ymax,zmin,zmax)</p></li>
</ul>
</div></blockquote>
<p><strong>Synopsis</strong></p>
<div class="highlight-fortran notranslate"><div class="highlight"><pre><span></span><span class="n">CPL_get_bnry_limits</span><span class="p">(</span><span class="n">limits</span><span class="p">)</span>
</pre></div>
</div>
<p><strong>Outputs</strong></p>
<blockquote>
<div><ul class="simple">
<li><p>limits</p>
<ul>
<li><p>Array of cell extents that specify the boundary region.</p></li>
</ul>
</li>
</ul>
</div></blockquote>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>out</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/icmin_bnry" title="f/coupler_module/icmin_bnry"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmin_bnry()</span></code></a>, <a class="reference internal" href="#f/coupler_module/icmax_bnry" title="f/coupler_module/icmax_bnry"><code class="xref f f-func docutils literal notranslate"><span class="pre">icmax_bnry()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmin_bnry" title="f/coupler_module/jcmin_bnry"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmin_bnry()</span></code></a>, <a class="reference internal" href="#f/coupler_module/jcmax_bnry" title="f/coupler_module/jcmax_bnry"><code class="xref f f-func docutils literal notranslate"><span class="pre">jcmax_bnry()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmin_bnry" title="f/coupler_module/kcmin_bnry"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmin_bnry()</span></code></a>, <a class="reference internal" href="#f/coupler_module/kcmax_bnry" title="f/coupler_module/kcmax_bnry"><code class="xref f f-func docutils literal notranslate"><span class="pre">kcmax_bnry()</span></code></a>)</p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_send_min" title="f/coupler/cpl_send_min"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_send_min()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_recv_min" title="f/coupler/cpl_recv_min"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_recv_min()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_get_arrays">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_get_arrays</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">recv_array</span></em>, <em class="sig-param"><span class="pre">recv_size</span></em>, <em class="sig-param"><span class="pre">send_array</span></em>, <em class="sig-param"><span class="pre">send_size</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_get_arrays" title="Permalink to this definition">¶</a></dt>
<dd><p>A helper function to get arrays of the required size for cells local to
the current processor</p>
<p><strong>Example</strong></p>
<p>The first example shows the CFD side of the exchange, with send/recv arrays
obtained from CPL_get_arrays</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>
<span class="n">program</span> <span class="n">main_CFD</span>
    <span class="n">use</span> <span class="n">cpl</span><span class="p">,</span> <span class="n">only</span> <span class="p">:</span> <span class="n">CPL_Init</span><span class="p">,</span> <span class="n">CPL_setup_cfd</span><span class="p">,</span> <span class="n">CPL_send</span><span class="p">,</span> <span class="o">&amp;</span>
                    <span class="n">CPL_recv</span><span class="p">,</span> <span class="n">CPL_get_arrays</span><span class="p">,</span> <span class="n">CPL_finalize</span>
    <span class="n">use</span> <span class="n">mpi</span>
    <span class="n">implicit</span> <span class="n">none</span>

    <span class="n">integer</span> <span class="p">::</span> <span class="n">time</span><span class="p">,</span> <span class="n">CFD_COMM</span><span class="p">,</span> <span class="n">CART_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">,</span> <span class="n">CFD_realm</span><span class="o">=</span><span class="mi">1</span>
    <span class="n">double</span> <span class="n">precision</span><span class="p">,</span> <span class="n">dimension</span><span class="p">(:,:,:,:),</span> <span class="o">&amp;</span> 
         <span class="n">allocatable</span>  <span class="p">::</span> <span class="n">send_array</span><span class="p">,</span> <span class="n">recv_array</span>

    <span class="n">call</span> <span class="n">MPI_Init</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">CPL_init</span><span class="p">(</span><span class="n">CFD_realm</span><span class="p">,</span> <span class="n">CFD_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">MPI_Cart_create</span><span class="p">(</span><span class="n">CFD_COMM</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="p">),</span> <span class="o">&amp;</span> 
                        <span class="p">(</span><span class="o">/.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span><span class="o">.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span><span class="o">.</span><span class="n">true</span><span class="o">./</span><span class="p">),</span> <span class="o">&amp;</span> 
                         <span class="o">.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span> <span class="n">CART_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">CPL_setup_cfd</span><span class="p">(</span><span class="n">CART_COMM</span><span class="p">,</span> <span class="p">(</span><span class="o">/</span><span class="mf">1.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">1.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">1.</span><span class="n">d0</span><span class="o">/</span><span class="p">),</span> <span class="o">&amp;</span>
                       <span class="p">(</span><span class="o">/</span><span class="mf">0.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">0.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">0.</span><span class="n">d0</span><span class="o">/</span><span class="p">),</span> <span class="o">&amp;</span>
                       <span class="p">(</span><span class="o">/</span><span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">32</span><span class="o">/</span><span class="p">))</span>

    <span class="n">call</span> <span class="n">CPL_get_arrays</span><span class="p">(</span><span class="n">recv_array</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">send_array</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

    <span class="n">do</span> <span class="n">time</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span>
        <span class="n">call</span> <span class="n">CPL_recv</span><span class="p">(</span><span class="n">recv_array</span><span class="p">)</span>
        <span class="nb">print</span><span class="o">*</span><span class="p">,</span> <span class="s2">&quot;CFD&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">recv_array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">send_array</span><span class="p">(</span><span class="mi">1</span><span class="p">,:,:,:)</span> <span class="o">=</span> <span class="mf">2.</span><span class="o">*</span><span class="n">time</span>
        <span class="n">call</span> <span class="n">CPL_send</span><span class="p">(</span><span class="n">send_array</span><span class="p">)</span>
    <span class="n">enddo</span>

   <span class="n">call</span> <span class="n">CPL_finalize</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>
   <span class="n">call</span> <span class="n">MPI_comm_free</span><span class="p">(</span><span class="n">CFD_COMM</span><span class="p">,</span><span class="n">ierr</span><span class="p">)</span>
   <span class="n">call</span> <span class="n">MPI_finalize</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>

<span class="n">end</span> <span class="n">program</span> <span class="n">main_CFD</span>
</pre></div>
</div>
<p>The corresponding MD code which matches this, note CPL_get_arrays send and recv
arrays are swapped over (as send from CFD in recv on MD and vice versa)</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span>
<span class="n">program</span> <span class="n">main_MD</span>
    <span class="n">use</span> <span class="n">cpl</span><span class="p">,</span> <span class="n">only</span> <span class="p">:</span> <span class="n">CPL_Init</span><span class="p">,</span> <span class="n">CPL_setup_md</span><span class="p">,</span> <span class="n">CPL_send</span><span class="p">,</span> <span class="o">&amp;</span>
                    <span class="n">CPL_recv</span><span class="p">,</span> <span class="n">CPL_get_arrays</span><span class="p">,</span> <span class="n">CPL_finalize</span>
    <span class="n">use</span> <span class="n">mpi</span>
    <span class="n">implicit</span> <span class="n">none</span>

    <span class="n">integer</span> <span class="p">::</span> <span class="n">time</span><span class="p">,</span> <span class="n">MD_COMM</span><span class="p">,</span> <span class="n">CART_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">,</span> <span class="n">MD_realm</span><span class="o">=</span><span class="mi">2</span>
    <span class="n">double</span> <span class="n">precision</span><span class="p">,</span> <span class="n">dimension</span><span class="p">(:,:,:,:),</span> <span class="o">&amp;</span> 
         <span class="n">allocatable</span>  <span class="p">::</span> <span class="n">send_array</span><span class="p">,</span> <span class="n">recv_array</span>

    <span class="n">call</span> <span class="n">MPI_Init</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">CPL_init</span><span class="p">(</span><span class="n">MD_realm</span><span class="p">,</span> <span class="n">MD_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">MPI_Cart_create</span><span class="p">(</span><span class="n">MD_COMM</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="p">(</span><span class="o">/</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">/</span><span class="p">),</span> <span class="o">&amp;</span> 
                        <span class="p">(</span><span class="o">/.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span><span class="o">.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span><span class="o">.</span><span class="n">true</span><span class="o">./</span><span class="p">),</span> <span class="o">&amp;</span> 
                         <span class="o">.</span><span class="n">true</span><span class="o">.</span><span class="p">,</span> <span class="n">CART_COMM</span><span class="p">,</span> <span class="n">ierr</span><span class="p">)</span>
    <span class="n">call</span> <span class="n">CPL_setup_md</span><span class="p">(</span><span class="n">CART_COMM</span><span class="p">,</span> <span class="p">(</span><span class="o">/</span><span class="mf">1.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">1.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">1.</span><span class="n">d0</span><span class="o">/</span><span class="p">),</span> <span class="o">&amp;</span>
                       <span class="p">(</span><span class="o">/</span><span class="mf">0.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">0.</span><span class="n">d0</span><span class="p">,</span> <span class="mf">0.</span><span class="n">d0</span><span class="o">/</span><span class="p">))</span>

    <span class="n">call</span> <span class="n">CPL_get_arrays</span><span class="p">(</span><span class="n">recv_array</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">send_array</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>

    <span class="n">do</span> <span class="n">time</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span>
        <span class="n">send_array</span><span class="p">(</span><span class="mi">1</span><span class="p">,:,:,:)</span> <span class="o">=</span> <span class="mf">5.</span><span class="o">*</span><span class="n">time</span>
        <span class="n">call</span> <span class="n">CPL_send</span><span class="p">(</span><span class="n">send_array</span><span class="p">)</span>
        <span class="n">call</span> <span class="n">CPL_recv</span><span class="p">(</span><span class="n">recv_array</span><span class="p">)</span>
        <span class="nb">print</span><span class="o">*</span><span class="p">,</span> <span class="s2">&quot;MD&quot;</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">recv_array</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">enddo</span>

   <span class="n">call</span> <span class="n">CPL_finalize</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>
   <span class="n">call</span> <span class="n">MPI_comm_free</span><span class="p">(</span><span class="n">MD_COMM</span><span class="p">,</span><span class="n">ierr</span><span class="p">)</span>
   <span class="n">call</span> <span class="n">MPI_finalize</span><span class="p">(</span><span class="n">ierr</span><span class="p">)</span>

<span class="n">end</span> <span class="n">program</span> <span class="n">main_MD</span>
</pre></div>
</div>
<p>These are then both run together, either MPMD or port connect modes</p>
<dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>precision</strong><em> [</em><em>double</em><em>]</em></p></li>
<li><p><strong>recv_size</strong><em> [</em><em>integer</em><em>]</em></p></li>
<li><p><strong>precision</strong></p></li>
<li><p><strong>send_size</strong><em> [</em><em>integer</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Call to</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_get_olap_limits" title="f/coupler/cpl_get_olap_limits"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_olap_limits()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_my_proc_portion" title="f/coupler/cpl_my_proc_portion"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_my_proc_portion()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_get_no_cells" title="f/coupler/cpl_get_no_cells"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_get_no_cells()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_is_proc_inside">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_is_proc_inside</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">region</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_is_proc_inside" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>region</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p>
</dd>
<dt class="field-even">Return</dt>
<dd class="field-even"><p><strong>res</strong><em> [</em><em>logical</em><em>]</em></p>
</dd>
<dt class="field-odd">Use </dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<code class="xref f f-func docutils literal notranslate"><span class="pre">void()</span></code>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/is_cell_inside">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">is_cell_inside</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">cell</span></em>, <em class="sig-param"><span class="pre">limits</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/is_cell_inside" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>cell</strong> (3)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>limits</strong> (6)<em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Return</dt>
<dd class="field-even"><p><strong>res</strong><em> [</em><em>logical</em><em>]</em></p>
</dd>
<dt class="field-odd">Use </dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<code class="xref f f-func docutils literal notranslate"><span class="pre">void()</span></code>)</p>
</dd>
<dt class="field-even">Called from</dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler/cpl_map_cell2coord" title="f/coupler/cpl_map_cell2coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_cell2coord()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_map_coord2cell" title="f/coupler/cpl_map_coord2cell"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_coord2cell()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_map_glob2loc_cell" title="f/coupler/cpl_map_glob2loc_cell"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_glob2loc_cell()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/is_coord_inside">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">is_coord_inside</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">coord</span></em>, <em class="sig-param"><span class="pre">coord_limits</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/is_coord_inside" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>coord</strong> (3)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>coord_limits</strong> (6)<em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
</ul>
</dd>
<dt class="field-even">Return</dt>
<dd class="field-even"><p><strong>res</strong><em> [</em><em>logical</em><em>]</em></p>
</dd>
<dt class="field-odd">Called from</dt>
<dd class="field-odd"><p><a class="reference internal" href="#f/coupler/cpl_map_md2cfd_coord" title="f/coupler/cpl_map_md2cfd_coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_md2cfd_coord()</span></code></a>, <a class="reference internal" href="#f/coupler/cpl_map_cfd2md_coord" title="f/coupler/cpl_map_cfd2md_coord"><code class="xref f f-func docutils literal notranslate"><span class="pre">cpl_map_cfd2md_coord()</span></code></a></p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/coupler_md_get_save_period">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">coupler_md_get_save_period</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/coupler_md_get_save_period" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Return</dt>
<dd class="field-odd"><p><strong>p</strong><em> [</em><em>integer</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/save_period" title="f/coupler_module/save_period"><code class="xref f f-func docutils literal notranslate"><span class="pre">save_period()</span></code></a>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/coupler_md_get_average_period">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">coupler_md_get_average_period</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/coupler_md_get_average_period" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Return</dt>
<dd class="field-odd"><p><strong>p</strong><em> [</em><em>integer</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/average_period" title="f/coupler_module/average_period"><code class="xref f f-func docutils literal notranslate"><span class="pre">average_period()</span></code></a>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/coupler_md_get_md_steps_per_cfd_dt">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">coupler_md_get_md_steps_per_cfd_dt</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/coupler_md_get_md_steps_per_cfd_dt" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Return</dt>
<dd class="field-odd"><p><strong>p</strong><em> [</em><em>integer</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/timestep_ratio" title="f/coupler_module/timestep_ratio"><code class="xref f f-func docutils literal notranslate"><span class="pre">timestep_ratio()</span></code></a>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/cpl_cfd_dt">
<em class="property"><span class="pre">function</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">cpl_cfd_dt</span></span><span class="sig-paren">(</span><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/cpl_cfd_dt" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Return</dt>
<dd class="field-odd"><p><strong>p</strong><em> [</em><em>real</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><a class="reference internal" href="#f/coupler_module" title="f/coupler_module: The **COUPLER MODULE** A single coupler module for both codes - this contains the same information on both md and cfd side and all variables. A fundamental design philosophy"><code class="xref f f-mod docutils literal notranslate"><span class="pre">coupler_module</span></code></a> (<a class="reference internal" href="#f/coupler_module/dt_cfd" title="f/coupler_module/dt_cfd"><code class="xref f f-func docutils literal notranslate"><span class="pre">dt_cfd()</span></code></a>)</p>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/test_python">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">test_python</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">integer_p</span></em>, <em class="sig-param"><span class="pre">double_p</span></em>, <em class="sig-param"><span class="pre">bool_p</span></em>, <em class="sig-param"><span class="pre">integer_pptr</span></em>, <em class="sig-param"><span class="pre">double_pptr</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/test_python" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><ul class="simple">
<li><p><strong>integer_p</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>double_p</strong><em> [</em><em>real</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>bool_p</strong><em> [</em><em>logical</em><em>,</em><em>in</em><em>]</em></p></li>
<li><p><strong>integer_pptr</strong> (*)<em> [</em><em>integer</em><em>]</em></p></li>
<li><p><strong>double_pptr</strong> (*)<em> [</em><em>real</em><em>]</em></p></li>
</ul>
</dd>
</dl>
</dd></dl>

<dl>
<dt class="sig sig-object f" id="f/coupler/mpi_errorcheck">
<em class="property"><span class="pre">subroutine</span>&#160; </em><span class="sig-prename descclassname"><span class="pre">coupler/</span></span><span class="sig-name descname"><span class="pre">mpi_errorcheck</span></span><span class="sig-paren">(</span><em class="sig-param"><span class="pre">ierr</span></em><span class="sig-paren">)</span><a class="headerlink" href="#f/coupler/mpi_errorcheck" title="Permalink to this definition">¶</a></dt>
<dd><dl class="field-list simple">
<dt class="field-odd">Parameters</dt>
<dd class="field-odd"><p><strong>ierr</strong><em> [</em><em>integer</em><em>,</em><em>in</em><em>]</em></p>
</dd>
<dt class="field-even">Use </dt>
<dd class="field-even"><p><code class="xref f f-mod docutils literal notranslate"><span class="pre">mpi</span></code></p>
</dd>
</dl>
</dd></dl>

</section>
</section>
</section>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h1 class="logo"><a href="index.shtml">cpl-library</a></h1>








<h3>Navigation</h3>
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="cpp_api.shtml">C++ Bindings</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="#">Fortran Bindings</a><ul>
<li class="toctree-l2"><a class="reference internal" href="#main-functions">Main Functions</a><ul>
<li class="toctree-l3"><a class="reference internal" href="#cpl-init">CPL init</a></li>
<li class="toctree-l3"><a class="reference internal" href="#cpl-setup-md">CPL Setup MD</a></li>
<li class="toctree-l3"><a class="reference internal" href="#cpl-setup-cfd">CPL Setup CFD</a></li>
<li class="toctree-l3"><a class="reference internal" href="#cpl-recv">CPL Recv</a></li>
<li class="toctree-l3"><a class="reference internal" href="#cpl-send">CPL Send</a></li>
<li class="toctree-l3"><a class="reference internal" href="#cpl-get-arrays">CPL Get Arrays</a></li>
</ul>
</li>
<li class="toctree-l2"><a class="reference internal" href="#full-listing">Full Listing</a><ul>
<li class="toctree-l3"><a class="reference internal" href="#coupler-module">Coupler Module</a></li>
<li class="toctree-l3"><a class="reference internal" href="#coupler-methods-module">Coupler Methods Module</a></li>
</ul>
</li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="python_api.shtml">Python Bindings</a></li>
</ul>

<div class="relations">
<h3>Related Topics</h3>
<ul>
  <li><a href="index.shtml">Documentation overview</a><ul>
      <li>Previous: <a href="cpp_api.shtml" title="previous chapter">C++ Bindings</a></li>
      <li>Next: <a href="python_api.shtml" title="next chapter">Python Bindings</a></li>
  </ul></li>
</ul>
</div>
<div id="searchbox" style="display: none" role="search">
  <h3 id="searchlabel">Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="search.shtml" method="get">
      <input type="text" name="q" aria-labelledby="searchlabel" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false"/>
      <input type="submit" value="Go" />
    </form>
    </div>
</div>
<script>$('#searchbox').show(0);</script>








        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      &copy;2022, Ed Smith.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 4.5.0</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="_sources/fortran_api.rst.txt"
          rel="nofollow">Page source</a>
    </div>

    

    
  </div></body>
</html>