# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
    paths:
      - src/**
      - test/**
      - bin/**
      - make/**
      - examples/**
      - .github/**
      - Makefile
      - SOURCEME.sh

  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        mpi: [ 'mpich' ]
        #os: [ubuntu-18.04, ubuntu-20.04, ubuntu-22.04]
        #mpi: [ 'mpich', 'openmpi' ]
    runs-on: ${{ matrix.os }}

    steps:
          
      - name: Update repo
        run: sudo apt-get update -y 
        
      - name: Setup MPI
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: ${{ matrix.mpi }}
                 
      #- name: Check MPI version
      #  run: cat ./make/PLATFORM
      #- name: Install mpich
      #  run: sudo apt-get install -y mpich   

      - name: Install mpi4py
        run: pip install mpi4py
        
      - name: Install valgrind
        run: sudo apt-get install -y valgrind
     
      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install pytest
        run: pip install pytest

      - name: Install scientific packages
        run: pip install numpy scipy matplotlib

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Set defaul compiler and MPI 
        run: echo "${{ matrix.mpi }}_gcc" > make/PLATFORM
        
      - name: Build cpl-library
        run: |
          ls ./
          make PLATFORM=gcc
          ls ./lib/
          
      - name: Initialisation test
        if: always()
        run: |
          source SOURCEME.sh
          make test-pytest-initialisation

#      Valgrind test dropped on Actions as mpich on 
#      server raises spurious leaks from mpi, see e.g.
#      https://valgrind.org/docs/manual/mc-manual.html#mc-manual.mpiwrap
#      and the valgrind-mpi package which provides libmpiwrap os from openmpi
#      - name: memory test
#        if: always()
#        run: |
#          source SOURCEME.sh
#          make test-valgrind

      - name: Examples test
        if: always()
        run: |
          source SOURCEME.sh
          make test-examples
               
      - name: Field/Force test
        if: always()
        run: |
          source SOURCEME.sh
          make test-gtests
        
      - name: Drag model test
        if: always()
        run: |
          source SOURCEME.sh
          make test_Dragmodels
                
      - name: Mapping test
        if: always()
        run: |
          source SOURCEME.sh
          make test-pytest-mapping  
        

#      - uses: actions/checkout@v2
#      - name: Setup tmate session
#        if: ${{ failure() }}
#        uses: mxschmitt/action-tmate@v3
